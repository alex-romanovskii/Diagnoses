{"org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.setInstant(Instant)": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.fleece.jaxrs.FleeceProviderTest.array()": "initial import\n", "org.apache.johnzon.mapper.ByteShort.getShortWA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderMove()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.flush()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonb.MoreTests.asBoolean()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.NullObject.getNullArray()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.core.JsonLongImpl.equals(Object)": "renamed fleece to johnzon\n", "org.apache.fleece.core.StringBuilderThreadLocalProvider.StringBuilderThreadLocalProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.create(ValidationContext)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonStreamParserImpl.getEscapedString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.OrderTest.getInstance()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonPatchTest.testMovingObjectMemberNonexistingTarget()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.SerializationTest.jsonString()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.core.JsonParserTest.stringescapeVariousBufferSizesBogus()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(Calendar)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonNullValues()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(TimeZone)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.MapperBuilder.setAccessMode(AccessMode)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.JsonbAccessMode.write(Object,Object)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.JsonbReadTest.propertyMapping()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.reflection.ClassMapping.ClassMapping(Class,AccessMode,Map,Map)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.DeduplicatedPerson.getKids()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyReader.JohnzonMessageBodyReader(Mapper,Collection)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonschema.ValidationError.getMessage()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonPatchDiff.diff(JsonPatchBuilder,String,JsonStructure,JsonStructure)": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.mapper.JsonpIntegrationTest.compare(String,String)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonMergePatchImpl.apply(JsonValue)": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.core.JsonParserTest.dosProtected()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonLocationImpl.toString()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonb.MyDeserializer.deserialize(JsonParser,DeserializationContext,Type)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.JsonGeneratorFacade.writeEnd()": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.Mappings.doFindOrCreateClassMapping(Type,Map)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setSupportGetterForCollections(boolean)": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.johnzon.jsonb.Student.setName(String)": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map,JohnzonAdapterFactory,JsonProvider,Supplier,Supplier,AccessMode,boolean,boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonb.Person.getPersonAge()": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.mapper.converter.URLConverter.toString(URL)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MapperConfig.findAdapter(Type)": "JOHNZON-292 accept Enum subclasses as enums\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.getValue()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.core.JsonStreamParserImpl.readString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperEnhancedTest.writeReadSortedSet()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonschema.regex.JsRegexTest.invalid()": "provide a Joni integration for jsonschema when nashorn will be completely dropped - todo: check if we shade it with minimal=true\n", "org.apache.johnzon.jsonb.JohnsonJsonb.close()": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.apply(Class)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.mapper.MappingParserImpl.toNumberValue(JsonNumber)": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.core.JsonStreamParserImpl.copyCurrentValue()": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.fleece.core.JsonObjectListener.onKey(String)": "initial import\n", "org.apache.johnzon.core.JsonGeneratorImplTest.stringArrayEscapes()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.deserialize(Type,JsonParser)": "reupdating jsonb api\n", "org.apache.johnzon.jsonb.JsonbReadTest.setValue(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeEscaped0(String)": "remove unnecessary method call in loop condition\n", "org.apache.johnzon.mapper.MapperConfig.addAdapter(AdapterKey,Adapter)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.core.JsonLongImpl.bigIntegerValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.OrderTest.getIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(JsonParser,Class)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategy.isVisible(Field)": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_950(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.missingImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.access.Meta.getAnnotation(Field,Class)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage4()": "Improved handling of trailing garbage\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(int)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.Mappings.addGetterIfNeeded(Map,String,AccessMode,boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getNestedName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.Mapper.toObject(JsonValue,Type,Converter)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonParserTest.invalidEmptyObject()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.fleece.core.JsonDoubleImpl.intValueExact()": "initial import\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setPeriod(Period)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteIterable(Iterable,Collection,JsonPointerTracker)": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setSimpleTimeZone(SimpleTimeZone)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.Mapper.doWriteArray(Collection,JsonGenerator)": "JOHNZON-71 remove unused code\n\nThose parts got moved over to MappingGeneratorImpl\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,BufferStrategy,boolean)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.core.BufferStrategyFactory.newBuffer()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.isTour()": "JOHNZON-77 added test for collections\n", "org.apache.fleece.mapper.MapperTest.setBool(boolean)": "initial import\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.getName()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonParserTest.fail30()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperEnhancedTest.writeReadChar()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.testNullCheckValue()": "JOHNZON-96 add tests for null checks\n", "org.apache.fleece.jaxrs.xml.WadlDocumentToJson.createNode(Node)": "FLEECE-8 another bunch of cleanup and improvements from Hendrik Saly\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderCopyMissingPath()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.Mapper.readCollection(Reader,ParameterizedType,Class)": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJsonValue(JsonValue,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,BigDecimal)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.access.FieldAccessMode.FieldWriter(Field,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObject(Object,JsonGenerator,boolean,Collection)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonParserTest.fail26()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Record.Record(int)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.mapper.reflection.Generics.resolveParameterizedType(Type,Type)": "JOHNZON-303 a class with some generic should be able to map a container (list/map) using this generic\n", "org.apache.johnzon.jsonb.JsonbAccessMode.ParsingCacheEntry(DecoratedType,Types,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.access.FieldAccessMode.extractKey(Field,String)": "JOHNZON-37 @JohnzonProperty\n", "org.apache.johnzon.mapper.DogOwner.getName()": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.core.JsonPointerImpl.validateArrayIndex(String)": "Added possibility to use minus as array index for the remove operation.\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(Reader,Type)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.getSize(T,Class,Type,Annotation,MediaType)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.jsonb.PolymorphicConfigTest.hashCode()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonProviderImpl.get()": "JOHNZON-218 ensure to not allocate BufferStrategy.BufferProvider in JsonProviderImpl when not needed\n", "org.apache.johnzon.core.JsonParserTest.simpleUTF16LEAutoDetect()": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.fleece.core.JsonObjectImpl.putAll(Map)": "initial import\n", "org.apache.johnzon.mapper.NullContainer.getArray()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.fleece.mapper.Mapper.mapObject(Type,JsonReader)": "initial import\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.getArray()": "JOHNZON-157 add more tests and remove obsolete code\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.negate()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonProviderImpl.createValue(double)": "JOHNZON-96 upgrade to last version of the JSON-P-1.1 spec\n\nWIP.\nMake it compile again.\nTests still broken.\nSome methods still missing.\n", "org.apache.johnzon.mapper.internal.Streams.skip(long)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.toString()": "JOHNZON-239 transient support\n", "org.apache.johnzon.core.JsonParserTest.testUTF16Stream()": "JOHNZON-16 Fix BOM detection for UTF-8, new testcase for stream that throws an exception by Thiago Veronezi\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.isValid(double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodGetterAsWriter(Method)": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.setManufacturer(String)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.websocket.jsr.JsrStructureDecoder.doRead(JsonReader)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getSimpleTimeZone()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.TestWithTypeConverter.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-72 removed unnecessary method from interface\n\nSuppress conversion for same instance via internal class\n", "org.apache.johnzon.osgi.cdi.RegisterCdiExtension.ifPossible()": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.mapper.reflection.Mappings.getClassMapping(Type)": "caching a bit more reflection for objects, this can be reworked to be more adapted BTW\n", "org.apache.johnzon.mapper.MapperTest.readEmptyArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.Getter.Getter(AccessMode,boolean,boolean,boolean,boolean,Adapter,int)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonLocationImpl.getColumnNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJsonValue(Object,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.OptionDeSer.serialize(Option,JsonGenerator,SerializationContext)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.osgi.Activator.whenTrue(boolean)": "JOHNZON-295 Only set JsonbJaxrsProvider configuration when non-default values are set\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>\n", "org.apache.johnzon.jsonb.OrderTest.getLongInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.to(B)": "renaming jsonb adapter methods\n", "org.apache.johnzon.jsonb.JsonbReadTest.setDate(LocalDate)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.build()": "JOHNZON-104 JsonPatchBuilder must be reusable\n\nreported as JSON_PROCESSING_SPEC-84 which got moved to\nhttps://github.com/javaee/json-processing-spec/issues/84\n", "org.apache.fleece.core.JsonStreamParser.getLong()": "initial import\n", "org.apache.johnzon.jsonschema.spi.builtin.UniqueItemsValidation.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.websocket.internal.jsr.FactoryLocator.writerLocate()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isNotVisible(PropertyVisibilityStrategy,DecoratedType)": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.mapper.MapperTest.testIntArray()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail1()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonReaderImplTest.parseMedium11KbJsonFile()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.typeArray()": "JOHNZON-191 support type validation when value is an array\n", "org.apache.johnzon.mapper.MapperTest.setArray(TheObject)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonNumberImpl.equals(Object)": "initial import\n", "org.test.apache.johnzon.mojo.SomeValue.set_9999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.DynamicInstance.DynamicInstance(ContextResolver)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.fleece.mapper.TestClass.getBd()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,BigInteger)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail60()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.JsonbAccessMode.create(Object)": "JOHNZON-235 ensure @JsonbCreator is validated even when the factory is not static\n", "org.apache.johnzon.core.JsonProviderDelegate.createReader(Reader)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getPeriod()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.test.apache.johnzon.mojo.SomeValue.getSecondaryMetrics()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setOptionalLong(OptionalLong)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.apply(JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,boolean)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.core.JsonGeneratorFacade.write(JsonValue)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.jsonb.converter.JsonbNumberConverter.toString(Number)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPointer.getValue(JsonValue,String,int,int)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMinimumValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.serializer.DeserializationContextTest.issue277()": "Enabled test as it seems to run well.\n\nThe reason why this test was disabled seems to be gone.\n\nSigned-off-by: Markus KARG <markus@headcrashing.eu>\n", "org.apache.johnzon.mapper.CollectionMapping.CollectionMapping(boolean,Class,Type)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonReaderImpl.onValue(String,String)": "initial import\n", "org.apache.fleece.core.JsonObjectListener.onArray(Object)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeNull()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.websocket.internal.jsr.FactoryLocator.newWriterFactory()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setInterfaceImplementationMapping(Map)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail9()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonCharBufferStreamParser.JsonCharBufferStreamParser(InputStream,Charset,int,BufferStrategy)": "supporting several buffer cache strategies\n", "org.apache.fleece.core.JsonStreamParser.createLocation()": "initial import\n", "org.apache.johnzon.core.JsonNumberTest.testHashCode()": "JOHNZON-123 align JsonNumber hash calculation with the spec\n\nTxs to Svetlin Zarev for the report!\n", "org.apache.johnzon.mapper.MapperTest.testCharArray()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.jaxrs.Johnzon.setName(String)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.withDeserializationPredicate(Predicate)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean,Boolean,Map,boolean,boolean,boolean,Function,Function,String,Predicate,Predicate)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.mapper.EnumTest.compare(String,String)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.access.FieldAccessMode.doFindReaders(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyWriter.JohnzonMessageBodyWriter(Mapper)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MetaMapperTest.getName2()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.POJO.getName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.LocationTest.assertJsonLocation(String,JsonLocation)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.DeduplicatedPerson.setKids(List)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.getActualTypeArguments()": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.mapper.TestClass.setSose(SortedSet)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.JohnzonJsonParserWrapper(JsonParser)": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean,boolean)": "JOHNZON-143 make isDeduplicateObjects config a ternary flag.\n\nThe rule is now:\n* _explicit_ decuplicateObjects set via config? -> use this\n* otherwise -> check @JohnzonDeduplicateObjects annotation\n* otherwise -> false\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeKey(String)": "fix pretty printing\n", "org.apache.johnzon.core.JsonReaderImpl.JsonReaderImpl(JsonParser,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setPolymorphicSerializationPredicate(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(JsonObjectBuilder)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.ParsingCacheEntry.ParsingCacheEntry(DecoratedType,Types,BufferStrategy)": "use jsonp as base for jsonb and not johnzon internals\n", "org.apache.johnzon.jsonb.Animal.getAge()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonStreamParser.isNumber(char)": "initial import\n", "org.apache.johnzon.mapper.BaseList.setValue(List)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.AbstractJsonFactory.getBool(String,boolean)": "JOHNZON-33 Define appropriate buffer size and max text size (also simplified factories)\n", "org.apache.johnzon.core.JsonProviderImpl.createDiff(JsonStructure,JsonStructure)": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.jaxrs.Johnzon.Johnzon(String)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.OrderTest.setFourth(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.jaxrs.WadlDocumentMessageBodyWriter.isWriteable(Class,Type,Annotation,MediaType)": "Document to json @Provider mainly dedicated to wadls (not defined behavior in other cases)\n", "org.apache.johnzon.jsonb.IJsonTest.binary()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setSkipEmptyArray(boolean)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.DateFormatTest.dateFormatMethods()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.ObjectTypeTest.writeJson(Dog,JsonbGenerator)": "JOHNZON-71 improve JsonbGenerator Converter test\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,JsonArrayBuilder)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonDoubleImpl.isIntegral()": "initial import\n", "org.apache.johnzon.mapper.ObjectTypeTest.setMother(Dog)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.mapper.ObjectTypeTest.getActualTypeArguments()": "JOHNZON-72 added test for ObjectConverter\n", "org.apache.johnzon.jsonschema.regex.JoniRegex.JoniRegex(String)": "provide a Joni integration for jsonschema when nashorn will be completely dropped - todo: check if we shade it with minimal=true\n", "org.apache.johnzon.core.JsonStreamParserImpl.parseLongFromChars(char,int,int)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStreamParserImpl.isAsciiDigit(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.CollectionObject.CollectionObject(MyEnum[])": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.ReverseConverter.toString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.websocket.internal.mapper.MapperLocator.locate()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.StaticNestedClass.setNestedId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.SimplePropertyNillable.getValue()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.Mappings.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter,Getter,Method)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.mapper.Mappings.addSetterIfNeeded(Map,String,AccessMode,boolean)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.jaxrs.JohnzonProvider.JohnzonProvider()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonCollectorTest.testToJsonObjectCustomKeyAndValueMapper()": "JOHNZON-96 added tests for JsonCollectors\n", "org.apache.fleece.core.JsonStringImpl.getValueType()": "initial import\n", "org.apache.johnzon.core.JsonReaderImplTest.testGrowingString()": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.mapper.internal.Streams.mark(int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.test.apache.johnzon.mojo.SomeValue.setScorePercentiles(ScorePercentiles)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.Person.getPersonName()": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.jsonb.PartialOrder.setLongInstance(long)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.addCloseable(Closeable)": "JOHNZON-135 remove unused config options again\n", "org.apache.johnzon.mapper.converter.ShortConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonLongImpl.isIntegral()": "initial import\n", "org.apache.johnzon.websocket.endpoint.Message.Message(String)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.MappingParserImpl.getJsonParser()": "JOHNZON-71 improve Converter and MappingParser\n\npairprogramming together with rsandtner\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.MapperEnhancedTest.writeReadChar()": "FLEECE-14 char handling in mapper\n", "org.apache.johnzon.jsonb.JohnzonProviderTest.create()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jaxrs.JohnzonResource.johnzon()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.TheObject.setName(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(String)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.getName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.WildcardListHolder.setInstance(List)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getLocalDateTime()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.JsonbAccessMode.validateAnnotationsOnTransientField(DecoratedType)": "JOHNZON-239 transient support\n", "org.apache.fleece.mapper.converter.FloatConverter.toString(Float)": "initial import\n", "org.apache.fleece.core.CharBufferQueueProvider.newInstance(int)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(BigDecimal)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.jaxrs.DelegateProvider.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail64()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonObjectImpl.JsonObjectImpl(Map)": "JOHNZON-193 ensure objectbuilder is reusable (todo: check it is valid since the map is not accurate for that but it is what the spec designed)\n", "org.apache.johnzon.jsonb.PolymorphicConfigTest.equals(Object)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonReaderImplTest.stringescapeVariousBufferSizes()": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.modes()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.NumberClass.setBool(boolean)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorImpl.justWrite(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonParserTest.fail50()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.mapper.TestClass.getInner()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.MoreTests.serialize(Option,JsonGenerator,SerializationContext)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.MappingParserImpl.convertTo(Adapter,JsonValue)": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.johnzon.mapper.Mappings.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter,Getter,Method,Method)": "JOHNZON-198 basic adder support\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_990(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.EnumTest.noDeclaringClass()": "JOHNZON-292 accept Enum subclasses as enums\n", "org.apache.fleece.core.JsonGeneratorImpl.toUnicode(char)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonLongImpl.getValueType()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.JsonObjectGenerator.JsonObjectGenerator(JsonBuilderFactory)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.ObjectTypeTest.to(TypeInstance)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.MapperTest.getNumByte()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.skipArray()": "JOHNZON-139 improve skipArray and skipObject\n\nThey both need to also work within objects.\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeLong0(long)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonProviderImpl.createReaderFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.JohnzonAnyMappingTest.handle(String,Object)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.jsonb.extension.JsonValueWriter.getArray()": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.jsonb.Types.setLocalDateTime(LocalDateTime)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.core.JsonLocationImpl.getStreamOffset()": "initial import\n", "org.apache.johnzon.jsonb.PartialOrder.setAnIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setReadAttributeBeforeWrite(boolean)": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.fleece.jaxrs.FleeceProvider.FleeceProvider(Mapper)": "initial import\n", "org.apache.johnzon.mapper.Mappings.isPrimitive(Type)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.converter.ReversedAdapter.ReversedAdapter(Adapter)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.Customer()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.NullObject.setNullArray(String)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.NillableTest.globalNillableConfigInNonNullablePackage()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getClassOrPackageAnnotation(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.MapperPerformanceTest.createTestIntDocument()": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.core.BufferStrategyFactoryTest.testDefaultStrategies()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.PatternValidation(Function)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.jsonb.CompositePOJO.setStringArray(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonParserTest.arrayFollowedByGarbage1()": "Improved handling of trailing garbage\n", "org.apache.fleece.core.JsonGeneratorImpl.JsonGeneratorImpl(Writer,BufferStrategy,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.NullTest.writeNullObjectDefault()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.test.apache.johnzon.mojo.SomeValue.setScoreUnit(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.converter.DoubleConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail6()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStringImpl.getString()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.CommentsJsonStreamParserImpl.defaultHandling(char)": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.johnzon.core.StringBuilderThreadLocalProvider.newInstance(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.extension.JsonValueReader.JsonValueReader(JsonStructure)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.JsonbJsonValueTest.from()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.ObjectTypeTest.hashCode()": "JOHNZON-72 added ObjectConverter support for reading json\n", "org.apache.fleece.mapper.LiteralTest.writeReadNumbersNaN()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toArray(Object)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.Person.getName()": "JOHNZON-135 support recursive structures\n\nthis is the write part for now.\nWe still need to support de-serialisation\n", "org.apache.johnzon.mapper.ClassMapping.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonPointerImpl.add(JsonValue,int,int,JsonValue)": "JOHNZON-95 fixed JsonPointer#add for complex objects\n", "org.apache.johnzon.mapper.AnyMe.handle(String,Object)": "JOHNZON-85 @JohnzonAny\n", "org.apache.fleece.core.StringBuilderSingletonProvider.release(StringBuilder)": "resetting StringBuilder in all implementations of bufferstrategy\n", "org.apache.johnzon.mapper.access.MethodWriter.write(Object,Object)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setBinaryDataStrategy(String)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.getNestedId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPointerImpl.isEmptyJsonPointer()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.CircularObjectsTest.setMarriedTo(Person)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.JohnzonBuilder.hasTime(Calendar)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonPointerImpl.addInternal(JsonValue,JsonValue,List,boolean)": "removing useless check\n", "org.apache.johnzon.mapper.DeduplicatedPerson.setMarriedTo(DeduplicatedPerson)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.JsonGeneratorImplTest.errorWhenWritingValueInObject()": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.jsonb.GenericAdapterTest.adaptToJson(EnumHolder)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.core.SerializableJsonValue.SerializableJsonValue(JsonValue)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.fleece.jaxrs.FleeceResource.fleeces1()": "initial import\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.containsItems()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.access.FieldAccessMode.findConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPatchDiffTest.testComplexDiff()": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.mapper.Customer.setLastName(String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeIndent(int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.PartialOrder.getLongInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.core.LocationTest.testLocationOnParsingException()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.LocationTest.failBytesInput()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonWriterImpl.flush()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.websocket.internal.jsr.FactoryLocator.readerLocate()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.JsonObjectImpl.getJsonString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeNull(String)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidator.ItemsValidator(String,Function,Collection)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonArrayImpl.getValueType()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParser.readUntilEvent()": "initial import\n", "org.apache.johnzon.jaxrs.JohnzonResource.array()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.converter.BigDecimalConverter.toString(BigDecimal)": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonPOJOs()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonArrayImpl.getJsonObject(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.MethodReader.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveJsonObjectWithEmptyJsonPointer()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.exclusiveMinimum()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddString()": "JOHNZON-96 add test for JsonPatchBuilder with initialData\n", "org.apache.fleece.mapper.reflection.Mappings.Getter(Method,boolean,Converter,int)": "initial import\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.nullJsonValueArray()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.jsonb.OrderTest.setIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.reflection.CompositeWriter.getClassOrPackageAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.fleece.core.LocationTest.testLocationOnParsingException()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategyTest.subclassing()": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.core.JsonStreamParserImpl.getBufferExtends(int)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.mapper.MapperConfig.setSkipEmptyArray(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.fleece.core.ValueBuilder.readValue()": "initial import\n", "org.apache.johnzon.jaxrs.JohnzonResource.out(AsyncResponse)": "JOHNZON-133 ensure we test correctly jaxrs types and not just assume the signature is right\n", "org.apache.fleece.core.JsonStreamParserImpl.readNextNonWhitespaceChar()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonPatchTest.testCopyObjectMember()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.core.JsonGeneratorImplTest.arrayInArray()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.isValid(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.Mappings.ClassMapping(Class,AccessMode,Map,Map,ObjectConverter,ObjectConverter)": "JOHNZON-81 better support of Object as mapping type - write side\n", "org.apache.johnzon.mapper.Dog.hashCode()": "JOHNZON-72 added ObjectConverter support for reading json\n", "org.apache.johnzon.mapper.MapperBuilder.setUseBigDecimalForFloats(boolean)": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.nestedArrayString()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.jsonb.GenericAdapterTest.EnumHolder(Enum)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.mapper.reflection.Mappings.handleVirtualObject(Collection,JohnzonVirtualObject,Map,Map,Map,Map,boolean)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.SerializablePrimitives.toString()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.fleece.core.JsonParserTest.fail10()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonPointerTest.testAddJsonStructureWithTargetNull()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonParserTest.escapedStringAwareParser()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(SimpleTimeZone)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String,String)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.core.util.ArrayUtil.asList(char)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findWriters(Class)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.access.MethodAccessMode.getType()": "JOHNZON-56 basic one level support of generics\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail4()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addDateConverter(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writePrimitives(String,Class,Object)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.mapper.Person.getMother()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.fleece.core.JsonReaderImplTest.specialWithStringAsByteArrayInputStream()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(Writer,BufferStrategy,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.client(MediaType)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.StringHolder.StringHolder(String)": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object,OutputStream)": "simple value handling\n", "org.apache.johnzon.core.JsonPatchTest.testAddArrayElementToEmptyArray()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.catImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.reflection.Mappings.ClassMapping(Class,AccessMode,Map,Map)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.getJsonGenerator()": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.core.JsonPatchDiff.isJsonArray(JsonValue)": "JOHNZON-103 implemented JsonPatchDiff for JsonArray\n\nstill more tests needed\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeObject(String,Object,JsonGenerator)": "JOHNZON-211 ensure the serialization context uses the passed key if the related method is called\n", "org.apache.johnzon.core.JsonDoubleImpl.intValueExact()": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.jsonb.JohnzonJsonb.isCollection(Type)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.getOwnerType()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonb.AnySupportTest.setValues(Map)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.mapper.MapperBuilder.setSkipEmptyArray(boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonWriterFactoryImpl.JsonWriterFactoryImpl(Map)": "Minor performance improvements for writer and reader factories and for provider impl\n", "org.apache.johnzon.mapper.MapperBuilder.setUseShortISO8601Format(boolean)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.MapperBuilder.setBufferSize(int)": "JOHNZON-30 basic johnzon jsonp component config in our mapper/jaxrs provider\n", "org.apache.fleece.core.JsonStreamParserImpl.getLocation()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.Animal.Animal(int,String,float,boolean)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.JsonReaderImpl.checkClosed()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.LiteralTest.getShortNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.GenericsTest.getInstance()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.mapper.access.FieldAccessMode.FieldAccessMode(boolean,boolean)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.ObjectConverterTest.hashCode()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonPointer.add(JsonObject,JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.fleece.jaxrs.JsrMessageBodyWriter.JsrMessageBodyWriter()": "initial import\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setDate(Date)": "complete support for DateFormat", "org.apache.fleece.core.JsonStreamParser.JsonStreamParser(InputStream,int)": "initial import\n", "org.apache.fleece.core.ThreadLocalBufferCache.getCache()": "adding to BufferStrategy StringBuilder, we can still desire to wire Strings to its usage (ie get rid of it as a static class)\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.JsonPatchBuilderImpl(JsonProvider)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.core.JsonMergePatchImpl.toJsonValue()": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.mapper.Pair.getS()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.fail25()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonProviderDelegate.createWriter(Writer)": "Minor performance improvements for writer and reader factories and for provider impl\n", "org.apache.johnzon.mapper.access.Meta.getDirectAnnotation(AccessibleObject,Class)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonProviderImpl.createPatch(JsonArray)": "JOHNZON-96 add test for Json.createPatch\n", "org.apache.johnzon.mapper.MapperTest.getAction()": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage3()": "Improved handling of trailing garbage\n", "org.apache.johnzon.mapper.Pair.Pair(int,String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.fail39()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object,OutputStream)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.getType()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.converter.BigDecimalConverter.toString(BigDecimal)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.CompositeReader.read(Object)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.list()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonProviderDelegate.createGenerator(Writer)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.MapperTest.getNested()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayImpl.getBoolean(int,boolean)": "JOHNZON-94 ignoring null and true/false serialization to ensure == works for these values\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.replace(String,boolean)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonb.TestDTO.getInstant()": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.johnzon.mapper.CompositeWriter.getType()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.setNestedName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.HolderHolder.setInstance(StringHolder)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.core.JsonArrayImplTest.arrayIndex()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.CompositeReader.getType()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.MapBuilderReader.getAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategyTest.isVisible(Method)": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.mapper.MapperTest.writeListOfList()": "add tests for null values in arrays and lists\n", "org.apache.johnzon.core.JsonInMemoryParser.getLong()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.fleece.jaxrs.FleeceResource.asParam(Fleece)": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail47()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonPatchDiffTest.testRemoveValueFromArray()": "JOHNZON-103 implemented JsonPatchDiff for JsonArray\n\nstill more tests needed\n", "org.apache.fleece.core.JsonGeneratorImpl.writeEnd()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.reflect.GenericArrayTypeImpl.equals(Object)": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.jsonb.AccessorsClass.getValueWithoutField()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.converter.CachedDelegateConverter.CachedDelegateConverter(Converter)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueJsonArrayElementLeadingZeroShouldThrowJsonException()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.mapper.Mappings.cast(Type)": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.serialize(Option,JsonGenerator,SerializationContext)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonPointerImpl.addInternal(JsonValue,JsonValue,List)": "JOHNZON-274 ensure JsonPatch respects requested path for arrays and objects\n", "org.apache.johnzon.core.TypesTest.equals(Object)": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.core.JsonPatchDiffTest.nestedObjects()": "JOHNZON-312 JsonPointer patch process shouldnt check subobjects/arrays not matching the pointer\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.lessThan()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonProviderDelegate.createGeneratorFactory(Map)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator,AccessMode,boolean,boolean,int)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addStringNpeIfNull()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.core.JsonReaderImplTest.parseLarge130KbJsonFile()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerImpl.isPositionToAdd(List)": "JOHNZON-172 fixed applying patch to wrong empty value\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue0()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidator.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.test.JsonbRule.withPropertyOrderStrategy(String)": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.johnzon.core.JsonParserTest.bigdecimal()": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceProviderTest.getOwnerType()": "initial import\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findWriter(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.Record.equals(Object)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.jsonb.DateFormatTest.packageConfigOverridenByClass()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonProviderDelegate.createParser(InputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.JsonParserTest.fail6()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchTest.testCopyArrayMemberToIndexOutOfBounds()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.reflection.MapBuilderReader.read(Object)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonStreamParserImpl.isIntegralNumber()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.mapper.reflection.Mappings.getAnnotation(Class)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.fleece.core.RFC4627AwareInputStreamReader.RFC4627AwareInputStreamReader(PushbackInputStream)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.NumberClass.getFloatNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.POJOWithMixedFieldAccess.setId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.AdapterTest.adaptFrom(Bar)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.NoWarningTest.noWarn()": "JOHNZON-46 ensuring we dont geenrate warning in our mapper cause of not supported properties\n", "org.apache.johnzon.mapper.internal.Streams.write(char,int,int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.test.apache.johnzon.mojo.PrimaryMetric.setScorePercentiles(ScorePercentiles)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.JohnzonCores.map(JsonParser,JsonReaderFactory)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.fleece.mapper.MapperEnhancedTest.getString()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.Wrapper(Object)": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.jsonb.converter.JsonbConverter.fromString(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonParserFactoryImpl.createParser(JsonArray)": "initial import\n", "org.apache.johnzon.core.JsonProviderImpl.mergePatch(JsonValue,JsonValue)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.johnzon.mapper.MapperBuilder.setSupportHiddenConstructor(boolean)": "JOHNZON-22 supporting private constructors in Mapper\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojoTest.generate()": "JOHNZON-272 Fails to build Johnzon :: Maven Plugin\n\nSigned-off-by: Markus KARG <markus@headcrashing.eu>\n", "javax.json.bind.JsonbConfig.withPropertyNamingStrategy(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJsonValue(JsonValue,Class)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.Mappings.MapBuilderReader(Map,String,int)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.MapperTest.fakedObject()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonArrayImpl.getString(int)": "initial import\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.plusImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.extractValue(JsonValue,String)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.jaxrs.JsrMessageBodyWriter.isWriteable(Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.mapper.NullTest.setStringIsnull(String)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.SomeImpl.getValue()": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.testDeserializeHierarchyOne()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.TransientGetterWithFieldProperty.setInstance(String)": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodReader(Method)": "JOHNZON-23 field access support\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,long)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MapperVersionTest.data()": "JOHNZON-199 skip attribute fix\n\nskip attribute only if both minVersion and mapper.setVersion are set and if mapper.setVersion is less than minVersion (eg minVersion is not jet reached)\n", "org.apache.fleece.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,Charset,BufferStrategy,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.johnzon()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.access.BaseAccessMode.fixTypeVariable(Class,Type)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.CompositeReader.getClassOrPackageAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.MetaMapperTest.getCustom()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.JohnzonJsonbAdapter(JsonbAdapter,Type,Type)": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.johnzon.jsonb.cdi.CDIs.track(JohnsonJsonb)": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.core.JsonPointerUtilTest.testEncodeSecondTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.fleece.core.JsonStreamParserImpl.readNextChar()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.mapper.MapperBuilder.setGeneratorFactory(JsonGeneratorFactory)": "initial import\n", "org.apache.johnzon.jsonb.FloatTest.getInstance()": "JOHNZON-241 float can't be serialized as double\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.findReaders(Class)": "adding FieldAndMethodAccessMode access mode\n", "org.apache.fleece.mapper.converter.LongConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.converter.TimestampAdapterTest.convert()": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.johnzon.core.JsonParserTest.fail67()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.MapBuilderReader.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.cdi.CDIs.load(Object)": "removing unused reverseAdaptersRegistry and ensuring to lookup JohnzonCdiExtension with a creationalcontext\n", "org.apache.johnzon.core.JsonInMemoryParser.JsonInMemoryParser(JsonArray)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.fleece.mapper.converter.CachedDelegateConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,BigInteger)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_1000(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonschema.JsonSchemaValidator.JsonSchemaValidator(Function)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.Person.hashCode()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.websocket.jsr.JsrObjectDecoder.doRead(JsonReader)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.JsonArrayImpl.getInt(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyWriter.getSize(T,Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createParser(InputStream,Charset)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.setInteger(int)": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setCharValue(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.NullTest.writeNullObjectAllowNullSkipEmptyArray()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.mapper.MapperTest.writeObject()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(long)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getSecond()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findObjectConverterReader()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonStreamParserImpl.parseIntegerFromChars(char,int,int)": "renamed fleece to johnzon\n", "org.apache.fleece.core.ThreadLocalBufferCache.release(T)": "adding to BufferStrategy StringBuilder, we can still desire to wire Strings to its usage (ie get rid of it as a static class)\n", "org.apache.johnzon.mapper.NullTest.setIntegerIsnull(Integer)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.core.JsonPointer.isEmptyJsonPointer()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.fleece.core.JsonParserTest.fail5()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.ObjectConverterTest.equals(Object)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.QueueProvider.QueueProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.core.ManualTckTest.jsonParser11Test()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,BigInteger)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.mapper.Mapper.writePrimitives(JsonGenerator,Object)": "FLEECE-14 char handling in mapper\n", "org.apache.fleece.core.JsonParserFactoryImpl.JsonParserFactoryImpl(Map)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonStreamParserImpl.readNextNonWhitespaceChar(char)": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.fleece.core.JsonParserTest.fail19()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonMergePatchDiff.calculateDiff()": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.minimum()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.AnySupportTest.mixed()": "[JOHNZON-314] ensure @JohnzonAny on a field does not duplicate explicit bindings\n", "org.apache.fleece.core.JsonParserTest.fail35()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.GoldCustomer(VIPCustomer,int)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.fleece.mapper.MapperTest.getLongnumber()": "initial import\n", "org.apache.johnzon.mapper.converter.IntegerConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonBuilder.isVisible(Field)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.fleece.core.JsonDoubleImpl.bigIntegerValue()": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail38()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,BigDecimal)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getClassEntry(Class)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.test.apache.johnzon.mojo.PrimaryMetric.getRawData()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.fleece.mapper.MapperEnhancedTests.getInner()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object,Writer)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.Record.toString()": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonAccessors()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.ObjectTypeTest.setName(String)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.core.JsonPatchTest.testRemoveArrayElement()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.SuppressConversionMappingParser.convert(Class,String)": "reupdating jsonb api\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addStringNpeIfNull()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.getConfigInUse()": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setSecond(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.getJsonGenerator()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.isInt(Class)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.mapper.converter.EnumConverter.EnumConverter(Class)": "JOHNZON-292 accept Enum subclasses as enums\n", "org.apache.johnzon.jsonb.OrderTest.partial()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(JsonValue)": "initial import\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(JsonParser,Type)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(OffsetDateTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.AdapterTest.testDeserialize()": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,long)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.MultipleOfValidation.Impl(String,Function,double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MapperTest.setShortW(Short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.fleece.core.JsonGeneratorImpl.write(int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.reflection.CompositeReader.getClassOrPackageAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.fromString(String)": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.fleece.core.JsonStreamParserImpl.isIntegralNumber()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_990()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.Types.visit(Type)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.osgi.Activator.getService(Bundle,ServiceRegistration)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.mapper.MappingParserImpl.buildArray(Type,JsonArray,Adapter,JsonPointerTracker)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonschema.ValidationResult.isSuccess()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.AttemptingInputStream.AttemptingInputStream(byte)": "JOHNZON-17 Thiago Veronezi: RFC4627AwareInputStreamReader - Make sure that we read all the bytes before throwing an exception\n", "org.apache.johnzon.mapper.map.LazyConverterMap.add(AdapterKey,Adapter)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonb.JsonbTransientTest.getInstance()": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.AdderTest.addString(String,String)": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.mapper.MapperTest.getArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.SoseClass.getSose()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeStartObject()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getInt()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.core.JsonPointer.getValue(JsonStructure)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.none()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.converter.EnumConverterTest.fromStringToEnum()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setMaxSize(int)": "JOHNZON-30 basic johnzon jsonp component config in our mapper/jaxrs provider\n", "org.apache.johnzon.mapper.ObjectTypeTest.fromJson(JsonbParser,Type)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.core.AttemptingInputStream.read(byte,int,int)": "JOHNZON-17 Thiago Veronezi: RFC4627AwareInputStreamReader - Make sure that we read all the bytes before throwing an exception\n", "org.apache.johnzon.jsonb.Simple.getValue()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.ThreadLocalBufferCache.ThreadLocalBufferCache(int)": "adding to BufferStrategy StringBuilder, we can still desire to wire Strings to its usage (ie get rid of it as a static class)\n", "org.apache.johnzon.mapper.MapperConfig.findObjectConverter(Class)": "JOHNZON-72 direct lookup for Object.class if we have an interface\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.noContentException()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonb.DateTypes.hashCode()": "complete support for DateFormat", "org.apache.johnzon.mapper.access.BaseAccessMode.findReaders(Class)": "JOHNZON-49 avoid cycling by default for throwable\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonStructures()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.LiteralTest.toString()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.MapperConfig.setClose(boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWint(Integer)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setThird(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.johnzons2()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.access.MethodAccessMode.extractKey(PropertyDescriptor)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.EnumTest.getI()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonGeneratorImplTest.closeOnce()": "JOHNZON-190 ensure jsongenerator#close can be called N, N > 1 times\n", "org.apache.johnzon.mapper.MappingParserImpl.toString(Object)": "JOHNZON-145 improve error handling on missing converter\n", "org.apache.johnzon.jaxrs.JsrProviderTest.unbind()": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.JsrMessageBodyReader.isReadable(Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.core.Strings.toUnicode(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.Generics.resolve(Type,Class)": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.core.SerializationTest.jsonArray()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceArrayElementWithLeadingZeroIndex()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonPointerImpl.add(JsonStructure,JsonValue)": "JOHNZON-95 fixed JsonPointer#add for complex objects\n", "org.apache.johnzon.core.JsonProviderImpl.createGeneratorFactory(Map)": "Minor performance improvements for writer and reader factories and for provider impl\n", "org.apache.johnzon.core.BufferStrategyFactory.CharBufferSingletonProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jsonb.ZonedDateTimeFallbackDateAdapter.adaptFromJson(String)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,JsonValue)": "initial import\n", "org.apache.johnzon.core.ThreadLocalBufferCache.ThreadLocalBufferCache(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.testAddAll()": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(boolean)": "initial import\n", "org.apache.johnzon.mapper.MapperBuilder.setPolymorphicTypeLoader(Function)": "JOHNZON-290 PolumorphicConfig support\n", "org.superbiz.ModelSuperBase.getChildB()": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.setName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.replace(String,int)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.testBuild()": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.fleece.core.JsonGeneratorImpl.writeJsonValue(String,JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.reflection.MapUnwrapperWriter.MapUnwrapperWriter(Map,String)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.Person.setKids(List)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.IJsonTest.setInstance(Date)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.access.FieldWriter.FieldWriter(Field)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.primitive()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeStartArray(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.CompositeReader(Reader,DecoratedType)": "JOHNZON-102 cleaning CompositeDecoratedType usage to avoid coding errors\n", "org.apache.johnzon.core.JsonProviderDelegate.createArrayBuilder()": "Minor performance improvements for writer and reader factories and for provider impl\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(TimeZone)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.cdi.JohnzonCdiExtension.track(JohnsonJsonb)": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.setBike(Bike)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonWriterImpl.markCalled()": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.johnzon.jsonb.StudentHolder.getStudent()": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.core.JsonParserTest.avoidBufferStrategyLeaks()": "JOHNZON-194 ensure jsonparser tolerates multiple close calls\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.getManufacturer()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.core.JsonParserTest.maxStringNumberOK()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.test.apache.johnzon.mojo.PrimaryMetric.getScoreError()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.getNestedId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.getDiscount()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setReaderFactory(JsonReaderFactory)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.MapperTest.readMapObject()": "JOHNZON-80 respecting attributeorder when deserializing SortedMaps\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeStartArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonReaderImplTest.simple()": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWboolean(Boolean)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,long)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperEnhancedTest.setSoma(SortedMap)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.asParam(Johnzon)": "simple jsonb jaxrs provider\n", "org.apache.fleece.core.JsonBaseStreamParser.hasNext()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.NullTest.writeNullObjectDefaultMapAllowNull()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.mapper.Bike.getType()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.mapper.Mappings.findOrCreateClassMapping(Type)": "[JOHNZON-316] ensure parameterized type use their own instance as key cache in mappins and not just the raw type\n", "org.apache.johnzon.core.JsonStreamParserImpl.getString()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findReaders(Class)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.ProvidedInstance.ProvidedInstance(Jsonb)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,JsonObjectBuilder)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerImpl.add(JsonArray,JsonValue)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.MapperTest.writeListWithNulls()": "add tests for null values in arrays and lists\n", "org.apache.johnzon.core.JsonMergePatchImpl.JsonMergePatchImpl(JsonValue,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.IJsonTest.getInstance()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonWriterImplTest.writer()": "initial import\n", "org.apache.johnzon.core.JsonReaderImplTest.simpleBadBufferSize9()": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.johnzon.jsonb.Types.getOffsetDateTime()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.internal.AdapterKey.isAssignableTo(Type)": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.fleece.core.JsonStreamParserImpl.handleQuote()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,BigInteger)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(Reader,Class)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getSoma()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonWriterFactoryImpl.createWriter(OutputStream)": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.xml.WadlDocumentToJsonTest.xmlToJson()": "Document to json @Provider mainly dedicated to wadls (not defined behavior in other cases)\n", "org.apache.johnzon.jsonb.SerializerTest.serialize(StringHolder,JsonGenerator,SerializationContext)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setIgnoreFieldsForType(String)": "JOHNZON-49 avoid cycling by default for throwable\n", "org.apache.johnzon.mapper.MapBuilderReader.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.util.ArrayUtil.get(int)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.Getter.Getter(AccessMode,boolean,boolean,boolean,boolean,MapperConverter,ObjectConverter,int)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.Mappings.addGetterIfNeeded(Map,String,AccessMode,boolean,Class)": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.mapper.EnumTest.testAdvancedEnum(Mapper)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonProviderImpl.createGenerator(OutputStream)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.Types.setOptionalInt(OptionalInt)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.add(String,int)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.Customer(Long,Integer,String,String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.SerializerTest.fromAnnotation()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.Dummy2Adapter.adaptFromJson(JsonString)": "JOHNZON-224 support JsonValue in adapters (parsing side)\n", "org.apache.johnzon.core.JsonPointerTest.testConstructorWithJsonPointerNull()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.SerializerTest.arrayTypes()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.MapperConfig.setTreatByteArrayAsBase64(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.jsonb.JohnzonJsonb.unwrapPrimitiveOptional(Type)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.mapper.Versioned.Versioned(T,Integer)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.onString(JsonString)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.Option.asBoolean()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.Mapper.readCollection(JsonParser,ParameterizedType)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.mapper.MappingParserImpl.mapCollection(Mappings,JsonArray,Adapter,JsonPointerTracker)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.mapper.NullTest.writeNullObjectSkipAll()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.fleece.mapper.Mapper.readObject(InputStream,Type)": "initial import\n", "org.apache.johnzon.mapper.access.BaseAccessMode.fixType(Class,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.JsonPointerImpl.remove(JsonArray)": "Updated the logic based on comments\n", "org.apache.johnzon.jsonb.MyDataJsonField.put(String,String)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "javax.json.bind.JsonbConfig.withFailOnUnknownProperties(Boolean)": "jsonb reverted jsonb.fail-on-unknown-properties, keeping it as a johnzon property\n", "org.apache.fleece.mapper.converter.BooleanConverter.toString(Boolean)": "initial import\n", "org.apache.johnzon.mapper.Mapper.convertTo(Adapter,JsonValue)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.fleece.mapper.converter.BigIntegerConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.BikeConverter.fromJson(JsonObject,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.CompositeWriter.getAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.DefaultMappingTest.Dog()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonStreamParserImpl.getString()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jaxrs.DelegateProvider.isJaxRs2()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonb.JohnzonBuilder.tccl()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.Wrapper.getData()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.getId(Class)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jaxrs.IgnorableTypes.IgnorableTypes(Collection)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.Mapper.toObject(Object,JsonValue,Type,Adapter)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.ClassToWrite.setaDouble(double)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.jsonb.FloatHolder.setInstance(Float)": "JOHNZON-241 float can't be serialized as double\n", "org.apache.johnzon.core.SimpleStack.peek()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.add(String,boolean)": "JOHNZON-95 initial JsonPatchBuilder impl\n", "org.apache.johnzon.jsonb.ColorDeSer.deserialize(JsonParser,DeserializationContext,Type)": "Fix after review\n", "org.apache.johnzon.jsonb.JsonbWriteTest.setValue(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.OrderTest.setFirst(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.converter.JsonbLocalDateTimeConverter.toString(LocalDateTime)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.Types.getUrl()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.internal.Streams.noClose(OutputStream)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.access.FieldAccessMode.write(Object,Object)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.core.JsonParserTest.isIntegralThrowsISE()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.putValue(String,JsonValue)": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseNumberValidationImpl.toNumber(JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonProviderImpl.Cached(Supplier)": "JOHNZON-218 ensure to not allocate BufferStrategy.BufferProvider in JsonProviderImpl when not needed\n", "org.apache.johnzon.jsonb.MyDataJsonField.get(String)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.mapper.TheObject.setCollectionWrapper(List)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setOffsetTime(OffsetTime)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategyTest.isVisible(Field)": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.mapper.reflection.Generics.resolve(Type,Type,Map)": "JOHNZON-303 a class with some generic should be able to map a container (list/map) using this generic\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isOptional(DecoratedType)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.mapper.converter.ClassConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.LiteralTest.getDoubleNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWdouble(Double)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object,Writer)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.mapper.MapperTest.mapToJsonArray()": "JOHNZON-205: add support for arrays in toStructure\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonEnums()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.getRawType()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonb.CompositePOJO.getInner()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidator.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeStartObject(String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setFailOnUnknownProperties(boolean)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.fleece.core.JsonArrayListener.getObject()": "initial import\n", "org.apache.johnzon.core.JsonDoubleImpl.numberValue()": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.mapper.MapperTest.Pair(int,String)": "initial import\n", "org.apache.fleece.core.JsonObjectImpl.put(String,JsonValue)": "initial import\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map,JohnzonAdapterFactory,Supplier,AccessMode,boolean,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.factory.CdiJohnzonAdapterFactory.CdiJohnzonAdapterFactory(Object)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonObjectImpl.getJsonNumber(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mappings.Getter(AccessMode,boolean,boolean,boolean,boolean,MapperConverter,int)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.Versioned.getVersion()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.fleece.jaxrs.Fleece.Fleece(String)": "initial import\n", "org.apache.johnzon.jsonb.POJO.setId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonParserTest.JsonParserTest()": "don't fail if not the right charset\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(Object)": "JOHNZON-96 add test + logic for ArrayBuilder ft of JSONP-1.1\n", "org.apache.johnzon.websocket.mapper.JohnzonTextDecoder.init(EndpointConfig)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.setRating(int)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonParserTest.fail46()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.PatchValue.PatchValue(JsonProvider,JsonPatch,String,String,JsonValue)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.ClassToWrite.setName(String)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.GenericsTest.typeVariableMultiLevel()": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.core.JsonWriterImplTest.objectWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.jsonb.JohnzonJsonb.JohnzonJsonb(Mapper,boolean)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_500()": "better to use double instead of integer when guessing the type\n", "org.apache.fleece.jaxrs.DelegateProvider.DelegateProvider(MessageBodyReader,MessageBodyWriter)": "initial import\n", "org.apache.johnzon.jsonb.JsonbReadTest.propertyMappingNewLineCr()": "JOHNZON-157 add more tests and remove obsolete code\n", "org.apache.johnzon.mapper.BaseMap.getValue()": "JOHNZON-56 generic test for mapper\n", "org.superbiz.MyMappings.MyMappings()": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.missing()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.MapperTest.enumCollection()": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.core.SimplifiedTypeVariable.SimplifiedTypeVariable(String)": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.addNull()": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.mapper.reflection.Mappings.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.withSerializationPredicate(Predicate)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.mapper.Mapper.toValue(JsonValue,Adapter,Adapter,Type)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.mapper.MapperTest.setPrimitives(int)": "initial import\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setMaxSize(int)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObject(Object,boolean)": "JOHNZON-71 swap mapper parts out to MappingGenerator\n", "org.apache.johnzon.mapper.LiteralTest.getByteNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testAddArray()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.testBinaryDownload()": "Update JsonbJaxRsTest.java\n\nfix padding", "org.apache.fleece.core.JsonPrettyGeneratorImpl.addCommaIfNeeded()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.ArrayContainer.getBdouble()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.DogOwner.setName(String)": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,JsonValue)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.core.JsonProviderDelegate.createArrayBuilder(Collection)": "JOHNZON-96 add test + logic for ArrayBuilder ft of JSONP-1.1\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.ProvidedInstance.close()": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.replace(String,JsonValue)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.ClassDecoratedType.getAnnotation(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.Strings.asEscapedChar(char)": "adding checkstyle\n", "org.apache.johnzon.core.JsonProviderImpl.createObjectBuilder(JsonObject)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.websocket.endpoint.JsrServerEndpointImpl.on(Session,JsonObject)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.TestClass.TestClass()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.setId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.doCreate(JsonValue,Supplier)": "completing previous commit, some missed case\n", "org.apache.johnzon.core.JsonProviderImpl.createJsonPointer(String)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonArrayImpl.next()": "JOHNZON-226 iterator for JsonArrayImpl\n", "org.apache.johnzon.jsonb.HiddingPublicFieldTest.getValue()": "JOHNZON-250 private accessors hide public fields\n", "org.apache.johnzon.mapper.CycleRace.hashCode()": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.jsonb.JohnzonJsonbTest.jsonArray()": "JOHNZON-222 enable to map JsonArray in jsonb impl\n", "org.apache.johnzon.core.JsonParserTest.fail66()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Versioned.setVersion(Integer)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findAnyGetter(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setLocalDate(LocalDate)": "complete support for DateFormat", "org.apache.johnzon.jsonb.extension.JsonValueReader.read(char,int,int)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.reflect.GenericArrayTypeImpl.GenericArrayTypeImpl(Type)": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBdouble(double)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.ArrayIterator.remove()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setNestedClass(NestedClass)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,Charset,BufferStrategy,ConcurrentMap)": "fix pretty printing\n", "org.apache.johnzon.core.JsonParserTest.fail14()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonNumberImpl.equals(Object)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonDoubleImpl.hashCode()": "initial import\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.array()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchTest.testTestingArrayElementIndexOutOfBounds()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.MethodDecoratedType(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.SimpleBinaryDto.getBlob()": "JOHNZON-164 add a unit test for JsonB throwing JsonbException on wrong data\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonAccessors()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.Mapper.readCollection(InputStream,ParameterizedType,Class)": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.fleece.mapper.MapperTest.getS()": "initial import\n", "org.apache.fleece.mapper.MapperEnhancedTests.getQueue()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonListenerFactory.subObject()": "initial import\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(Writer,BufferStrategy,ConcurrentMap)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParserImpl.parseUnicodeHexChars()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.getName()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.core.JsonPointerImpl.remove(JsonStructure)": "JOHNZON-274 ensure JsonPatch respects requested path for arrays and objects\n", "org.apache.johnzon.jsonb.PolyBarAdapter.adaptFromJson(Bar)": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.fleece.core.JsonReaderImplTest.specialWithIoReader()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean,Boolean,Map,boolean,boolean,boolean)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonDoubleImpl.bigIntegerValueExact()": "renamed fleece to johnzon\n", "org.superbiz.MyMappings.classes()": "restoring previous ability to extend our mapping to add generation features to it\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBbyte()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.TypeInstance.setValue(Bar)": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.fleece.core.JsonParserTest.fail4()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.CircularExceptionTest.dontStackOverFlow()": "JOHNZON-49 avoid cycling by default for throwable\n", "org.apache.johnzon.core.JsonGeneratorImpl.prepareValue()": "fix pretty printing\n", "org.apache.fleece.core.JsonParserFactoryImpl.getDefaultJsonParserImpl(InputStream)": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonProviderDelegate.createPointer(String)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.core.JsonStreamParserImpl.handleQuote()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.close()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.CompositeDecoratedType(DecoratedType,DecoratedType)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonDoubleImpl.bigDecimalValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializerTest.equals(Object)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.isReadable(Class,Type,Annotation,MediaType)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setDoCloseOnStreams(boolean)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.MapperTest.setValue(int)": "JOHNZON-22 supporting private constructors in Mapper\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.addNull(int)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWshort(Short)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.Wrapper(String,T)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.fleece.core.JsonParserTest.fail31()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.ObjectSerializationTest.toJson(Wrapper)": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_999999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.MapperConfig.isUseBigDecimalForFloats()": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.jsonb.PropertyNamingStrategyFactory.create()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.MappingParserImpl.MappingParserImpl(JsonParser)": "JOHNZON-71 improve Converter and MappingParser\n\npairprogramming together with rsandtner\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.toJson(Wrapper)": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.jsonb.ReaderConverters.isGlobal()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.JsonProviderTest.testJsonCreateValueLong()": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.getInteger()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.fleece.core.JsonInMemoryParser.generateObjectEvents(List,JsonObject)": "initial import\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.isWritingPrimitive()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.MapperTest.getPrimitives()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.findAdapter(Type)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.mapper.ByteShort.getNumShortA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.fleece.mapper.MapperVersionTest.getName()": "initial import\n", "org.apache.johnzon.mapper.MapperBuilder.setAccessModeFieldFilteringStrategy(BaseAccessMode)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.mapper.MapperTest.setIntVal(int)": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(SimpleTimeZone)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonGeneratorFacade.write(long)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.converter.EnumConverter.toString(T)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.arrayInArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.util.ArrayUtil.asList(short)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.setName(String)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxItemsValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.findConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getStringArray()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonParserFactoryImpl.createParser(InputStream)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeJsonValue(JsonValue)": "JOHNZON-265 improve handling of JsonLongNumbers\n", "org.apache.johnzon.mapper.CircularExceptionTest.Person(String)": "JOHNZON-135 support recursive structures\n\nthis is the write part for now.\nWe still need to support de-serialisation\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.noCheckWriteAndForceComma(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonProviderImpl.createObjectBuilder(Map)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.mapper.Bike.equals(Object)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonPatchImpl.JsonPatchImpl(JsonProvider,PatchValue[])": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonParserTest.fail55()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.reflection.Generics.resolveParameterizedType(Type,Type,Map)": "JOHNZON-303 a class with some generic should be able to map a container (list/map) using this generic\n", "org.apache.johnzon.jsonb.PartialModel.setSecond(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.GenericsTest.getInstance()": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderMoveMissingFrom()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.npe()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonArrayImpl.clear()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonParserTest.fail49()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(Reader,Class)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.getRawType()": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.jsonb.HiddingPublicFieldTest.hidden()": "JOHNZON-250 private accessors hide public fields\n", "org.apache.fleece.mapper.converter.LongConverter.toString(Long)": "initial import\n", "org.apache.johnzon.core.JsonArrayImpl.isNull(int)": "JOHNZON-226 avoid JsonValue.equals as it is slow\n\nWe rather use JsonValue.ValueType comparison instead.\n", "org.apache.johnzon.mapper.JPATest.compare(String,String)": "skipping timezone in jpa test\n", "org.apache.johnzon.jsonb.AccessorsClass.getPrivateFieldWithPrivateAccessors()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonProviderDelegate.createObjectBuilder(JsonObject)": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(Date)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.NullTest.setNullArray(String)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.cachePointers()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.ConstructorUsage.fromString(String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.core.JsonGeneratorImplTest.getBufferSize(JsonGenerator)": "JOHNZON-190 ensure jsongenerator#close can be called N, N > 1 times\n", "org.apache.johnzon.mapper.Mapper.writeValue(JsonGenerator,Class,boolean,boolean,boolean,boolean,Adapter,String,Object)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_500(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.Mapper.writeObject(Object,Writer)": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.apache.johnzon.jsonb.ArrayContainer.setbString(String)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.IJsonTest.onlyObjectAndArrayCanBeRoot()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.websocket.jsr.JsrObjectEncoder.doWrite(JsonWriter,JsonObject)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.fleece.mapper.MapperEnhancedTests.buildTestClassInstance()": "using toString to write unknown types by default\n", "org.apache.johnzon.core.JsonStreamParserImpl.getCharArrayProvider()": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setInstant(Instant)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.testDeserializeObjectWithCollectionAndObjectConverter()": "JOHNZON-77 added test for collections\n", "org.apache.fleece.jaxrs.JsrMessageBodyReader.JsrMessageBodyReader(JsonReaderFactory,boolean)": "initial import\n", "org.apache.johnzon.mapper.reflection.CompositeWriter.write(Object,Object)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.reflection.Mappings.findOrCreateClassMapping(Type)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonDoubleImpl.hashCode()": "JOHNZON-123 align JsonNumber hash calculation with the spec\n\nTxs to Svetlin Zarev for the report!\n", "org.apache.johnzon.jsonb.JsonbTypesTest.newJsonb(String)": "complete support for DateFormat", "org.apache.johnzon.mapper.MapperTest.ignoreAllStrategy()": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.mapper.Bool2.getMap()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setTreatByteArrayAsBase64(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.reflection.Mappings.addGetterIfNeeded(Map,String,AccessMode)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.jsonb.converter.JsonbZonedDateTimeConverter.JsonbZonedDateTimeConverter(JsonbDateFormat)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.serializer.CustomDeserializer.deserialize(JsonParser,DeserializationContext,Type)": "Fixed [JOHNZON-277]\n\nCustom deserializer fails with inner empty JSON block {} / [] at START_OBJECT /\nSTART_ARRAY.\n\nSigned-off-by: Markus KARG <markus@headcrashing.eu>\n", "org.apache.johnzon.core.JsonPatchTest.testAddArrayElementAppend()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.core.JsonParserTest.fail43()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.writeTo(T,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.mapper.MapperEnhancedTests.getDates()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.ReaderConverters.fromJson(JsonValue,Type,MappingParser)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.MappingParserImpl.buildArrayWithComponentType(JsonArray,Class,Adapter,JsonPointerTracker,Type)": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.core.JsonInMemoryParser.getInt()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderMoveMissingPath()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonDoubleImpl.equals(Object)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParser.getBigDecimal()": "initial import\n", "org.test.apache.johnzon.mojo.PrimaryMetric.setRawData(List)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.reflection.CompositeReader.getAnnotation(Class)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,Charset,int,BufferStrategy,BufferStrategy,boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWint(Integer)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.Strings.asEscapedChar(char)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.toJsonBoolean(boolean)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.NullTest.getList()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.core.JsonPatchTest.testAddToRootContainingEmptyJsonObject()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.asParam()": "JOHNZON-133 ensure we test correctly jaxrs types and not just assume the signature is right\n", "org.apache.fleece.core.JsonStreamParserImpl.hasNext()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonProviderDelegate.createParser(Reader)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxItemsValidation.Impl(String,Function,int)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMaximumValidation.isValid(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.mapper.reflection.Mappings.CollectionMapping(boolean,Class,Type)": "initial import\n", "org.apache.fleece.core.JsonGeneratorImpl.writeLong0(long)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.CalendarHolder.getInstance()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.Versioned(T,Integer)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.MapperTest.setBool(boolean)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImpl.JsonReaderImpl(EscapedStringAwareJsonParser,JsonReaderListenerFactory)": "initial import\n", "org.apache.johnzon.jsonb.ArrayContainer.getbWshort()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonschema.spi.builtin.UniqueItemsValidation.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.OrderTest.getYetAnotherIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.LiteralTest.writeReadNumbersInf()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setFailOnUnknownProperties(boolean)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.johnzon.jsonb.jaxrs.Johnzon.getName()": "simple jsonb jaxrs provider\n", "org.apache.fleece.core.StringBuilderQueueProvider.newInstance(int)": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonStreamParserImpl.isNotTooLong()": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.Model.Model(int)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonParserTest.fail63()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.BaseMap.setValue(Map)": "JOHNZON-56 basic one level support of generics\n", "org.apache.fleece.mapper.Mapper.writeMapBody(Map,JsonGenerator)": "caching a bit more reflection for objects, this can be reworked to be more adapted BTW\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.booleanEvaluation()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonParserTest.invalidArrayMissingSeparator()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getParameterItemConverter()": "JOHNZON-235 ensure @JsonbCreator is validated even when the factory is not static\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.addNull(String)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonb.Types.setDate(Date)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonWriterImplTest.writer()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.mapper.access.FieldAccessMode.FieldReader(Field)": "JOHNZON-23 field access support\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,AccessMode,boolean,boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.fleece.core.JsonParserTest.maxStringWhitespace()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.VATNumber.equals(Object)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getFirst()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.Cyclist.setName(String)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.mapper.Mapper.writeMapBody(Map,JsonGenerator)": "JOHNZON-20 basic Map<String, Object> support\n", "org.apache.johnzon.core.JsonProviderDelegate.createValue(double)": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.fleece.mapper.Mapper.writeIterable(Iterable,OutputStream)": "initial import\n", "org.apache.johnzon.mapper.MapperTest.privateConstructor()": "JOHNZON-23 field access support\n", "javax.json.bind.JsonbConfig.withLocale(Locale)": "date format in jsonbconfig\n", "org.apache.johnzon.core.StringBuilderSingletonProvider.release(StringBuilder)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.StringBuilderSingletonProvider.newInstance(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.Base.getValue()": "JOHNZON-56 generic test for mapper\n", "org.apache.johnzon.jsonb.SerializerTest.getStudent()": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setAccessMode(AccessMode)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonObjectImpl.clear()": "basic validations: JsonObject should be immutable, JsonObjectBuilder#remove does not validate NPE for its input\n", "org.apache.johnzon.jsonb.DefaultMappingTest.arrays()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.TestClass.setBd(BigDecimal)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonInMemoryParser.generateArrayEvents(List,JsonArray)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTests.writeNull()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.greaterThan()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonPointerImpl.containsValue(JsonStructure)": "JOHNZON-96 upgrade to last version of the JSON-P-1.1 spec\n\nWIP.\nMake it compile again.\nTests still broken.\nSome methods still missing.\n", "org.apache.johnzon.mapper.ByteShort.setShortW(Short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.MapperTest.setIntegerVal(Integer)": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.test.apache.johnzon.mojo.SomeValue.getForks()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean)": "JOHNZON-20 basic Map<String, Object> support\n", "org.apache.johnzon.websocket.jsr.JsrStructureEncoder.doWrite(JsonWriter,JsonStructure)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonschema.spi.builtin.TypeValidation.apply(JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MapperTest.fieldAccess()": "JOHNZON-23 field access support\n", "org.apache.johnzon.mapper.Person.setMarriedTo(Person)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,AccessMode,boolean,boolean,boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.fleece.jaxrs.FleeceProviderTest.fleeces1()": "initial import\n", "org.apache.johnzon.mapper.ByteShort.setNumShortA(short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.fleece.mapper.MapperTest.toString(String)": "initial import\n", "org.apache.fleece.core.JsonObjectImpl.equals(Object)": "initial import\n", "org.apache.johnzon.jsonb.SimpleContainerDeserializer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_900(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonAnonymousClass()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.TestWithTypeConverter.fromJson(JsonValue,Type,MappingParser)": "Fix after review\n", "org.apache.johnzon.core.JsonInMemoryParser.Entry(Event,JsonValue)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.findConverter(Type)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonGeneratorImplTest.arrayInArray()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImpl.getObject()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.spi.builtin.EnumValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWshort(Short)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.MapperTest.mapToJsonArrayOfJsonObjects()": "JOHNZON-206: Tests for nested toStructure mapping\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.AdapterTest.notYetPloymorphism()": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.johnzon.core.Types.findParameterizedType(Class,Class)": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.core.JsonPointerUtilTest.testDecodeWholeTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jsonb.ArrayContainer.getbWdouble()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonInheritance()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getUri()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.JohnzonJsonbTest.listJsonValue()": "[JOHNZON-318] ensure List<Object> and List<JsonValue> works even when not integers\n", "org.apache.johnzon.mapper.MapperTest.converters()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStringImpl.equals(Object)": "renamed fleece to johnzon\n", "org.apache.johnzon.websocket.endpoint.Message.setValue(String)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setPolymorphicDiscriminatorMapper(Map)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.mapper.converter.ReversedAdapter.to(B)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.JsonObjectImpl.getJsonString(String)": "initial import\n", "org.apache.johnzon.mapper.MapperConfig.getNoParserAdapterTypes()": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(InputStream,Type)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.fleece.mapper.converter.IntegerConverter.fromString(String)": "initial import\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.multiply()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.MapperGenericsTest.base()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.JsonGeneratorImpl.close()": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,AccessMode,boolean,boolean,boolean,Charset)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonParserTest.fail33()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Record.hashCode()": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.core.JsonProviderImpl.createParser(InputStream)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.core.JsonWriterFactoryImpl.createWriter(OutputStream,Charset)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.mapToJsonList()": "JOHNZON-205: add support for arrays in toStructure\n", "org.apache.johnzon.core.JsonPointerImpl.JsonPointerImpl(String)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.MapperBuilder.setMaxSize(int)": "JOHNZON-30 basic johnzon jsonp component config in our mapper/jaxrs provider\n", "org.apache.johnzon.jsonb.JsonbTransientTest.roundtrip()": "JOHNZON-239 transient support\n", "org.apache.johnzon.core.JsonPatchTest.testReplacingArrayElement()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonNumberImpl.numberValue()": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonStreamParserImpl.internalNext()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.core.JsonPointer.hashCode()": "Implemented JsonPointer\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setAccessMode(AccessMode)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.fleece.core.JsonObjectBuilderImpl.build()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,int)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.core.JsonReaderImplTest.unicode3Bytes()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.IndirectAdapterTest.to(String)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.mapper.TestClass.setBd(BigDecimal)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.testShouldMapACollection()": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyWriter.isWriteable(Class,Type,Annotation,MediaType)": "JOHNZON-57 ensuring to use signature type to test using reference checks in our providers\n", "org.apache.johnzon.mapper.MappingParserImpl.MappingParserImpl(MapperConfig,Mappings,JsonReader,Type)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.jsonb.SerializerTest.serialize(UUID,JsonGenerator,SerializationContext)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.divideImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonPatchImpl.PatchValue(JsonPatchOperation,String,String,JsonValue)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeNull()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.parseObject(String,JsonParser,JsonObjectBuilder)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.util.ArrayUtil.size()": "JOHNZON-226 use own Array.length\n", "org.apache.johnzon.mapper.Mapper.writeArray(T,Writer)": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.core.JsonObjectImplTest.testIsNullShouldReturnFalse()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.mapper.MapperTest.nan()": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.build()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBint()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.Types.setUri(URI)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.converter.JsonbConverterToString.fromString(String)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.fleece.mapper.MapperTest.setInteger(int)": "initial import\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setCharArr(char)": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.SomeValue.set_99999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.reflection.Mappings.newOrderedMap()": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.fleece.core.JsonNumberImpl.JsonNumberImpl(BigDecimal)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.access.MethodReader.MethodReader(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.findConverter()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.superbiz.ExtendMappingTest.compare(String,String)": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.mapper.access.Meta.getAnnotation(Method,Class)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getInstant()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonParserTest.testGetValueOfFalseType()": "Fix JsonParser.getValue()\n", "org.apache.johnzon.mapper.MappingParserImpl.getJsonReader()": "JOHNZON-71 copied logic from mapper to MappingParser\n", "org.apache.johnzon.mapper.ObjectConverterTest.compare(String,String)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.reflection.Mappings.toString()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.mapper.converter.FloatConverter.fromString(String)": "initial import\n", "org.apache.fleece.core.JsonProviderImpl.createGeneratorFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.InObjectOrPrimitiveJsonGenerator(JsonGenerator,Runnable,String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addBINpeIfNull()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.jsonb.MyVisibility.isVisible(Method)": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.core.JsonPointer.remove(JsonObject)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.Types.hashCode()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setCalendar(Calendar)": "complete support for DateFormat", "org.apache.johnzon.core.JsonPointerImpl.equals(Object)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonGeneratorImpl.noCheckWriteAndForceComma(String)": "fix pretty printing\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,double)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.maxStringWhitespace()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setSose(SortedSet)": "renamed fleece to johnzon\n", "org.apache.fleece.core.LocationTest.simpleLocation()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.access.CompositeReader.read(Object)": "JOHNZON-102 cleaning CompositeDecoratedType usage to avoid coding errors\n", "org.apache.johnzon.websocket.internal.jsr.FactoryLocator.newReadFactory()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.internal.Streams.read(byte,int,int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.jsonb.JohnsonJsonb.JohnsonJsonb(Mapper)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.mapper.LiteralTest.setBool(boolean)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.ReverseConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.SomaClass.setSoma(SortedMap)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapBuilderReader.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonNumberImpl.toString()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.SimpleStack.push(T)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.fleece.mapper.Bool.setBool(boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.Types.getDuration()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.generateFieldsAndMethods(Writer,JsonObject,String,Collection)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderWithinitialData()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.converter.StringerTest.to(String)": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.jsonb.LongWrapper.LongWrapper(Long)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.CommentsJsonStreamParserImpl.CommentsJsonStreamParserImpl(Reader,int,BufferStrategy,BufferStrategy,boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.fleece.core.JsonGeneratorFacade.write(boolean)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.jsonschema.regex.JavascriptRegex.JavascriptRegex(String)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.jsonb.AdapterTest.adaptToJson(TypeInstance)": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.johnzon.core.JsonPointer.add(JsonValue,int,int,JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.setId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.SomaClass.getSoma()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(BigDecimal)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.DeduplicatedPerson.DeduplicatedPerson(String)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.mapper.Mapper.readJsonArray(JsonParser)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.mapper.CycleRace.getCyclists()": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.core.JsonStreamParserImpl.parseUnicodeHexChars()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.fromStringWithFormatter(String)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.fleece.core.JsonLongImpl.bigIntegerValueExact()": "initial import\n", "org.apache.johnzon.mapper.NullContainer.getList()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.mapper.Mapper.buildArray(Type,JsonArray)": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.jsonb.NestedClass.getNestedName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.access.BaseAccessMode.getObjectConverter()": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.johnzon.mapper.reflection.MapUnwrapperWriter.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.Mapper.close()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.fleece.mapper.MapperTest.setName(String)": "initial import\n", "org.apache.johnzon.mapper.MapperTest.setList(List)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperGenericsTest.modes()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.AdapterTest.adaptToJson(Bar)": "fix JsonbAdapter gerneric types\n\nIt's now 1:1 with the spec.\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getInt()": "completing previous commit, some missed case\n", "org.apache.fleece.mapper.MapperEnhancedTest.writeReadSortedMap()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonArrayImpl.getString(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonLongImpl.JsonLongImpl(long)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.NumberClass.getBi()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonParserTest.read()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.NullContainer.setList(List)": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.test.apache.johnzon.mojo.SomeValue.setScore(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderReplaceJsonObject()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setAutoAdjustStringBuffers(boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.core.JsonPointerImpl.remove(JsonValue,int,int)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseNumberValidationImpl.apply(JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonschema.spi.builtin.MaximumValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.getValue()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,double)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonPatchTest.testMovingObjectMember()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.fleece.core.JsonInMemoryParser.getBigDecimal()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MapperTest.assertOneDimension(Map,int)": "JOHNZON-25 'recursive' support of Map<String, Object>\n", "org.apache.johnzon.core.JsonObjectImpl.JsonObjectImpl(Map,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeNull(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.numberBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.fleece.mapper.reflection.ClassMapping.ClassMapping(Class,Map,Map)": "initial import\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setVersion(int)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.jsonb.JohnsonJsonb.read(char,int,int)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setInterfaceImplementationMapping(Map)": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.fleece.core.JsonParserTest.fail15()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.setProviders(JsonbJaxrsProvider)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonb.StringArraySerializer.serialize(StringHolder,JsonGenerator,SerializationContext)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.jaxrs.FleeceProviderTest.setName(String)": "initial import\n", "org.apache.fleece.mapper.TheObject.getCollectionWrapper()": "initial import\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setGeneratorFactory(JsonGeneratorFactory)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.jaxrs.FleeceProviderTest.fleeces2()": "initial import\n", "org.apache.johnzon.mapper.MapperTest.testByteArray()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.mapper.MapperTest.writeArray()": "clean up testcase, remove unnecessary code\n", "org.apache.johnzon.mapper.User.getId()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.core.ObjectIterator.next()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.fleece.core.JsonParserTest.zeroByteInput()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.websocket.internal.jsr.JsrEncoder.encode(T,Writer)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getObjectConverter()": "JOHNZON-235 ensure @JsonbCreator is validated even when the factory is not static\n", "org.apache.johnzon.core.SerializablePrimitives.hashCode()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonb.SerializerTest.getInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.exclusiveMaximum()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.toStringWithFormatter(Date)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.validTest()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidation.ItemsValidation(JsonSchemaValidatorFactory)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setPrimitiveConverters(boolean)": "JOHNZON-84 getting rid of default converters for primitives\n", "org.apache.johnzon.core.Strings.appendEscaped(String,StringBuilder)": "Make it less impacting to performance\n", "org.apache.fleece.core.JsonParserFactoryImpl.createInternalParser(InputStream,Charset)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.CompositePOJO.setStringList(List)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonReaderImplTest.unicode()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.missingSomeImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.TestWithTypeConverter.writeJson(Dog,JsonbGenerator)": "JOHNZON-71 improve JsonbGenerator Converter test\n", "org.apache.johnzon.mapper.Setter.Setter(AccessMode,boolean,boolean,Type,MapperConverter,ObjectConverter,int)": "JOHNZON-85 @JohnzonAny\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.escapedStringArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.converter.StringConverter.toString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.util.ArrayUtil.asList(float)": "JOHNZON-226 use own Array.length\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeIterator(Adapter,String,ObjectConverter,Collection,JsonPointerTracker,JsonGenerator,Iterator,Object)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.MetaMapperTest.customMappingAPI()": "JOHNZON-87 meta annotation support\n", "org.apache.fleece.core.JsonParserTest.fail32()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.ObjectTypeTest.setValue(Dog)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.asParam(Collection)": "JOHNZON-67 ensure list can be serialized in jaxrs mapper even if we lost the generics\n", "org.apache.fleece.core.JsonInMemoryParser.next()": "initial import\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.setVersion(Integer)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.CircularObjectsTest.setFather(Person)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.Versioned.getId()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.getId()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.MapperEnhancedTests.getString()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.converter.BigIntegerConverter.fromString(String)": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_9999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.DefaultMappingTest.exceptions()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.createJsonb()": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.mapper.Cyclist.getName()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonb.ArrayContainer.getBfloat()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.skipArray()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.core.JsonPatchDiffTest.testRemoveDiffNestedObject()": "JOHNZON-103 implemented JsonPatchDiff for JsonArray\n\nstill more tests needed\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setEncoding(String)": "JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own)\nJsonbConfig injectable via Jax-RS API\nBetter support for generics types\nSupport for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes\nSupport for default deserialization from string to enum\nFix to dateformatting (date format was not properly used in deserialization)", "org.apache.johnzon.jsonb.SerializerTest.serialize(Named,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderWithJsonArrayInitialData()": "JOHNZON-96 add test for JsonPatchBuilder with initialData\n", "org.apache.johnzon.mapper.MapperConfig.setSupportsComments(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.converter.URIConverter.fromString(String)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonParserTest.testBinaryNullStream()": "JOHNZON-17 Thiago Veronezi: RFC4627AwareInputStreamReader - Make sure that we read all the bytes before throwing an exception\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean,Boolean)": "JOHNZON-143 make isDeduplicateObjects config a ternary flag.\n\nThe rule is now:\n* _explicit_ decuplicateObjects set via config? -> use this\n* otherwise -> check @JohnzonDeduplicateObjects annotation\n* otherwise -> false\n", "org.apache.johnzon.mapper.MapperTest.getNumByteA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonParserTest.fail28()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.registerDefaultOperators()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.StringBuilderByInstanceProvider.StringBuilderByInstanceProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.core.TypesTest.hashCode()": "Clarified Types.findParameterizedType()\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(OutputStream,Charset,BufferStrategy,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.NullTest.setEmptyArray(String)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue2()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.setNestedName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperTest.setLongnumber(long)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.StringBuilderQueueProvider.release(StringBuilder)": "remove unused StringBuilder BufferProvider\n", "org.apache.johnzon.jsonb.JohnzonBuilder.withProvider(JsonProvider)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonGeneratorImpl.write(BigDecimal)": "initial import\n", "org.apache.johnzon.mapper.MapperTest.setPrimitives(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.EnumTest.testUnknownEnumValue()": "JOHNZON-185 illegal enum value should lead to blowing up\n", "org.apache.johnzon.mapper.converter.StringerTest.testDeserialize()": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.core.JsonPointer.replace(JsonObject,JsonValue)": "Implemented JsonPointer\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeItem(Object,Collection)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.mapper.MappingParserImpl.findAdapter(Type)": "JOHNZON-71 copied logic from mapper to MappingParser\n", "org.apache.johnzon.core.ThreadLocalProvider.newValue(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getStringList()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperBuilder.setVersion(int)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_900(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.inImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,int,BufferStrategy,BufferStrategy)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.mapper.access.FieldAccessMode.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.core.JsonStringImpl.JsonStringImpl(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.CustomEnumCodecTest.roundTrip()": "JOHNZON-112 custom enum serialization support for arrays\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail3()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(String,Function,String)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonCharBufferStreamParser.JsonCharBufferStreamParser(Reader,int,BufferStrategy,BufferStrategy)": "forgotten files in last commit\n", "org.apache.fleece.jaxrs.FleeceProviderTest.list()": "initial import\n", "org.apache.johnzon.core.JsonReaderImplTest.parseTiny50BJsonFile()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializerTest.fromConfig()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.test.apache.johnzon.mojo.SomeValue.getScoreUnit()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.OrderTest.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.converter.LongConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MyMapOfObjects.addMyObject(String,MyObject)": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findWriters(Class)": "JOHNZON-49 avoid cycling by default for throwable\n", "org.test.apache.johnzon.mojo.PrimaryMetric.setScore(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.converter.IntegerConverter.toString(Integer)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonInMemoryParser.internalNext()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.setName(String)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.Mapper.writeObjectWithGenerator(Object,JsonGenerator)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.CycleRace.setMonument(boolean)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxPropertiesValidation.onObject(JsonObject)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPointerTest.testAddArrayElementWithIndexNoNumber()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jaxrs.NoContentExceptionHandlerReader.getDelegate()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.mapper.ObjectConverterTest.getLastName()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.mapper.converter.ByteConverter.toString(Byte)": "initial import\n", "org.apache.fleece.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,int,BufferStrategy,BufferStrategy)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonReaderImpl.close()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddJsonArray()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.AdderTest.adderString()": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.jsonb.converter.JsonbZonedDateTimeConverter.fromString(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.Types.getOptionalString()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MappingParserImpl.buildArrayWithComponentType(JsonArray,Class,Adapter,JsonPointerTracker)": "JOHNZON-135 also support deduplication in arrays\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map,JohnzonAdapterFactory,Supplier,AccessMode,boolean)": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.fleece.core.JsonStreamParser.newValue(int)": "initial import\n", "org.test.apache.johnzon.mojo.SomeValue.set_900(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBfloat(float)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.ArrayContainer.getBbyte()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.setAge(int)": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.fleece.core.JsonBaseStreamParser.handleStartObject(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.MapperTest.setByteW(Byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.AdapterTest.setValue(Bar)": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceObjectMemberWithNonexistentTarget2()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(Writer,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.BrokenDefaultTest.newDynamicInput(int)": "adding a broken test to show why previous commit broke the buffer strategies\n", "org.apache.johnzon.jsonb.JsonbAccessMode.ParsingCacheEntry(DecoratedType,Types)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.fleece.mapper.MapperTest.getList()": "initial import\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeIndent(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.notImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderCopyMissingFrom()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.access.MethodGetterAsWriter.write(Object,Object)": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.johnzon.jsonb.Wrapper.toString()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.reflection.ClassMapping.ClassMapping(Class,Map,Map,boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.fleece.core.JsonParserTest.simple()": "initial import\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,double)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonParserTest.literalFailChecksNull()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.onString(JsonString)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonProviderImpl.createValue(BigInteger)": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.jsonb.factory.CdiInstance.CdiInstance(T,CreationalContext)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.NumberClass.getByteNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.StringBuilderByInstanceProvider.newBuffer()": "remove unused StringBuilder BufferProvider\n", "org.apache.johnzon.mapper.TheObject.setIntVal(int)": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.jsonb.AnnotationOrderTest.setPersonGender(String)": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.equals(Object)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonMergeBatchTest.testSimpleJsonObjectMergePatch()": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,JsonArrayBuilder)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonParserTest.maxStringNumberFail()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Bool2.setMap(Map)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbReadTest.propertyMappingNewLine()": "JOHNZON-157 more tests for the regression\n", "org.apache.johnzon.core.JsonMergePatchDiff.JsonMergePatchDiff(JsonValue,JsonValue,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.AdderTest.addMyObject(String,MyObject)": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.jsonb.factory.CdiJohnzonAdapterFactory.release()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.MappingParserImpl.buildObject(Type,JsonObject)": "JOHNZON-71 replaced IllegalArgumentException with MapperException\n", "org.apache.johnzon.core.HStackTest.normalUse()": "fix pretty printing\n", "org.apache.johnzon.jsonb.DateFormatTest.dateRoundTrip()": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.fleece.core.JsonNumberTest.testBigIntegerExact()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.MapperConfig.isEnforceQuoteString()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.JsonbWriteTest.simple()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jaxrs.JsrMessageBodyWriter.writeTo(JsonStructure,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.core.JsonMergePatchBuilder.createMergePatch(JsonValue,JsonValue)": "JOHNZON-95 first bits of MergeBatch handling\n", "org.apache.johnzon.core.util.ArrayUtil.asList(long)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonProviderDelegate.createWriter(OutputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,AccessMode,boolean,boolean,Charset,Collection)": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail1()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.StaticNestedClass.setNestedName(String)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.MapperEnhancedTest.getSose()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.MinPropertiesValidation.onObject(JsonObject)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonObjectListener.onTrue()": "initial import\n", "org.apache.johnzon.core.BufferStrategyFactoryTest.newStringBuilderProvider(int)": "JOHNZON-217 toUpper on a Class name seems a bad idea...\n", "org.apache.johnzon.mapper.GetterSetterRespectTest.setName(String)": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,JsonArrayBuilder)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.mapper.access.MapHelper.find(FindMethod,Class)": "JOHNZON-198 basic adder support\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.createGenerator(Writer)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerImpl.canMatch(List)": "JOHNZON-312 JsonPointer patch process shouldnt check subobjects/arrays not matching the pointer\n", "org.apache.fleece.core.JsonGeneratorImpl.checkDoubleRange(double)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.Request.getBody()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.jsonb.extras.polymorphism.DeSerializer.eatValueStart(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.maximum()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonParserTest.fail13()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonPatchTest.testMovingArrayElementPlainArray()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.fleece.core.JsonParserTest.numbers()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonProviderImpl.createParser(Reader)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.test(String,int)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonb.JsonbAccessMode.constructorFactory(Constructor,Consumer,Type,String,Adapter,Adapter,ObjectConverter)": "JOHNZON-235 ensure @JsonbCreator is validated even when the factory is not static\n", "org.apache.johnzon.mapper.LiteralTest.setBi(BigInteger)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail24()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.Types.findParamType(ParameterizedType,Class)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.CircularObjectsTest.getMother()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.MapperConfig.clone()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.NullContainer.setArray(Double)": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.mapper.TheObject.getLongnumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.VATNumber(long)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeStartArray(String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setOptionalDouble(OptionalDouble)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodDecoratedType(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.test.apache.johnzon.mojo.SomeValue.set_00(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.BarAdapter.adaptTo(String)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.isFitLong()": "JOHNZON-265 some protection to cast a Bignumber as a long\n", "org.apache.johnzon.jsonb.TestDTOConverter.fromJson(JsonValue,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.AdvancedGenericsTest.testSerializeHierarchyThree()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonReaderFactoryImpl.createReader(JsonParser)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.nullArray()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.core.BufferStrategyFactoryTest.newCharProvider(int)": "JOHNZON-217 toUpper on a Class name seems a bad idea...\n", "org.apache.fleece.mapper.MapperEnhancedTest.setQueue(Queue)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.Mapper.stream(OutputStream)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.jsonb.Aggregate.hashCode()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.websocket.mapper.JohnzonTextDecoder.JohnzonTextDecoder(Type)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyWriter.writeTo(T,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "JOHNZON-67 ensure list can be serialized in jaxrs mapper even if we lost the generics\n", "org.apache.fleece.core.JsonInMemoryParser.getLocation()": "initial import\n", "org.apache.johnzon.core.SerializablePrimitives.equals(Object)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.core.JsonParserTest.fail45()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.cdi.JohnzonCdiExtension.untrack(JohnsonJsonb)": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidation.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonParserTest.fail22()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ArrayContainer.setBfloat(float)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.factory.CdiInstance.getValue()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeNull()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.OrderTest.setAnyOther(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.Bool2.getMap()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.ArgumentTypeResolver.ArgumentTypeResolver(Class)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.JPATest.ensureStateIsIgnoredAndDateIsCorrect()": "making tests a bit more tolerant to timezone\n", "org.apache.johnzon.core.RFC4627AwareInputStreamReader.RFC4627AwareInputStreamReader(InputStream,Charset)": "JOHNZON-147 support BOM even if encoding is defined\n\nIf a BOM is set, then this defines the encoding.\nAny configured encoding is only used no BOM is found.\nBefore this patch we did blow up if UTF-8 encoding was configured and\nthe JSON stream did have a BOM.\n", "org.apache.johnzon.mapper.ObjectTypeTest.getFrom()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jsonb.jaxrs.Johnzon.Johnzon(String)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.delegate(Class)": "JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own)\nJsonbConfig injectable via Jax-RS API\nBetter support for generics types\nSupport for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes\nSupport for default deserialization from string to enum\nFix to dateformatting (date format was not properly used in deserialization)", "org.apache.johnzon.mapper.reflection.Mappings.MapBuilderReader(Map,String,int)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.fleece.core.JsonObjectImpl.getInt(String,int)": "initial import\n", "org.apache.johnzon.jsonb.SerializerTest.Cat(int,String,float,boolean,boolean)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.getData()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.core.JsonProviderDelegate.createReader(InputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.SerializableJsonValue.getValueType()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(long)": "initial import\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator)": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.mapper.MapperTest.setName(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Model.getValue()": "JOHNZON-250 private accessors hide public fields\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.boolJsonValueArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.binary()": "Update JsonbJaxRsTest.java\n\nfix padding", "org.apache.fleece.mapper.Bool2.setMap(Map)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.MoreTests.testIt()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.mapper.reflection.Getter.Getter(Method,boolean,Converter,int)": "initial import\n", "org.apache.fleece.core.JsonBaseStreamParser.createLocation()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonb.VATNumber.hashCode()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.Request.setBody(byte)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.fleece.core.SingletonProvider.newBuffer()": "supporting several buffer cache strategies\n", "org.apache.johnzon.core.JsonParserTest.simple()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Customer.Customer(Long,Integer,String,String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonPointer.add(JsonStructure,JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonschema.regex.JavascriptRegex.test(CharSequence)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWdouble(Double)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jaxrs.JohnzonProvider.JohnzonProvider(Mapper,Collection)": "JOHNZON-283 remove @Provider from redundant impls in jaxrs module\n", "org.apache.johnzon.mapper.access.MethodGetterAsWriter.MethodGetterAsWriter(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.cdi.CDIs.untrack(JohnzonJsonb)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.fleece.core.JsonInMemoryParser.isIntegralNumber()": "initial import\n", "org.apache.johnzon.core.JsonProviderImpl.createWriter(Writer)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.core.JsonObjectImpl.getValueType()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isTransient(DecoratedType)": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.mapper.MappingParserImpl.convertTo(Adapter,JsonValue,JsonPointerTracker,Type)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.mapper.ObjectConverterTest.testObjectConverter()": "JOHNZON-48 basic map support for nested converter\n", "org.apache.johnzon.mapper.reflection.Mappings.findConstructor(boolean,boolean)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.reflection.Generics.resolveTypeVariable(Type,Class)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.fleece.mapper.CharClass.getCharValue()": "FLEECE-14 char handling in mapper\n", "org.apache.fleece.mapper.MapperTest.writeArray()": "initial import\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.setLastName(String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.fleece.mapper.MapperEnhancedTest.needConvertersForComplexTypes()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.mapper.QueueClass.setQueue(Queue)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.JohnzonBuilder.parseZonedDateTime(String,DateTimeFormatter,ZoneId)": "complete support for DateFormat", "org.apache.johnzon.mapper.EnumTest.CollectionObject(MyEnum[])": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategy.visibilityStrategy(Class)": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeEol()": "fix pretty printing\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object,OutputStream)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(String,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonschema.spi.ValidationContext.getSchema()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonPatchTest.testPatchWithMoreOperations()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.core.JsonObjectImpl.JsonObjectImpl(Map)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWholeJsonArray()": "Implemented JsonPointer\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.client(String,MediaType)": "Test fix - JsonBindingProvider added to secondary server to not influence pre existing tests", "org.apache.johnzon.osgi.ExtendedJsonbJaxrsProvider.ExtendedJsonbJaxrsProvider(Config)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.build()": "JOHNZON-140 do not reset JsonObjectBuilder on build()\n", "javax.json.bind.JsonbConfig.withAdapters(JsonbAdapter[])": "ensure JsonbConfig accumulate varargs params instead of overriding them\n", "org.apache.johnzon.core.JsonReaderImplTest.unicode2Bytes()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_00()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.EnumAdapter.adaptFromJson(String)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.fleece.mapper.LiteralTest.setDoubleNumber(double)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.HiddenConstructor.setValue(int)": "JOHNZON-22 supporting private constructors in Mapper\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,long)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.getOwnerType()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.mapper.TheObject.setBool(boolean)": "initial import\n", "org.apache.fleece.mapper.MapperTest.setList(List)": "initial import\n", "org.apache.johnzon.jsonb.Types.getOptionalLong()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MapperGenericsTest.list()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object,Type,OutputStream)": "simple value handling\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.JsonPatchBuilderImpl(JsonArray)": "JOHNZON-96 upgrade to last version of the JSON-P-1.1 spec\n\nWIP.\nMake it compile again.\nTests still broken.\nSome methods still missing.\n", "org.apache.johnzon.core.Types.getActualTypeArguments()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.JsonbWriteTest.boolAsStreamInObject()": "JOHNZON-148 fixed checkstyle, added test with Boolean in Object\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getOptionalString()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWfloat(Float)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.Mapper.convertTo(Type,String)": "JOHNZON-20 basic Map<String, Object> support\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(Reader,Class)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.nullJsonValueArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.objectBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,BigDecimal)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserFactoryImpl.createParser(InputStream,Charset)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.NoWarningTest.warn()": "positive warning test added\n", "org.apache.johnzon.jsonb.TestDTOWithOC.setDto(TestDTO)": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.CompositeDecoratedType(DecoratedType,DecoratedType)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonReaderImpl.JsonReaderImpl(JsonParser,boolean)": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.johnzon.core.JsonParserTest.testUTF32BEStream()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonObjectListener.onFalse()": "initial import\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_9999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonMergePatchImpl.applyPatch(JsonValue,JsonValue)": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.fleece.core.RFC4627AwareInputStreamReader.RFC4627AwareInputStreamReader(InputStream)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonReaderImplTest.parseBigDecimalArray()": "JOHNZON-265 fix handling of numbers which exceed long\n", "org.apache.johnzon.mapper.Mappings.write(Object,Object)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.JsonbJaxrsProvider()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonArrays()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail6()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.ArrayContainer.equals(Object)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage1()": "Improved handling of trailing garbage\n", "org.apache.fleece.core.ThreadLocalBufferCache.initialValue()": "adding to BufferStrategy StringBuilder, we can still desire to wire Strings to its usage (ie get rid of it as a static class)\n", "org.apache.fleece.core.JsonReaderImpl.checkClosed()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.reflection.Setter.Setter(AccessMode,boolean,boolean,Type,Adapter,int)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonPatchTest.testRemoveArrayElementPlainArray()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonb.GenericsTest.genericModel()": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.fleece.core.JsonReaderFactoryImpl.JsonReaderFactoryImpl(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.toPointer(String)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.access.BaseAccessMode.BaseAccessMode()": "JOHNZON-49 avoid cycling by default for throwable\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object,Type,OutputStream)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.SerializerTest.getAge()": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.jsonb.model.packageformat.FormatOnClassModel.setInstance(Date)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.SomaClass.getSoma()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerImpl.getJsonPointer()": "JOHNZON-274 ensure JsonPatch respects requested path for arrays and objects\n", "org.apache.johnzon.mapper.converter.Model.setDate(Date)": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.johnzon.mapper.access.FieldAccessMode.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.MapperTest.writeEmptyObject()": "simple value handling\n", "org.apache.johnzon.mapper.NullObject.getStringIsnull()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.Service.toString(Model)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodAccessMode(boolean)": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.fleece.mapper.TheObject.setLongnumber(long)": "initial import\n", "org.apache.johnzon.mapper.Mapper.toValue(Object,JsonValue,Adapter,Adapter,Type)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.mapper.Getter.Getter(AccessMode,boolean,boolean,boolean,boolean,boolean,MapperConverter,ObjectConverter,int,String)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonschema.spi.builtin.MaximumValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MapperConfig.setTreatByteArrayAsBase64URL(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.CompositeWriter(Writer,DecoratedType)": "JOHNZON-102 cleaning CompositeDecoratedType usage to avoid coding errors\n", "org.apache.johnzon.core.JsonParserTest.fail37()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.MinItemsValidation.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.mapper.converter.CharacterConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.getFirstName()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,boolean)": "JOHNZON-22 supporting private constructors in Mapper\n", "org.apache.johnzon.core.JsonParserTest.fail27()": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceProviderTest.unbind()": "initial import\n", "org.apache.fleece.core.JsonObjectImpl.getJsonObject(String)": "initial import\n", "org.apache.fleece.core.JsonStreamParserImpl.copyCurrentValue()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.osgi.Activator.start(BundleContext)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.equals(Object)": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.mapper.MappingParserImpl.getAdapterKey(Adapter)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.fleece.core.JsonReaderImpl.parseObject(JsonReaderListener)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_99999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.getDeserializationPredicate()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.fleece.core.QueueProvider.newBuffer()": "forgotten files in last commit\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setStringList(List)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperVersionTest.version()": "JOHNZON-199 split unit test to get better feedback for each assert\n", "org.apache.johnzon.mapper.access.Meta.getClassOrPackageAnnotation(Method,Class)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(double)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mappings.addSetterIfNeeded(Map,String,AccessMode,boolean,Class)": "JOHNZON-261 JOHNZON-260 better optional handling\n", "javax.json.bind.JsonbConfig.accumulate(String,T,Class)": "ensure JsonbConfig accumulate varargs params instead of overriding them\n", "org.apache.johnzon.mapper.MapperTest.Pair(int,String)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail59()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.johnzons1()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.findConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.access.BaseAccessMode.BaseAccessMode(boolean,boolean)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.jsonschema.spi.ValidationContext.readValue(JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.AttributesOrderingWithCounterClass.getThird()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonParserTest.fail45()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(String)": "initial import\n", "org.apache.johnzon.jsonb.MoreTests.Option(boolean)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.mapper.Mapper.mapArray(Class,JsonReader)": "initial import\n", "org.apache.johnzon.core.AbstractJsonFactory.getInt(String,int)": "JOHNZON-33 Define appropriate buffer size and max text size (also simplified factories)\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeNull()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperTest.literalFail2()": "FLEECE-14 char handling in mapper\n", "org.apache.johnzon.mapper.ByteShort.getNumShort()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonPointerImpl.getValue(JsonValue,String,int,int)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.fleece.mapper.MapperTest.converters()": "initial import\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getValueStream()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.client()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_990(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.internal.Streams.flush()": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.Mapper.toStructure(Object)": "JOHNZON-205: add support for arrays in toStructure fixup\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getDate()": "complete support for DateFormat", "org.apache.johnzon.jsonb.OrderTest.setThird(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.Mapper.isInt(Class)": "JOHNZON-71 remove unused code\n\nThose parts got moved over to MappingGeneratorImpl\n", "org.apache.johnzon.mapper.ConstructorUsage.toString(String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.jsonb.JohnsonJsonb.unwrapPrimitiveOptional(Type)": "simple value handling\n", "org.apache.johnzon.jsonb.OrderTest.getFourth()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.Mapped.setName(String)": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.mapper.JsonObjectGenerator.getResult()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.NumberFormatTest.packageFormat()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.ArrayContainer.hashCode()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonschema.regex.JavaRegex.toString()": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.mapper.Aliases.setSuperLongProperty(String)": "JOHNZON-37 @JohnzonProperty\n", "org.apache.johnzon.mapper.Mapper.mapArray(Class,JsonReader)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.numJsonValueArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonWriterImplTest.stringValueWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.mapper.AnyMe.getName()": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.jsonb.IJsonTest.setData(byte)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.skipObject()": "completing previous commit, some missed case\n", "org.apache.johnzon.core.JsonParserTest.fail4()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail61()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.BarAdapter.adaptFrom(Bar)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveFieldMemberWithNestedArray()": "Moved tests from single testcase in to individual tests\n", "org.apache.johnzon.mapper.CircularObjectsTest.testSimpleCyclicPersonAnnotatedDedup()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveArrayElementWithIndexNoNumber()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.core.JsonReaderImplTest.emptyZeroCharBuffersize()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object,Type,OutputStream)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.JsonbReadTest.boolFromStream()": "JOHNZON-148 fixed Stream serializing for primitives\n", "org.apache.johnzon.jsonschema.spi.builtin.MinPropertiesValidation.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.internal.Streams.read(char,int,int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.Person.setName(String)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.YeahConverter.fromString(String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.fleece.core.JsonStreamParserImpl.tmc()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setUseBigDecimalForFloats(boolean)": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(double)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.test.apache.johnzon.mojo.SomeValue.get_1000()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.AnySupportTest.getValues()": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.mapper.converter.DateConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean,Boolean,Map)": "JOHNZON-226 register Adapters only once\n\nPrevious each MappingParserImpl has it's own set of ReverseAdapters.\nThey got rebuilt with every parsing (as this creates a new MappingParserImpl\neach time.\nI've now moved the ReverseAdapterMap to Config and populate it upfront.\n\nI'm not yet fully happy with the solution as the ReverseAdapterMap also\ncontains dynamically registered Adapters. So feel free to move the Map\nto a better place in the future.\n", "org.apache.johnzon.mapper.GoldCustomer.getRating()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.MapperException.MapperException(Throwable)": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceProviderTest.bindEndpoint()": "initial import\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(InputStream,Class)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.JsonObjectBuilderImpl(Map)": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.getObjectStream()": "JOHNZON-139 add preliminary stream support\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setValueWithoutField(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonObjectBuilderImpl.addNull(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonBaseStreamParser.ifConstructingStringValueAdd(char,boolean)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setSupportsComments(boolean)": "propagating supportsComments to mapper and provider\n", "org.apache.fleece.core.JsonGeneratorImpl.writeStartObject()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.DateTypes.setInstant(Instant)": "complete support for DateFormat", "org.apache.johnzon.mapper.Mapper.readTypedArray(Reader,Class,Class)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.core.JsonParserFactoryImpl.getBufferProvider()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonProviderDelegate.createJsonPointer(String)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.test.apache.johnzon.mojo.SomeValue.setWarmupTime(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setDuration(Duration)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.core.JsonStreamParserImpl.uexc(char,String)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.ByteShort.setByteWA(Byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceArrayElementWithIndexNoNumber()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addJVNpeIfNull()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getZoneId()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jaxrs.JohnzonResource.asParam(Collection)": "JOHNZON-67 ensure list can be serialized in jaxrs mapper even if we lost the generics\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.minLength()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonGeneratorFacade.JsonGeneratorFacade(JsonGenerator)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.fleece.mapper.LiteralTest.writeReadNumbers()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.JsonbReadTest.setBlob(byte)": "JOHNZON-164 add a unit test for JsonB throwing JsonbException on wrong data\n", "org.apache.fleece.core.JsonReaderImplTest.parseHuge1MbJsonFile()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonschema.ValidationResult.getErrors()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.BufferStrategyFactory.StringBuilderThreadLocalProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.core.util.ArrayUtil.asList(byte)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.testDeserializeHierarchyThree()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.adaptFromJson(String)": "JOHNZON-207 some enhancement on Xavier's patch\n", "javax.json.bind.JsonbConfig.withDateFormat(String,Locale)": "date format in jsonbconfig\n", "org.apache.johnzon.jsonb.JohnzonBuilder.findPT(Object,Class)": "Revert \"JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own) JsonbConfig injectable via Jax-RS API Better support for generics types Support for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes Support for default deserialization from string to enum Fix to dateformatting (date format was not properly used in deserialization)\"\n\nThis reverts commit 028a1644aac2e565fbed007ba85e8f0bede9061f.", "org.apache.fleece.jaxrs.DelegateProvider.isWriteable(Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getQueue()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.Mappings.createClassMapping(Class)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.jsonb.Book.setName(String)": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetBooleanWithDefaultMissingKeyShouldReturnDefault()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.jsonb.VATDeSer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.core.JsonGeneratorImpl.write(JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerTest.getJsonDocument()": "Implemented JsonPointer\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean,Boolean,Map,boolean)": "JOHNZON-254 ensure object are deserialized in bigdecimal\n", "org.apache.johnzon.mapper.access.MethodGetterAsWriter.MethodGetterAsWriter(Method)": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.johnzon.websocket.mapper.JohnzonTextEncoder.encode(Object,Writer)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.websocket.internal.jsr.FactoryLocator.contextDestroyed(ServletContextEvent)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.fleece.core.StringBuilderByInstanceProvider.newBuffer()": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonParserTest.fail11()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setSkipEmptyArray(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.NullObject.setIntegerIsnull(Integer)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.JsonNumberParserAdapter.getLong()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.internal.ConverterAdapter.ConverterAdapter(Converter)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.LocaleTest.roundTrip()": "JOHNZON-66 support of Locale\n", "org.apache.johnzon.mapper.Mapper.writeIterable(Iterable,OutputStream)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.JsonObjectBuilderImpl(Map,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.IJsonTest.getData()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonBuilderFactoryImpl.getConfigInUse()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonReaderImplTest.emptyArrayOneCharBufferSize()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.MoreTests.serialize(Color,JsonGenerator,SerializationContext)": "Fix after review\n", "org.apache.johnzon.core.CharBufferQueueProvider.newInstance(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getAnnotation(Class)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toBool(Object)": "JOHNZON-254 ensure object are deserialized in bigdecimal\n", "org.apache.johnzon.mapper.GenericsTest.genericClasses()": "JOHNZON-303 a class with some generic should be able to map a container (list/map) using this generic\n", "org.apache.johnzon.core.JsonPointerTest.testAddJsonObjectWithTargetNull()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonParserFactoryImpl.getConfigInUse()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.LiteralTest.setByteNumber(byte)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.Getter.toString()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonWriterImplTest.nullValueWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.jsonb.POJOWithoutDefaultArgConstructor.POJOWithoutDefaultArgConstructor(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.EnumTest.AdvancedEnumObject(AdvancedEnum,List)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String,int)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.fleece.mapper.MapperTest.writeEmptyObject()": "initial import\n", "org.apache.johnzon.websocket.endpoint.Message.getValue()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWfloat(Float)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.getKey()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWbyte(Byte)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.EnumTest.testEnumSet()": "JOHNZON-150 add support for EnumSets\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.isWritingPrimitive()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.MappingParserImpl.toObject(Object,JsonValue,Type,Adapter)": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.fleece.core.JsonParserTest.fail53()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.MyDataVisibility.get(String)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.mapper.reflection.Mappings.CollectionMapping(boolean,Class,Type)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getInner()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.Mapper.readCollection(InputStream,ParameterizedType,Class)": "initial import\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.isInJsRange(Number)": "JOHNZON-243 support of long as requested by jsonb (js range for serialization + BigDecimal on Number for deserialization)\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.Impl(String,Function,Predicate)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeEnd(char)": "fix pretty printing\n", "org.apache.johnzon.mapper.Mapper.mapCollection(Mappings,JsonArray,Converter)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "javax.json.bind.JsonbConfig.withPropertyNamingStrategy(PropertyNamingStrategy)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.Person.Person(String,String)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.Mapper.doConvertFrom(T,Converter)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.mapper.TestClass.setSose(SortedSet)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.EnumTest.testCollection(Mapper)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.JPATest.getId()": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.jsonschema.ValidationResult.setErrors(Collection)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_9999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonProviderDelegate.createMergePatch(JsonValue,JsonValue)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.johnzon.core.JsonPointer.validateArrayIndex(String)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.mapper.MapperEnhancedTest.writeNull()": "simple value handling\n", "org.apache.fleece.core.JsonStreamParser.next()": "initial import\n", "org.apache.fleece.mapper.TheObject.getMap()": "initial import\n", "org.apache.johnzon.mapper.MapperTest.getS()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findAnySetter(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.fleece.core.JsonLocationImpl.getColumnNumber()": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonPrimitives()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperTest.getShortW()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object,Appendable)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.core.JsonObjectImpl.isNull(String)": "JOHNZON-226 avoid JsonValue.equals as it is slow\n\nWe rather use JsonValue.ValueType comparison instead.\n", "org.apache.johnzon.jsonb.DateFormatTest.calendarCanBeParsed()": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.core.JsonPointerImpl.getValue(JsonStructure)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.MapperConfig.isUseBigDecimalForObjectNumbers()": "JOHNZON-254 ensure object are deserialized in bigdecimal\n", "org.apache.fleece.core.JsonArrayImpl.get(int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.GenericsTest.setInstance(T)": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.getSize(T,Class,Type,Annotation,MediaType)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.TheObject.getInteger()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.MappingGeneratorImpl(MapperConfig,JsonGenerator,Mappings,Boolean)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(OffsetTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonParserTest.invalidString()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.testNullCheckName()": "JOHNZON-96 add tests for null checks\n", "org.apache.fleece.core.JsonBaseStreamParser.close()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.fleece.mapper.converter.DateConverter.toString(Date)": "initial import\n", "org.apache.johnzon.mapper.access.MethodAccessMode.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.MapperTest.testDoubleArray()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddBoolean()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.MapperBuilder.setDeduplicateObjects(boolean)": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.apache.johnzon.mapper.Mappings.Setter(AccessMode,boolean,boolean,Type,MapperConverter,ObjectConverter,int)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.mapper.converter.BooleanConverter.toString(Boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.regex.JoniRegex.toString()": "provide a Joni integration for jsonschema when nashorn will be completely dropped - todo: check if we shade it with minimal=true\n", "org.apache.johnzon.core.util.ArrayUtil.getArrayLength(Object)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.apply(JsonStructure)": "JOHNZON-95 initial JsonPatchBuilder impl\n", "org.superbiz.ExtendMappingTest.classes()": "restoring previous ability to extend our mapping to add generation features to it\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String,boolean)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.internal.Streams.ready()": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "javax.json.bind.JsonbConfig.withPropertyVisibilityStrategy(PropertyVisibilityStrategy)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonGeneratorImplTest.prettySimpleStructure()": "fix pretty printing\n", "org.apache.johnzon.mapper.BaseList.getValue()": "JOHNZON-56 generic test for mapper\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeIndent()": "fix pretty printing\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.and()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonNumberImpl.isIntegral()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.AnyMe.setName(String)": "JOHNZON-85 @JohnzonAny\n", "org.apache.fleece.core.JsonWriterFactoryImpl.createWriter(OutputStream)": "initial import\n", "org.apache.fleece.core.JsonStreamParser.read()": "initial import\n", "org.apache.fleece.core.JsonReaderImpl.onTrue()": "initial import\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.serialize(String,JsonGenerator,SerializationContext)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.factory.CdiJohnzonAdapterFactory.create(Class)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonParserFactoryImpl.getDefaultJsonParserImpl(InputStream,Charset)": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.johnzon.mapper.MapperTest.writeMap()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.mapper.converter.FloatConverter.toString(Float)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ClassDecoratedType.ClassDecoratedType(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setOtherProperties(String)": "jsonb reverted jsonb.fail-on-unknown-properties, keeping it as a johnzon property\n", "org.apache.johnzon.mapper.MapperGenericsTest.setValue(List)": "JOHNZON-56 basic one level support of generics\n", "org.apache.fleece.core.JsonBaseStreamParser.getBigDecimal()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String,long)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.TestWithTypeConverter.fromJson(MappingParser,Type)": "JOHNZON-71 improve Converter and MappingParser\n\npairprogramming together with rsandtner\n", "org.apache.johnzon.mapper.util.ArrayUtil.asList(int)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.access.FieldAccessMode.findReaders(Class)": "ignore  and allow to override easily isIgnored in our access modes\n", "org.apache.johnzon.core.JsonStringImpl.getChars()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonWriterFactoryImpl.createWriter(OutputStream,Charset)": "initial import\n", "org.apache.johnzon.mapper.Versioned.setId(T)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.reflection.Generics.resolveTypeVariable(Type,Type,Map)": "JOHNZON-303 a class with some generic should be able to map a container (list/map) using this generic\n", "org.apache.johnzon.mapper.converter.StringerTest.from(byte)": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.mapper.ObjectSerializationTest.objectBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.getType()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonArrayImpl.size()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.Mapper.buildObject(Type,JsonObject)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPatchDiffTest.testDiffReplaceFromNestedObject()": "JOHNZON-103 added tests for REPLACE\n", "org.apache.johnzon.jsonb.ZonedDateTimeFallbackDateAdapter.adaptToJson(Date)": "JOHNZON-187 ensure user adapters can override default adapters\n", "org.apache.johnzon.mapper.converter.DateWithCopyConverter.DateWithCopyConverter(Converter)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonArrayImpl.iterator()": "JOHNZON-226 iterator for JsonArrayImpl\n", "org.apache.fleece.core.JsonArrayImpl.getValuesAs(Class)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getInner()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.DateFormatTest.getInstance()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeNull(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchDiffTest.testAddDiff()": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.jsonb.extras.polymorphism.PolymorphicTest.deserialize()": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setSupportHiddenAccess(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.access.FieldAccessMode.getField()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.reflection.CompositeReader.getType()": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.fleece.core.JsonGeneratorFacade.write(BigDecimal)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.minItems()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jaxrs.JsrProviderTest.array()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonProviderImpl.createReader(InputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.JsonInMemoryParser.getString()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.ParameterizedTypeImpl.hashCode()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.JsonbWriteTest.boolAsStringWriter()": "JOHNZON-148 provide unit test\n", "org.apache.johnzon.jaxrs.JohnzonResource.asParam(Johnzon)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.JsonbVisitilityTest.isVisible(Method)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.core.JsonInMemoryParser.JsonInMemoryParser(JsonObject,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.MyAdapter.adaptFromJson(Whole)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.JsonBaseStreamParser.handleEndArray(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.JsonPatchImpl.hashCode()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.johnzon.core.JsonStreamParserImpl.close()": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.mapper.Mappings.getPrimitiveDefault(Type)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.mapper.NullTest.writeListWithNull()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.fleece.mapper.MapperTest.getArray()": "initial import\n", "org.apache.fleece.core.JsonBaseStreamParser.handleStartArray(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.JsonParserTest.testSkipArray()": "JOHNZON-139 add skipObject and skipArray support\n", "org.apache.johnzon.jsonb.CompositePOJO.setCompositeId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jaxrs.JohnzonProvider.shouldThrowNoContentExceptionOnEmptyStreams()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.Johnzon(String)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail5()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.toBooleanImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveObjectWithInNestedArray()": "Moved tests from single testcase in to individual tests\n", "org.apache.johnzon.mapper.ObjectTypeTest.getMother()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.mapper.MapperTest.constructor()": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.mapper.DBAccessPoodleConverter.writeJson(Poodle,MappingGenerator)": "JOHNZON-72 added test for ObjectConverter\n", "org.apache.johnzon.mapper.SoseClass.setSose(SortedSet)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperBuilder.setSupportHiddenAccess(boolean)": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(InputStream,Class)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getNestedId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonParserTest.invalidObject()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJsonValue(JsonValue,Class)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.core.CommentsJsonStreamParserImpl.CommentsJsonStreamParserImpl(InputStream,Charset,int,BufferStrategy,BufferStrategy)": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.fleece.core.JsonArrayImplTest.arrayToString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MappingParserImpl.MappingParserImpl(MapperConfig,Mappings,JsonReader,boolean)": "JOHNZON-143 make isDeduplicateObjects config a ternary flag.\n\nThe rule is now:\n* _explicit_ decuplicateObjects set via config? -> use this\n* otherwise -> check @JohnzonDeduplicateObjects annotation\n* otherwise -> false\n", "org.apache.johnzon.jsonb.JsonNumberParserAdapter.getInt()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.mapper.MapperEnhancedTests.getSose()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.CompositePOJO.getStringArray()": "more of jsonb - missing plain value handling\n", "org.test.apache.johnzon.mojo.PrimaryMetric.getScoreUnit()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.escapedStringArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.converter.JsonbConverter.JsonbConverter(JsonbAdapter)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.JsonbVisitilityTest.isVisible(Field)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.core.StringBuilderThreadLocalProvider.StringBuilderThreadLocalProvider(int)": "remove unused StringBuilder BufferProvider\n", "org.apache.johnzon.core.JsonParserFactoryImpl.getConfigInUse()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonNumberImpl.bigIntegerValue()": "initial import\n", "org.apache.johnzon.websocket.endpoint.ServerReport.amessage()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.JsonPointerUtilTest.testDecodeNull()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getUrl()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.LiteralTest.setDoubleNumber(double)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Wrapper.Wrapper(Object)": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.superbiz.MyMappings.compare(String,String)": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.generate(JsonReaderFactory,File,Writer,String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.MapperTest.setS(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(JsonValue)": "fix pretty printing\n", "org.apache.fleece.core.JsonProviderDelegate.createGenerator(OutputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.fleece.core.JsonParserTest.fail28()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.DeduplicatedPerson.setFather(DeduplicatedPerson)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setSkipNull(boolean)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonReaderImplTest.emptyOneCharBufferSize()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_999()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.Request.setName(String)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.jsonschema.ValidationResult.ValidationError(String,String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonschema.spi.builtin.EnumValidation.Impl(Collection,Function,String)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.WriterConverters.writeJson(Object,MappingGenerator)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.core.BufferCache.getCache()": "initial import\n", "org.apache.fleece.mapper.converter.DoubleConverter.fromString(String)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage2()": "Improved handling of trailing garbage\n", "org.apache.johnzon.mapper.internal.Streams.read()": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.JPATest.clearEm()": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.jsonb.ClassConverterTest.writeAdapters()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.JsonbAccessMode.toConverter(Type,JsonbTypeAdapter,JsonbDateFormat,JsonbNumberFormat)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.toString()": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.LiteralTest.setShortNumber(short)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DateFormatting.setDate(LocalDateTime)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.map.LazyConverterMap.adapterKeys()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.NullTest.getEmptyArray()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.mapper.reflection.Mappings.CompositeReader(AccessMode[])": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.fleece.core.JsonReaderImplTest.parseTiny50BJsonFile()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonReaderImplTest.simpleValues()": "simple value handling\n", "org.apache.johnzon.jsonb.AccessorsClass.setPrivateFieldWithPrivateAccessors(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.getRawType()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.fleece.core.JsonBaseStreamParser.getValue()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.CircularObjectsTest.getKids()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.fleece.mapper.MapperEnhancedTest.getCharArr()": "FLEECE-14 char handling in mapper\n", "org.apache.johnzon.jsonb.VATNumber.VATNumber(long)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.core.JsonParserTest.fail44()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonWriterImpl.checkClosed()": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.getField(String,Class)": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.jsonb.DateTypes.getLocalDate()": "complete support for DateFormat", "org.apache.fleece.jaxrs.WadlDocumentMessageBodyWriter.getSize(Document,Class,Type,Annotation,MediaType)": "Document to json @Provider mainly dedicated to wadls (not defined behavior in other cases)\n", "org.apache.johnzon.mapper.Mapper.mapCollection(Mappings,JsonArray,Adapter)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.mapper.MapperTest.setShortWA(Short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.NullObject.setStringIsnull(String)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(long)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getGregorianCalendar()": "complete support for DateFormat", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,JsonObjectBuilder)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.Types.visit(TypeVariable)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.core.JsonParserTest.array()": "initial import\n", "org.apache.fleece.core.JsonStreamParserImpl.JsonStreamParserImpl(Reader,int,BufferStrategy,BufferStrategy)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "javax.json.bind.spi.JsonbProvider.provider()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonGeneratorImplTest.emptyStringArray()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperTest.readObject()": "initial import\n", "org.apache.fleece.mapper.converter.StringConverter.fromString(String)": "initial import\n", "org.apache.johnzon.osgi.cdi.CdiExtensionFactory.getService(Bundle,ServiceRegistration)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeObject(Object,JsonGenerator)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.ObjectTypeTest.getRawType()": "JOHNZON-72 added test for ObjectConverter\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.getObject()": "JOHNZON-157 more tests for the regression\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.getType2()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jaxrs.WildcardJsrProvider.WildcardJsrProvider()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.jsonb.Types.setOffsetDateTime(OffsetDateTime)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.reflection.Setter.toString()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonStreamParserImpl.isAsciiDigit(char)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonInMemoryParser.JsonInMemoryParser(JsonArray,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.toString()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.mapper.NumberClass.setIntNumber(int)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.CycleRace.setCyclists(List)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.readObject(JsonStructure,Type)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.fleece.mapper.MapperTest.equals(Object)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperEnhancedTests.setString(String)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.Mapper.buildObject(Type,JsonObject)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.MapperConfig.isTreatByteArrayAsBase64()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,JsonObjectBuilder)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.core.JsonParserTest.literalFailChecksNull()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,double)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,int)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.core.JsonDoubleImpl.doubleValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.GenericAdapterTest.toString()": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.equalsCoercion()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonParserTest.fail56()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.DummyBufferStrategy.newCharProvider(int)": "JOHNZON-217 toUpper on a Class name seems a bad idea...\n", "org.apache.johnzon.core.JsonStreamParserImpl.handleLiteral()": "typos fixed, method signature simplified\n", "org.apache.fleece.core.JsonArrayImpl.equals(Object)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue7()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getTimeZone()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.testDeserializeWithObjectConverter()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.jaxrs.JsrProviderTest.unbind()": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail44()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTest.getSoma()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jaxrs.DelegateProvider.writeTo(T,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MappingParserImpl.toValue(Object,JsonValue,Adapter,Adapter,Type,ObjectConverter,JsonPointerTracker)": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.jsonb.ModelAdapter.adaptTo(Model)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.access.MethodAccessMode.toString()": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.MapperBuilder.setProvider(JsonProvider)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.core.JsonProviderDelegate.createValue(long)": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.core.JsonGeneratorImplTest.nullLiteralArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.testSerializeHierarchyTwo()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(BigInteger)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.TransientTest.getInstance()": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.isMonument()": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.mapper.Mappings.createCollectionMapping(ParameterizedType,Type)": "JOHNZON-150 add support for EnumSets\n", "org.apache.johnzon.mapper.MappingParserImpl.buildArray(Type,JsonArray,Adapter,ObjectConverter,JsonPointerTracker)": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.toString()": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.fleece.mapper.MapperEnhancedTest.setCharArr(char)": "FLEECE-14 char handling in mapper\n", "org.apache.johnzon.mapper.CycleRace.setTour(boolean)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.jsonb.Types.setZoneId(ZoneId)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.johnzons1()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setGeneratorFactory(JsonGeneratorFactory)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.superbiz.ExtendMappingTest.MyMappings()": "JOHNZON-109 fail on unknown properties support\n", "org.apache.johnzon.mapper.ObjectConverterTest.toString()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.hashCode()": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.mapper.NullTest.getIntegerIsnull()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.fleece.core.ThreadLocalProvider.newValue(int)": "supporting several buffer cache strategies\n", "org.apache.johnzon.core.JsonParserTest.fail68()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.getAge()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.mapper.access.FieldReader.read(Object)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.jsonb.extension.JsonValueReader.close()": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.roundTrip()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.Types.asClass(Type)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonProviderDelegate.createPatch(JsonArray)": "JOHNZON-96 add test for Json.createPatch\n", "org.apache.johnzon.jsonschema.ValidationError.getField()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonschema.spi.builtin.TypeValidation.Impl(String,Function,JsonValue[])": "JOHNZON-191 ensure we validate the right value for meta validation (jsonschema): patternproperties and additionalProperties\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setLocalTime(LocalTime)": "JOHNZON-196 support of LocalTime in JSON-B\n", "org.apache.johnzon.core.JsonLongImpl.bigIntegerValueExact()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTest.compare(String,String)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.reflection.ClassMapping.findConstructor(boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.core.JsonParserTest.fail60()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.writeArray(Collection,Writer)": "JOHNZON-76 close JsonGenerator in finally block\n", "javax.json.bind.JsonbConfig.withBinaryDataStrategy(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonParserTest.maxStringNumberFail()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.setTour(boolean)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createInternalParser(InputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.JsonArrayBuilderImpl(Collection)": "JOHNZON-96 add test + logic for ArrayBuilder ft of JSONP-1.1\n", "org.apache.johnzon.core.Types.visit(WildcardType)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setSerializeValueFilter(String)": "JOHNZON-119 WildcardConfigurableJohnzonProvider missing setSerializeValueFilter\n", "org.apache.johnzon.mapper.reflection.CompositeWriter.CompositeWriter(AccessMode[])": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.CircularObjectsTest.setMother(Person)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.access.Meta.invoke(Object,Method,Object)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.JsonArrayBuilderImpl(JsonArray,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMaximumValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,BigInteger)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.merge()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.Mapper.writeArrayAsString(Collection)": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.jsonschema.ValidationResult.ValidationResult(Collection)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setAccessModeFieldFilteringStrategy(BaseAccessMode)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.mapper.LiteralTest.hashCode()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.MappingParserImpl.convert(Class,String)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.core.Entry.Entry(Event,JsonValue)": "initial import\n", "org.apache.johnzon.core.CharBufferQueueProvider.CharBufferQueueProvider(int)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.ReverseConverter.toString(String)": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail2()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.JohnzonAnyMappingTest.getName()": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.websocket.internal.jsr.JsrDecoder.init(EndpointConfig)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeValue(Class,boolean,boolean,boolean,boolean,Adapter,String,Object)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonb.JsonbTypesTest.compare(String,String)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.comparison(BiPredicate,JsonValue,JohnzonJsonLogic,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.CharBufferQueueProvider.CharBufferQueueProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonParserTest.rfc7159MustFailForString()": "Improved handling of trailing garbage\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.write(OutputStream)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.MapperTest.fromString(String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage5()": "Improved handling of trailing garbage\n", "org.apache.johnzon.core.JsonGeneratorImplTest.generate()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.NullTest.getArray()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.jsonb.api.experimental.JsonbExtensionTest.toJsonValue()": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.FloatTest.floatMin()": "JOHNZON-241 float can't be serialized as double\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setInner(POJO)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPointerTest.testAddObjectMember()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.LiteralTest.getBi()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Types.getCalendar()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.jaxrs.xml.WadlDocumentToJson.addChildrens(String,JsonObjectBuilder,NodeList)": "Document to json @Provider mainly dedicated to wadls (not defined behavior in other cases)\n", "org.apache.johnzon.core.JsonParserTest.testGetValueOfStringType()": "Fix JsonParser.getValue()\n", "org.apache.johnzon.core.JsonPatchDiff.isJsonObject(JsonValue)": "JOHNZON-103 add createMergeDiff handling\n", "org.apache.johnzon.core.PatchValue.toJson()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.mapper.MapperTest.isBool()": "initial import\n", "org.apache.johnzon.core.Types.getOwnerType()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.CircularObjectsTest.testCyclesInArrays()": "JOHNZON-135 also support deduplication in arrays\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithJsonArrayIndexNoNumber()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setNullValues(boolean)": "JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own)\nJsonbConfig injectable via Jax-RS API\nBetter support for generics types\nSupport for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes\nSupport for default deserialization from string to enum\nFix to dateformatting (date format was not properly used in deserialization)", "org.apache.fleece.mapper.MapperEnhancedTest.TestClass()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonReaderImplTest.JsonReaderImplTest()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.DateWithCopyConverter.DateWithCopyConverter(Adapter)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonReaderImplTest.simple()": "initial import\n", "org.apache.johnzon.mapper.MapperConfig.getSerializationPredicate()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setPolymorphicDiscriminator(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.fleece.mapper.NumberClass.hashCode()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonObjectImpl.value(String,Class)": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.toString()": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.fleece.core.JsonGeneratorImplTest.nullLiteralArray()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,double)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonParserTest.fail27()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.AdapterTest.adaptToJson(Baz)": "JOHNZON-282: add support for @JsonbTypeAdapter at class level (#53)\n\n* JOHNZON-282: add support for @JsonbTypeAdapter at class level\r\n\r\n* add test with adapter at root object\r\n\r\n* remove recursion\r\n", "org.apache.johnzon.jsonb.GenericAdapterTest.valueOf(String)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.johnzons2()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonModifiers()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.Mapper.writePrimitives(JsonGenerator,String,Class,Object)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.ObjectTypeTest.testReadWithAdvancedObjectConverter()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.fleece.core.JsonParserTest.fail57()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.superbiz.ModelSuperSuperBase.setChildA(A)": "JOHNZON-155 better support of TypeVariables\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.SimpleBinaryDto.setBlob(byte)": "JOHNZON-164 add a unit test for JsonB throwing JsonbException on wrong data\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeArray(Class,Adapter,String,Object,Collection,JsonPointerTracker)": "JOHNZON-226 use own Array.length\n", "org.apache.johnzon.mapper.JPATest.createEm()": "making tests a bit more tolerant to timezone\n", "org.apache.johnzon.jsonb.Types.setLocalTime(LocalTime)": "JOHNZON-196 support of LocalTime in JSON-B\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(JsonValue)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.readMapWithJustObject()": "JOHNZON-81 better support of Object as mapping type\n", "org.apache.johnzon.core.JsonReaderImplTest.testInvalidNumber()": "JOHNZON-164 add test for json-p behaviour\n", "org.apache.fleece.mapper.LiteralTest.setBg(BigDecimal)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.MapBuilderReader.read(Object)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.cdi.JohnzonCdiExtension.isCanWrite()": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.core.BufferStrategyFactory.valueOf(String)": "JOHNZON-217 toUpper on a Class name seems a bad idea...\n", "org.apache.fleece.core.JsonCharBufferStreamParser.closeUnderlyingSource()": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.setNull(int)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.getId()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.websocket.internal.mapper.MapperLocator.contextDestroyed(ServletContextEvent)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.fleece.core.JsonBaseStreamParser.isNumber(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonb.MoreTests.deserialize(JsonParser,DeserializationContext,Type)": "Fix after review\n", "org.apache.johnzon.core.JsonInMemoryParser.isIntegralNumber()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.mapper.access.MethodAccessMode.read(Object)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonPatchTest.testCopyArrayMemberPlainArray()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(Collection,Function,String)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MapperException.MapperException(String,Throwable)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(boolean)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.PathAdapter.adaptToJson(Path)": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setFailOnUnknownProperties(boolean)": "Revert \"JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own) JsonbConfig injectable via Jax-RS API Better support for generics types Support for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes Support for default deserialization from string to enum Fix to dateformatting (date format was not properly used in deserialization)\"\n\nThis reverts commit 028a1644aac2e565fbed007ba85e8f0bede9061f.", "org.apache.johnzon.mapper.internal.AdapterKey.isAssignableFrom(Type)": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.core.JsonDoubleImpl.JsonDoubleImpl(double)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperTest.hashCode()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.PartialOrder.setAnotherIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.mapper.CharClass.setCharValue(char)": "FLEECE-14 char handling in mapper\n", "org.apache.fleece.core.JsonStreamParser.close()": "initial import\n", "org.apache.johnzon.jsonb.converter.JsonbConverter.toString(Object)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonProviderDelegate.createValue(String)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.mapper.converter.LocaleConverter.to(String)": "JOHNZON-66 support of Locale\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_99999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.websocket.endpoint.MessageDecoder.MessageDecoder()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.access.FieldAccessMode.toString()": "JOHNZON-239 transient support\n", "org.apache.johnzon.core.JsonParserTest.fail55()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,BigDecimal)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonInMemoryParser.generateObjectEvents(List,JsonObject)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceJsonArrayWithTargetNull()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.JohnzonJsonbTest.listObject()": "[JOHNZON-318] ensure List<Object> and List<JsonValue> works even when not integers\n", "org.apache.johnzon.jsonb.NumberFormatTest.formatType()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonBaseStreamParser.handleEndObject(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(Instant)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonReaderImplTest.setup()": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.JsonPatchDiffTest.testAddDiffNewObject()": "JOHNZON-103 added tests for JsonPatchDiff ADD and REMOVE\n", "org.apache.johnzon.core.PatchValue.PatchValue(JsonPatchOperation,JsonPointer,JsonPointer,JsonValue)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.getValueStream()": "JOHNZON-139 add preliminary stream support\n", "org.apache.johnzon.jsonb.extras.polymorphism.Serializer.ensureInit()": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBboolean()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonProviderDelegate.createReaderFactory(Map)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.converter.JsonbConverterToString.JsonbConverterToString(JsonbAdapter)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.fleece.core.JsonStreamParser.location(JsonParser)": "initial import\n", "org.apache.johnzon.jsonb.GenericAdapterTest.adaptFromJson(String)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonPOJOs()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.OverrideDefaultAdaptersTest.run()": "JOHNZON-187 ensure user adapters can override default adapters\n", "org.apache.fleece.mapper.converter.DateConverter.DateConverter(String)": "initial import\n", "org.apache.johnzon.mapper.GenericsTest.multipleBounds()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.mapper.ByteShort.setByteW(Byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonParserTest.bigInteger()": "ensure Json.createValue(BigInteger) does not loose precision\n", "org.apache.fleece.jaxrs.FleeceProviderTest.getName()": "initial import\n", "org.apache.fleece.mapper.Mapper.writeObject(Object,OutputStream)": "initial import\n", "org.apache.johnzon.mapper.CustomEnumCodecTest.from(E)": "JOHNZON-112 custom enum serialization support for arrays\n", "org.apache.johnzon.jsonb.converter.JsonbNumberConverter.execute(Function)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.mapper.FallbackConverter.fromString(String)": "using toString to write unknown types by default\n", "org.apache.johnzon.jsonb.Book.getName()": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.jsonb.Request.setMimeType(String)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.ensureGenerator(JsonGenerator)": "JOHNZON-211 ensure the serialization context uses the passed key if the related method is called\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addBDNpeIfNull()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.SoseClass.setSose(SortedSet)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.osgi.Activator.stop(BundleContext)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.core.JsonParserTest.fail71()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonNumberTest.nonZeroFractional()": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.mapper.CompositeWriter.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonParserTest.maxStringStringFail()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperTest.readEmptyObject()": "initial import\n", "org.apache.johnzon.jsonb.Value.getAge()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.mapper.access.Meta.newAnnotation(Map,Annotation,T)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.RecordTest.Record(int)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.mapper.MapperException.MapperException(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map,JohnzonAdapterFactory)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(Readable,Class)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.mapper.MapperVersionTest.MapperVersionTest(int,String,String)": "JOHNZON-199 split unit test to get better feedback for each assert\n", "org.apache.johnzon.jsonb.converter.JsonbLocalDateTimeConverter.JsonbLocalDateTimeConverter(JsonbDateFormat)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonGeneratorImpl.GeneratorState(boolean,boolean)": "fix pretty printing\n", "org.apache.johnzon.jsonb.JohnzonBuilder.createJava8Converters()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.remove(int)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonWriterImpl.write(JsonStructure)": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.fleece.core.JsonStreamParserImpl.handleLiteral(char)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.ObjectTypeTest.getSubClass(Type,String)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.fleece.core.JsonArrayImpl.isNull(int)": "initial import\n", "org.apache.fleece.core.JsonReaderImpl.onObject(Object)": "initial import\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_950()": "better to use double instead of integer when guessing the type\n", "org.apache.fleece.core.JsonDoubleImpl.intValue()": "initial import\n", "org.apache.johnzon.core.JsonReaderFactoryImpl.getCharArrayProvider()": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setCompositeId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonReaderImpl.read()": "simple value handling\n", "org.apache.fleece.core.JsonParserTest.fail40()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.ObjectIterator.remove()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPointer.remove(JsonStructure)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.mapper.internal.Streams.close()": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.Mapper.writeObject(Object,JsonGenerator)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.extras.polymorphism.Serializer.serialize(T,JsonGenerator,SerializationContext)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jsonb.AnimalListSerializer.serialize(List,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getZoneOffset()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonPatchImpl.JsonPatchImpl(PatchValue[])": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.core.JsonLocationImpl.getStreamOffset()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.writeObject(Object,JsonGenerator,Collection,JsonPointerTracker)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.mapper.Cyclist.Cyclist(String,Bike)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonMergePatchDiff.JsonMergePatchDiff(JsonValue,JsonValue)": "JOHNZON-103 add createMergeDiff handling\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.greaterOrEqualsThan()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.mapper.org.apache.fleece.mapper.converter.EnumConverterTest.fromEnumToString()": "initial import\n", "org.apache.johnzon.mapper.TypeInstance.setType(String)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.addValue(JsonValue)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.fleece.mapper.MapperTest.setCollectionWrapper(List)": "initial import\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.JsonValueParserAdapter(T)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBchar(char)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.PathAdapter.adaptFromJson(JsonString)": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.mapper.MapBuilderReader.MapBuilderReader(Map,String,int)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.MapperBuilder.addAdapter(Adapter)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.JsonPointerUtilTest.testEncodeNoTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jsonb.Types.setInstant(Instant)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.JsonGeneratorFactoryImpl(Map)": "initial import\n", "org.apache.fleece.mapper.reflection.Mappings.createClassMapping(Class)": "ok, groovy is adding it dynamically so skipping class test,also forbids metaClass name :(\n", "org.apache.fleece.core.JsonReaderImplTest.simpleBadBufferSize8()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonPatchTest.testReplacingObjectAttribute()": "JOHNZON-274 ensure JsonPatch respects requested path for arrays and objects\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.toJsonString(String)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonb.JohnzonBuilder.shouldSkipCdi()": "JOHNZON-287 JOHNZON-288 JOHNZON-289 add supportPrivateAccess for jsonbcreator in jsonbaccessmode + cleanup CDI property support\n", "org.apache.johnzon.jsonb.IJsonTest.date()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,Reader,Charset,int,BufferStrategy,BufferStrategy)": "unused field\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonPointerTest.testEqualsFalse()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.MapperConfig.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.mapper.ListHolder.setInstance(List)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.setDiscount(Double)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.SerializerTest.serialize(MyWrapper,JsonGenerator,SerializationContext)": "JOHNZON-211 ensure the serialization context uses the passed key if the related method is called\n", "org.apache.johnzon.core.JsonArrayIterator.hasNext()": "JOHNZON-226 iterator for JsonArrayImpl\n", "org.apache.fleece.core.JsonGeneratorImpl.write(BigInteger)": "initial import\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(LocalDate)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.TypeAdapter.to(TypeInstance)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.fleece.mapper.MapperEnhancedTests.setInner(TestClass)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonArrayImpl.addAll(int,Collection)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object,Type,Writer)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.access.FieldAccessMode.FieldDecoratedType(Field,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.Mapper.writeArray(Object,OutputStream)": "JOHNZON-71 move writeArray to MappingGeneratorImpl\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getCompositeId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.QueueProvider.QueueProvider(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DateTypes.setLocalDateTime(LocalDateTime)": "complete support for DateFormat", "org.apache.johnzon.core.JsonProviderTest.testJsonCreateValueBigDecimal()": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.jsonb.ClassDecoratedType.findConverter()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.replace(String,String)": "JOHNZON-95 initial JsonPatchBuilder impl\n", "org.apache.johnzon.jsonb.JsonbAccessMode.ParsingCacheEntry(DecoratedType)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.StudentHolder.setStudent(List)": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeEnd()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonReaderImplTest.getFactoryConfig()": "JOHNZON-111 ensure to fail with a jsonexception when reading a wrong type of value with jsonreader, thanks Michele Vivoda\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(ZoneOffset)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setUseBigDecimalForFloats(boolean)": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObject(Object,JsonGenerator,boolean)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.core.TypeVisitor.visit(Class)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonMergePatchImpl.JsonMergePatchImpl(JsonValue)": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.core.util.ClassUtil.loadClassOptional(String,boolean)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.core.JsonParserTest.simpleAttempting()": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.johnzon.mapper.converter.FloatConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.GenericsTest.wildcardGeneric()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String,double)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.MapperBuilder.setAdaptersDateTimeFormatterString(String)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonProviderTest.testJsonCreateValueString()": "JOHNZON-96 implement Json.createValue methods\n", "javax.json.bind.spi.JsonbProvider.provider(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_990()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.JsonbWriteTest.propertyMapping()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.ArrayIterator.ArrayIterator(JsonArray)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.fleece.core.JsonArrayImpl.JsonArrayImpl(List)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.ReaderConverters.ReaderConverters(DecoratedType)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.JsonGeneratorImplTest.numbers2()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointer.getArrayIndex(String,JsonArray,boolean)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.getBigDecimal()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.ArrayContainer.getbWint()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.getBody()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.mapper.JohnzonIgnoreNestedTest.ignoreNested()": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.apache.fleece.core.JsonReaderImplTest.special()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.client(MediaType)": "JOHNZON-133 ensure we test correctly jaxrs types and not just assume the signature is right\n", "org.apache.johnzon.mapper.Mappings.handleVirtualObject(Collection,JohnzonVirtualObject,Map,Map,Map,Map,boolean)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.onObject(JsonObject)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MapperTest.getI()": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.DelegateProvider.isReadable(Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createInternalParser(InputStream,Charset)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.varObjectDefault()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.ClassDecoratedType.getType()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.Request.getMimeType()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.setFirstName(String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.varImpl(JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.MetaMapperTest.setId(long)": "JOHNZON-87 meta annotation support\n", "org.apache.fleece.core.JsonParserTest.fail71()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.doFindReaders(Class)": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.close()": "completing previous commit, some missed case\n", "org.apache.johnzon.mapper.converter.BigDecimalConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializerTest.passthroughSerializer()": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.fleece.mapper.TestClass.TestClass()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonReaderFactoryImpl.getConfigInUse()": "initial import\n", "org.apache.johnzon.jaxrs.JohnzonResource.johnzons1()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonBaseStreamParser.getEscapedString()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.divide()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.nextIndent()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonObjectImpl.putInternal(String,JsonValue)": "initial import\n", "org.apache.johnzon.mapper.User.setName(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addGregorianCalendar(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonb.Value.setName(String)": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setBufferSize(int)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.getArrayStream()": "JOHNZON-139 add preliminary stream support\n", "org.apache.johnzon.mapper.NumberClass.getIntNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.close()": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findParameterizedType(Class,Class)": "aligning code from AccessMode and Generics to avoid duplication\n", "org.apache.fleece.core.CharBufferThreadLocalProvider.CharBufferThreadLocalProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonParserFactoryImpl.getInt(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Bike.hashCode()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.untypedStreamOutput()": "JOHNZON-133 ensure we test correctly jaxrs types and not just assume the signature is right\n", "org.apache.fleece.core.JsonArrayListener.onArray(Object)": "initial import\n", "org.apache.johnzon.mapper.LiteralTest.setBg(BigDecimal)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.AnyMe.getAny()": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.mapper.MapperConfigTest.testFindObjectConverterConverterForInterface()": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.mapper.Mappings.toString()": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.mapper.converter.ShortConverter.toString(Short)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.some()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.MapperBuilder.setSupportConstructors(boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.mapper.MapperTest.ConstructorUsage(String,Collection,String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.mapper.reflection.CompositeWriter.getType()": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.Dog.setName(String)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.jsonb.MyMapSerializer.serialize(MyWrapper,JsonGenerator,SerializationContext)": "JOHNZON-211 ensure the serialization context uses the passed key if the related method is called\n", "org.superbiz.ModelSuperSuperBase.getChildA()": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.mapper.Cyclist.setBike(Bike)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.core.JsonBaseStreamParser.getInt()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonb.SerializerTest.serializeWithKey()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.core.JsonGeneratorImpl.JsonGeneratorImpl(Writer,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.Mapper.writeValue(JsonGenerator,Class,boolean,String,Object)": "caching a bit more reflection for objects, this can be reworked to be more adapted BTW\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.createObjectBuilder()": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxPropertiesValidation.Impl(String,Function,int)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,String)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonArrayImpl.getJsonObject(int)": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.structures()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonParserTest.fail47()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImpl.onNull()": "initial import\n", "org.test.apache.johnzon.mojo.SomeValue.set_950(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonReaderImpl.parseArray(JsonArrayBuilder)": "JOHNZON-265 some protection to cast a Bignumber as a long\n", "org.apache.johnzon.mapper.access.Meta.getAnnotation(Class,Class)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.internal.AdapterKey.AdapterKey(Type,Type)": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setIJson(boolean)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWchar(Character)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.BrokenDefaultTest.run()": "adding a broken test to show why previous commit broke the buffer strategies\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findClass(Class,GenericDeclaration)": "JOHNZON-83 avoid NPE if superclass is null in BaseAccessMode\n", "org.apache.johnzon.jsonschema.spi.builtin.MinPropertiesValidation.Impl(String,Function,int)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.SerializerTest.uuid()": "stupid missed idea flush\n", "org.apache.johnzon.jsonb.TransientHolder.setInstance(String)": "JOHNZON-239 transient support\n", "org.apache.johnzon.core.JsonArrayImpl.getValuesAs(Class)": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceProviderTest.object()": "initial import\n", "org.apache.johnzon.core.SerializationTest.jsonObject()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.skipObject()": "JOHNZON-110 improve long support impl\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.emptyArray()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.jsonschema.ValidationResult.setMessage(String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.Request(String,String,byte)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.remove(String)": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,double)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.setName(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBchar()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.MapperTest.getShortWA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.AdapterTest.Bar(String,int)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.isTruthy(JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.johnzon()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,int)": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceMessageBodyReader.FleeceMessageBodyReader()": "initial import\n", "org.apache.johnzon.core.JsonParserTest.emptyObject()": "JOHNZON-183 JsonParser#hasNext() returns true even when input is completely empty\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.eatStartObject(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.fleece.core.StructureElement.StructureElement(StructureElement,boolean)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJsonValue(Object,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.of(boolean)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.Mapper.writeObject(Object,JsonGenerator,Collection)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.fleece.mapper.NumberClass.getByteNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.DynamicMappingGenerator(MappingGenerator,Runnable,Runnable,String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonb.JohnzonJsonbTest.LongWrapper(Long)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_950()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.OrderTest.getAnyOther()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.mapper.MapperBuilder.setVersion(int)": "initial import\n", "org.apache.johnzon.mapper.Mapper.buildArray(Type,JsonArray,Adapter)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(Period)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.websocket.endpoint.ServerEndpointImpl.on(Session,Message)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.ClassMapping.ClassMapping(Class,AccessMode,Map,Map,ObjectConverter,ObjectConverter)": "JOHNZON-81 better support of Object as mapping type - write side\n", "org.apache.johnzon.mapper.converter.DateConverter.DateConverter(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.shortestNonEmtyJsonFileWithWhiteSpaceChars()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.stringescapeVariousBufferSizesBogus()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,BigInteger)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.JsonbAccessMode.WriterConverters(DecoratedType,Types)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonCollectorTest.testToJsonObject()": "JOHNZON-96 added tests for JsonCollectors\n", "org.apache.fleece.mapper.Mapper.writeArray(Object,OutputStream)": "initial import\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(BigInteger)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.core.CharBufferThreadLocalProvider.newInstance(int)": "forgotten files in last commit\n", "org.apache.johnzon.jsonb.extras.polymorphism.Serializer.getOrLoadId(T)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.mapper.Mapper.writeValue(JsonGenerator,Class,boolean,boolean,boolean,boolean,String,Object)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map,JohnzonAdapterFactory,JsonProvider,Supplier,Supplier,AccessMode,boolean)": "use jsonp as base for jsonb and not johnzon internals\n", "org.apache.fleece.core.JsonStringImpl.getChars()": "initial import\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.toJavaName(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonschema.regex.JavascriptRegex.toString()": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.mapper.TheObject.setInteger(int)": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.mapper.CharClass.setCharArr(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Root.Root(Model)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.jsonschema.spi.builtin.MultipleOfValidation.create(ValidationContext)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.getInstant()": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.findConverter()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.getName()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderTestJsonObject()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.Mapper.getBuilderFactory()": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.core.JsonProviderDelegate.createWriterFactory(Map)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.core.CharBufferByInstanceProvider.newBuffer()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbVisitilityTest.testJsonVisibilityAllFields()": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.jsonb.ClassDecoratedType.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.fleece.mapper.TestClass.getDates()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.CharBufferSingletonProvider.newInstance(int)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.MapperTest.mapToJsonObject()": "JOHNZON-206: Tests for nested toStructure mapping\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonGeneratorImpl.StructureElement(StructureElement,boolean)": "fix pretty printing\n", "org.apache.johnzon.mapper.access.MethodAccessMode.doFindReaders(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.fleece.mapper.Mapper.doWriteObjectBody(JsonGenerator,Object)": "caching a bit more reflection for objects, this can be reworked to be more adapted BTW\n", "org.apache.johnzon.jsonb.extension.JsonValueWriter.getObject()": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.core.JsonGeneratorImplTest.pretty()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonArrayImpl.remove(Object)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperTest.writeMap()": "initial import\n", "org.apache.johnzon.core.JsonWriterImpl.writeObject(JsonObject)": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.fleece.core.JsonArrayBuilderImpl.build()": "initial import\n", "org.apache.johnzon.jsonb.ZonedDateTimeWithFallback.adaptFromJson(String)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.core.util.ArrayUtil.asList(Object)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.varObjectStringMissing()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.MappingParserImpl.mapCollection(Mappings,JsonArray,Adapter,ObjectConverter,JsonPointerTracker,Type)": "aligning code from AccessMode and Generics to avoid duplication\n", "org.apache.johnzon.jsonb.JohnzonJsonb.isValueConsumer(Writer)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.fleece.mapper.NumberClass.toString()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonGeneratorImpl.writeStartObject(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonParserTest.fail30()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonProviderDelegate.createPatch(JsonStructure,JsonStructure)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getLast()": "completing previous commit, some missed case\n", "org.apache.johnzon.mapper.access.FieldAccessMode.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.test(CharSequence)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.readFoo(Boolean,InputStream)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.mapper.ClassMapping.ClassMapping(Class,AccessMode,Map,Map)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.access.Meta.getClassOrPackageAnnotation(Field,Class)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonGeneratorImpl.GeneratorState(boolean,boolean,boolean)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.core.JsonPointer.validateRemove(JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.core.JsonWriterImpl.close()": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(Reader,int,BufferStrategy,BufferStrategy,boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.skipObject()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.jsonb.AdapterTest.adaptTo(String)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.fleece.core.JsonArrayImplTest.emptyArray()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MappingParserImpl.toObject(Object,JsonValue,Type,Adapter,JsonPointerTracker,Type)": "[JOHNZON-318] ensure List<Object> and List<JsonValue> works even when not integers\n", "org.apache.johnzon.core.JsonBuilderFactoryTest.testCreateBuilderFactory()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.fleece.mapper.Pair.Pair(int,String)": "initial import\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.BikeWrapper(Bike)": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.fleece.core.LocationTest.assertJsonLocation(String,JsonLocation)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "javax.json.bind.JsonbConfig.withFormatting(Boolean)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.TestBufferProvider.clear()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.jsonb.PolymorphicConfigTest.roundTrip()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writePrimitives(String,Class,Object,JsonGenerator)": "more reference passing in MappingGenerator to ensure we can override the generator as for object writers\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,AccessMode,boolean)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.MapperTest.setNested(TheObject)": "renamed fleece to johnzon\n", "org.superbiz.ModelSuperBase.getChildA()": "JOHNZON-155 better support of TypeVariables\n", "org.apache.fleece.core.JsonGeneratorImpl.addCommaIfNeeded()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.access.FieldAccessMode.read(Object)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.mapper.Customer.setFirstName(String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.test.apache.johnzon.mojo.SomeValue.set_999999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.core.JsonParserTest.fail54()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getBigDecimal()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.extension.JsonValueWriter.setResult(JsonValue)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.reflection.Setter.Setter(Method,boolean,Type,Converter,int)": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonb.AnnotationOrderTest.run()": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.fleece.mapper.converter.BigDecimalConverter.fromString(String)": "initial import\n", "org.apache.johnzon.jsonschema.spi.ValidationContext.toPointer()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.test.apache.johnzon.mojo.SomeValue.setMeasurementIterations(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,BigInteger)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.TypeVisitor.visit(WildcardType)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.NillableTest.type()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonPatchImpl.apply(T)": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderRemove()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.PartialOrder.setYetAnotherIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.reflection.MapBuilderReader.getAnnotation(Class)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBshort()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.move(String,String)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.internal.Streams.noClose(InputStream)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJsonValue(Object)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonStructures()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.SerializableValue.factory()": "JOHNZON-94 ignoring null and true/false serialization to ensure == works for these values\n", "org.apache.johnzon.mapper.ObjectTypeTest.getType()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.ClassMapping.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter,Getter,Method,Field,Method)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.fleece.mapper.Mapper.writeArray(Collection,OutputStream)": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonPrimitives()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.write(OutputStream)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.access.FieldAccessMode.findWriters(Class)": "ignore  and allow to override easily isIgnored in our access modes\n", "org.apache.johnzon.mapper.Mappings.createCollectionMapping(ParameterizedType)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.reflection.Mappings.createCollectionMapping(ParameterizedType,Class)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayImpl.writeReplace()": "JOHNZON-94 ignoring null and true/false serialization to ensure == works for these values\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createParser(JsonObject)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.QueueClass.getQueue()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorFactoryImpl.createGenerator(OutputStream)": "fix pretty printing\n", "org.apache.fleece.core.JsonLongImpl.toString()": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonEnums()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.instance()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObjectBody(Object,Collection,JsonPointerTracker)": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.convertDefault(Class,String)": "reupdating jsonb api\n", "org.apache.fleece.core.JsonProviderDelegate.createParserFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.converter.Stringer.from(byte)": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.mapper.CircularObjectsTest.Person(String)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.JohnzonJsonLogic(JsonProvider)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(int)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.MappingParserImpl.readObject(JsonValue,Type)": "JOHNZON-71 improve Converter and MappingParser\n\npairprogramming together with rsandtner\n", "org.apache.johnzon.core.JsonParserStreamingTest.testValueStream()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.fleece.core.JsonParserFactoryImpl.createParser(JsonObject)": "initial import\n", "org.apache.johnzon.mapper.CompositeWriter.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonParserTest.fail40()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.User.getCustom2()": "JOHNZON-87 meta annotation support\n", "org.apache.fleece.jaxrs.DelegateProvider.writeTo(T,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "initial import\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,Reader,Charset,int,BufferStrategy,BufferStrategy,boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.jsonb.JsonNumberParserAdapter.isIntegralNumber()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonReaderImplTest.comments()": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.johnzon.core.JsonNumberImpl.longValue()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,Charset,int,BufferStrategy,BufferStrategy)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.NumberClass.setBi(BigInteger)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,BigInteger)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.min()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,JsonBuilderFactory,JsonProvider,MapperConfig,Collection)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.read(Object)": "JOHNZON-102 cleaning CompositeDecoratedType usage to avoid coding errors\n", "org.apache.fleece.mapper.TheObject.getInteger()": "initial import\n", "org.test.apache.johnzon.mojo.SomeValue.getScorePercentiles()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonInMemoryParser.ObjectIterator(JsonObject)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.TestJsonGeneratorFactory.createGenerator(Writer)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.jsonb.JohnzonBuilder.withConfig(JsonbConfig)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonProviderDelegate.createValue(int)": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.jsonb.JsonbTransientTest.setInstance(String)": "JOHNZON-239 transient support\n", "org.apache.johnzon.jaxrs.xml.WadlDocumentToJson.convert(Document)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DefaultMappingTest.optionals()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.ClassConverterTest.roundTripSerDeser()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonReaderImpl.readObject()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.NumberClass.setBg(BigDecimal)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,Charset,BufferStrategy,boolean)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,MapperConfig,Comparator,Collection)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.jsonb.model.nillable.notnillable.StringHolder.setString(String)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.fleece.core.JsonNumberImpl.isIntegral()": "initial import\n", "org.apache.johnzon.core.SingletonProvider.SingletonProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getValue()": "completing previous commit, some missed case\n", "org.apache.johnzon.mapper.MapperTest.getMap()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.util.ArrayUtil.getArrayLength(Object)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBint(int)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.isWriteable(Class,Type,Annotation,MediaType)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.EnumTest.getString()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.SimpleStack.pop()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.mapper.converter.DateWithCopyConverter.toString(Date)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.mapper.MapperTest.getPrimitives()": "initial import\n", "org.apache.johnzon.mapper.MappingParserImpl.toObject(Object,JsonValue,Type,Adapter,JsonPointerTracker)": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.jsonb.JsonbAccessMode.methodFactory(Class,Method,Consumer,Type,String,Adapter,Adapter,ObjectConverter)": "JOHNZON-235 ensure @JsonbCreator is validated even when the factory is not static\n", "org.apache.johnzon.mapper.internal.AdapterKey.hashCode()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.Dog.getMother()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.mapper.FallbackConverter.fromString(String)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.fleece.mapper.MapperTest.getNested()": "initial import\n", "org.apache.fleece.core.StringBuilderQueueProvider.StringBuilderQueueProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.reflection.Mappings.createCollectionMapping(ParameterizedType)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(long)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.SimpleBool.getBool()": "JOHNZON-148 fixed checkstyle, added test with Boolean in Object\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,long)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.AccessorsClass.setValueWithoutField(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.isReadable(Class,Type,Annotation,MediaType)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.max()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.Record.Record(int,String)": "better record support (after jdk14 validation)\n", "org.apache.johnzon.mapper.TheObject.setPrimitives(int)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTests.getSoma()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,int)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(BigDecimal)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeValue(int)": "fix pretty printing\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.ln()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMinimumValidation.isValid(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_00(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.TheObject.getArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Person.getKids()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.Dog.Dog()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.LiteralTest.getIntNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.minus()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.reflection.Getter.Getter(Method,boolean,boolean,boolean,boolean,Converter,int)": "JOHNZON-23 field access support\n", "org.apache.johnzon.core.TypeVisitor.visit(TypeVariable)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.AliasesOnField.setSuperLongProperty(String)": "JOHNZON-37 @JohnzonProperty\n", "org.apache.fleece.jaxrs.FleeceResource.fleece()": "initial import\n", "org.apache.johnzon.core.JsonPointerUtilTest.testEncodeFirstTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.getOrCreatePolymorphicConfig()": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.fleece.core.JsonGeneratorFacade.close()": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.map.LazyConverterMap.setUseShortISO8601Format(boolean)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.jaxrs.JsrProvider.JsrProvider()": "initial import\n", "org.apache.johnzon.jsonb.Types.getLocalDate()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonStringImpl.toString()": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObjectBody(Object,Collection)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.fleece.core.JsonLocationImpl.JsonLocationImpl(long,long,long)": "initial import\n", "org.apache.johnzon.mapper.MapperConfig.getVersion()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.test.apache.johnzon.mojo.SomeValue.get_999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map,JohnzonAdapterFactory,Supplier)": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.core.JsonParserTest.zeroByteInput()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.JohnzonAnyMappingTest.compare(String,String)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.mapper.access.MethodAccessMode.isIgnored(PropertyDescriptor)": "more global exclude rules for fields and methods\n", "org.apache.johnzon.core.JsonLongImpl.longValueExact()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.noContentExceptionDisabled()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.fleece.mapper.converter.CachedDelegateConverter.CachedDelegateConverter(Converter)": "initial import\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.serialize(Option,JsonGenerator,SerializationContext)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.mapper.NumberClass.isBool()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.MapperTest.getName()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.CharBufferThreadLocalProvider.newInstance(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.fleece.mapper.converter.CharacterConverter.toString(Character)": "initial import\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(JsonValue)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setPretty(boolean)": "pretty option for mapper and configurable jaxrs provider\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getThird()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonParserTest.rfc7159MustFailForNumber()": "Improved handling of trailing garbage\n", "org.apache.johnzon.jsonb.ReaderConverters.ReaderConverters(DecoratedType,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.fleece.core.JsonDoubleImpl.doubleValue()": "initial import\n", "org.apache.fleece.mapper.converter.ClassConverter.toString(Class)": "initial import\n", "org.apache.johnzon.mapper.DeduplicatedPerson.getMarriedTo()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.noContentExceptionAuto()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBshort(short)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.EnumTest.testSimpleEnumAccessModeBoth()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonProviderImpl.createMergePatch(JsonValue)": "JOHNZON-218 ensure to not allocate BufferStrategy.BufferProvider in JsonProviderImpl when not needed\n", "org.apache.johnzon.mapper.NullObjectWithMap.setMap(Map)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.core.JsonParserTest.fail32()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.ObjectTypeTest.modes()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.core.PatchValue.PatchValue(JsonPatchOperation,String,String,JsonValue)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.CommentsJsonStreamParserImpl.CommentsJsonStreamParserImpl(InputStream,int,BufferStrategy,BufferStrategy,boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.core.JsonProviderImpl.createPatchBuilder(JsonArray)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.MapperBuilder.setAccessModeFieldFilteringStrategyName(String)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.hashCode()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.toString()": "JOHNZON-239 transient support\n", "org.apache.johnzon.jsonschema.ValidationError.ValidationError(String,String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonLongImpl.bigIntegerValue()": "initial import\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(InputStream,Type)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testShort()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.superbiz.ModelBase.setAalist(Collection)": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.DynamicInstance(ContextResolver)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.mapper.MappingParserImpl.MappingParserImpl(MapperConfig,Mappings,JsonReader)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.fleece.mapper.Mapper.writeArray(T,Writer)": "initial import\n", "org.test.apache.johnzon.mojo.SomeValue.setSecondaryMetrics(SecondaryMetrics)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.Animal.setAge(int)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.TheObject.toString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonWriterFactoryImpl.createWriter(Writer)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.ensureStart()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.core.JsonParserStreamingTest.parserAndConcat(String)": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeItem(Object,Collection,JsonPointerTracker)": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.mapper.map.LazyConverterMap.entrySet()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWchar()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.reflection.Mappings.Setter(AccessMode,boolean,boolean,Type,Converter,int)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.Bike.setType(BikeType)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonPatchDiffTest.testAddValueToArray()": "JOHNZON-103 implemented JsonPatchDiff for JsonArray\n\nstill more tests needed\n", "org.apache.fleece.jaxrs.FleeceProviderTest.Fleece(String)": "initial import\n", "org.apache.johnzon.mapper.MapperBuilder.setTreatByteArrayAsBase64(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.FieldDecoratedType(Field,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setPrivateFieldWithPrivateAccessors(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.internal.ConverterAdapter.ConverterAdapter(Converter,Type)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.mapper.Bool.isBool()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.Mapper.doCloseOrFlush(JsonGenerator)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.TestDTOConverter.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.mapper.EnumTest.testAdvancedEnumAccessModeBoth()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonBaseStreamParser.resetValue()": "forgotten files from Hendrik Saly patch - sorry\n", "org.test.apache.johnzon.mojo.SomeValue.getBenchmark()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.Mapper.buildArrayWithComponentType(JsonArray,Class,Adapter)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.mapper.access.BaseAccessMode.getParameterConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPatchTest.containsOperation(JsonArray,JsonPatch,String,String)": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.core.JsonPatchTest.testMovingObjectMemberNonexistingFrom()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(double)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setGregorianCalendar(GregorianCalendar)": "complete support for DateFormat", "org.apache.johnzon.core.JsonNumberImpl.intValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.OrderTest.setAnIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.YeahConverter.toString(String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.mapper.CompositeWriter.findConverter()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.MappingParserImpl.createParameters(Mappings,JsonObject,JsonPointerTracker)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.core.JsonReaderImplTest.simple2BadBufferSize8()": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.fleece.core.JsonParserTest.fail66()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.JohnzonJsonbAdapter(JsonbAdapter)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.ObjectTypeTest.setFather(Dog)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.jsonb.JohnzonBuilder.createJsonBuilderFactory()": "use jsonp as base for jsonb and not johnzon internals\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_1000()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.AdapterTest.adaptToJson(DoorStatus)": "JOHNZON-184 fix TypeAwareAdapter support for other types than String\n", "org.apache.johnzon.core.JsonParserStreamingTest.testArrayStream()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.fleece.core.JsonArrayListener.onObject(Object)": "initial import\n", "org.apache.fleece.core.JsonParserFactoryImpl.getDefaultJsonParserImpl(Reader)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonb.AdapterTest.testSerialize()": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setUseJsRange(boolean)": "JOHNZON-243 support of long as requested by jsonb (js range for serialization + BigDecimal on Number for deserialization)\n", "org.apache.johnzon.jsonb.VATNumber.getValue()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_500(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getParameterNames()": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.mapper.TestClass.TestClass(TestClass)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImpl.parseArray(JsonReaderListener)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonb.BazAdapter.adaptFromJson(String)": "JOHNZON-282: add support for @JsonbTypeAdapter at class level (#53)\n\n* JOHNZON-282: add support for @JsonbTypeAdapter at class level\r\n\r\n* add test with adapter at root object\r\n\r\n* remove recursion\r\n", "org.apache.johnzon.mapper.Command.getAction()": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.createObjectBuilderMapSupport()": "JOHNZON-225 support of Map, Collection and arrays in initial data of object and array builders\n", "org.apache.fleece.jaxrs.FleeceResource.fleeces2()": "initial import\n", "org.apache.johnzon.mapper.Foo.hashCode()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.ObjectSerializationTest.getData()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,JsonValue)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.internal.Streams.reset()": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.fleece.core.JsonGeneratorImpl.noCheckWrite(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderTestMissingPath()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddJsonObject()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonParserTest.testUTF32LEStream()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.reflection.Getter.toString()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.mapper.MapperEnhancedTest.getCharValue()": "FLEECE-14 char handling in mapper\n", "org.apache.johnzon.mapper.MapperBuilder.setSerializeValueFilter(SerializeValueFilter)": "JOHNZON-115 add SerializeValueFilter\n", "org.apache.fleece.core.JsonReaderImplTest.unicode()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveArrayElement()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.fleece.core.JsonInMemoryParser.hasNext()": "initial import\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeMapBody(Map,Adapter)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(boolean)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(BigDecimal)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonInMemoryParser.Entry(Event,JsonValue)": "initial import\n", "org.apache.johnzon.mapper.Mapper.readObject(Reader,Type)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.core.PatchValue.toString()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonStreamParserImpl.parseHexDigit(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderReplaceMissingPath()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.MapperBuilder.setAdaptersDateTimeFormatter(DateTimeFormatter)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonStreamParserImpl.getBigDecimal()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.Mappings.isDeduplicateObjects()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.next()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jaxrs.xml.WadlDocumentToJson.createNode(Node)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserFactoryImpl.createInternalParser(Reader)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.getAnnotation(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.core.StringBuilderSingletonProvider.StringBuilderSingletonProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(Period)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setSupportsComments(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.JsonArrayImplTest.arrayIndex()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.johnzon.mapper.NullTest.compare(String,String)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.OrderTest.getThird()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBfloat()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonInMemoryParser.ArrayIterator(JsonArray)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPatchImpl.toJsonArray()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.fleece.core.LocationTest.failBytesInput()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonDefaultNames()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.PartialOrder.getIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.MappingParserImpl.buildArray(Type,JsonArray,Adapter,ObjectConverter,JsonPointerTracker,Type)": "Revert \"JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own) JsonbConfig injectable via Jax-RS API Better support for generics types Support for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes Support for default deserialization from string to enum Fix to dateformatting (date format was not properly used in deserialization)\"\n\nThis reverts commit 028a1644aac2e565fbed007ba85e8f0bede9061f.", "org.apache.johnzon.jsonb.JsonValueParserAdapter.JsonStringParserAdapter(JsonString)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.mapper.MapperBuilder.setDoCloseOnStreams(boolean)": "initial import\n", "org.apache.johnzon.jsonb.spi.ConstantInstance.ConstantInstance(T)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.toJsonNumber(int)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.core.JsonGeneratorImplTest.simpleArray()": "initial import\n", "org.apache.johnzon.jaxrs.JsrProvider.shouldThrowNoContentExceptionOnEmptyStreams()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.core.JsonObjectImpl.entrySet()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.DateWithCopyConverter.fromString(String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonb.order.PerHierarchyAndLexicographicalOrderFieldComparator.compare(String,String)": "JOHNZON-240 ensure child attributes are serialized after parent ones by default\n", "org.apache.johnzon.core.DummyBufferStrategy.newStringBuilderProvider(int)": "JOHNZON-217 toUpper on a Class name seems a bad idea...\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.Impl(String,Function,String)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.core.SerializationTest.jsonDouble()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.mapper.Cyclist.hashCode()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonb.JsonbAccessMode.validateAnnotations(Object,JsonbTypeAdapter,JsonbDateFormat,JsonbNumberFormat)": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.johnzon.core.JsonGeneratorImplTest.writeNumber()": "JOHNZON-267 ensure writeEnd can't be call when irrelevant\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetStringMissingKeyShouldThrowNullPointerException()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.fleece.mapper.MapperTest.getName()": "initial import\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.delegate()": "JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own)\nJsonbConfig injectable via Jax-RS API\nBetter support for generics types\nSupport for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes\nSupport for default deserialization from string to enum\nFix to dateformatting (date format was not properly used in deserialization)", "org.apache.johnzon.mapper.MapperConfig.getReverseAdapters()": "JOHNZON-226 register Adapters only once\n\nPrevious each MappingParserImpl has it's own set of ReverseAdapters.\nThey got rebuilt with every parsing (as this creates a new MappingParserImpl\neach time.\nI've now moved the ReverseAdapterMap to Config and populate it upfront.\n\nI'm not yet fully happy with the solution as the ReverseAdapterMap also\ncontains dynamically registered Adapters. So feel free to move the Map\nto a better place in the future.\n", "org.apache.johnzon.mapper.SuppressConversionMappingParser.readObject(JsonValue,Type)": "JOHNZON-72 removed unnecessary method from interface\n\nSuppress conversion for same instance via internal class\n", "org.apache.johnzon.mapper.ByteShort.getByteWA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonCharBufferStreamParser.mark()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.substr()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toStringCalendar(Calendar)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.MapperTest.getSuperLongProperty()": "JOHNZON-37 @JohnzonProperty\n", "org.apache.johnzon.mapper.MapperBuilder.setAccessModeName(String)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.jsonb.Book.getId()": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.jsonb.Option.hashCode()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonArrayImpl.add(int,JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.internal.AdapterKey.AdapterKey(Type,Type,boolean)": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.mapper.access.BaseAccessMode.ConfiguredFieldFilteringStrategy()": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.mapper.util.ArrayUtil.asList(char)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.PropertyNamingStrategyFactory.ConfigurableNamingStrategy(Function,char)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPatchDiffTest.containsOperation(JsonArray,JsonPatch,String,String)": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.fleece.core.JsonStreamParser.JsonStreamParser(InputStream,Charset,int)": "initial import\n", "org.apache.fleece.jaxrs.JsrProviderTest.bindEndpoint()": "initial import\n", "org.apache.johnzon.jsonschema.ValidationResult.setField(String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonObjectListener.onLong(long)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.LiteralTest.writeReadIterables()": "JOHNZON-28 Bad numeric conversion - thanks to Thiago Veronezi\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonDefaultNames()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonStreamParserImpl.handleEndArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.write(Object,Object)": "JOHNZON-102 cleaning CompositeDecoratedType usage to avoid coding errors\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.failOnMissingProp()": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.johnzon.jsonb.DefaultMappingTest.collections()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator,AccessMode,boolean,boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.mapper.MetaMapperTest.setCustom2(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getCalendar()": "complete support for DateFormat", "org.apache.johnzon.mapper.NullTest.getMap()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.POJOWithMixedFieldAccess.setValid(Boolean)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JsonbAccessMode.read(Object)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonGeneratorImpl.flushBuffer()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.Mapper.readArray()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.core.StringBuilderQueueProvider.StringBuilderQueueProvider(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchDiffTest.containsOperation(JsonArray,JsonPatch,String)": "JOHNZON-103 added tests for JsonPatchDiff ADD and REMOVE\n", "org.apache.johnzon.jsonb.JsonbReadTest.getDate()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(int)": "initial import\n", "org.apache.johnzon.mapper.internal.Streams.read(CharBuffer)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxItemsValidation.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.mapper.MapperTest.setS(String)": "initial import\n", "org.apache.johnzon.mapper.SimpleObject.SimpleObject(MyEnum)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.LiteralTest.isBool()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.maxStringNumberOK()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.SingletonProvider.newBuffer()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.testSerializeWithObjectConverter()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.mapper.SimpleAdapter.to(Bar)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonschema.spi.builtin.ContainsValidation.ContainsValidation(JsonSchemaValidatorFactory)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.addAll(JsonArrayBuilder)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.serialize(VATNumber,JsonGenerator,SerializationContext)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.Person.toString()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.bindEndpoint()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonGeneratorImpl.JsonGeneratorImpl(Writer,P,boolean,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.VATDeSer.serialize(VATNumber,JsonGenerator,SerializationContext)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.mapper.Mapper.readArray(InputStream,Class)": "initial import\n", "org.apache.fleece.mapper.LiteralTest.compare(String,String)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.Types.findParameterizedType(Type,Class)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.OptionDeSer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.SerializableValue.SerializableValue(String)": "JOHNZON-94 ignoring null and true/false serialization to ensure == works for these values\n", "org.apache.johnzon.jsonb.Types.setOptionalDouble(OptionalDouble)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.BufferStrategyFactory.newStringBuilderProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.TypeInstance.getValue()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.core.JsonObjectImplTest.getObject()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.jsonb.MyAdapter.adaptToJson(Switch)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.access.MethodWriter.getType()": "JOHNZON-23 field access support\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,String)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxItemsValidation.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonParserTest.fail29()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonProviderDelegate.createValue(BigInteger)": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.mapper.Mapper.isDedup(Type)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPropertyOrderStrategy(String)": "Revert \"JAX-RS MessageWriter/MessagerReader with Priority (so that user can define and provide his own) JsonbConfig injectable via Jax-RS API Better support for generics types Support for JsonbDeserializers/JsonbSerializers defined in interfaces or abstract classes Support for default deserialization from string to enum Fix to dateformatting (date format was not properly used in deserialization)\"\n\nThis reverts commit 028a1644aac2e565fbed007ba85e8f0bede9061f.", "org.apache.johnzon.mapper.SerializeValueFilterTest.customIgnore()": "JOHNZON-115 add SerializeValueFilter\n", "org.apache.johnzon.mapper.ObjectSerializationTest.Wrapper(Object)": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.core.SerializableValue.readResolve()": "JOHNZON-94 ignoring null and true/false serialization to ensure == works for these values\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.Bike(String,BikeType)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonPatchTest.testMovingArrayElementToObjectMember()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonArrayIterator.next()": "JOHNZON-226 iterator for JsonArrayImpl\n", "org.apache.fleece.core.JsonReaderImpl.onBigDecimal(BigDecimal)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonObjectListener.onNull()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.Mapper.convertTo(Type,String)": "using toString to write unknown types by default\n", "org.apache.johnzon.jsonschema.spi.builtin.UniqueItemsValidation.Impl(String,Function)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.StringBuilderQueueProvider.release(StringBuilder)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(Readable,Type)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jsonb.ClassConverterTest.adaptFromJson(Whole)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.isNull(JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue1()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.reflect.GenericArrayTypeImpl.hashCode()": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setInner(TestClass)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.converter.DateConverter.initialValue()": "initial import\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.getMimeType()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonURLURI()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.DogOwner.setDogs(List)": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.jsonb.AnySupportTest.hashCode()": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.fleece.core.JsonParserTest.fail63()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.internal.ConverterAdapter.from(A)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonProviderDelegate.createObjectBuilder()": "Minor performance improvements for writer and reader factories and for provider impl\n", "org.apache.johnzon.core.JsonPointerImpl.replace(JsonObject,JsonValue)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeEOL()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImplTest.simple2BadBufferSize8()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.apply(JsonValue)": "JOHNZON-226 avoid JsonValue.equals as it is slow\n\nWe rather use JsonValue.ValueType comparison instead.\n", "org.apache.johnzon.core.JsonPointerImpl.replace(JsonArray,JsonValue)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonb.DefaultMappingTest.pojos()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperVersionTest.getName()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonBaseStreamParser.handleQuote(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWboolean()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonObjectImpl.getBoolean(String)": "initial import\n", "org.apache.fleece.core.JsonStreamParser.overflowIfNeeded()": "initial import\n", "org.apache.johnzon.core.BufferStrategyFactory.CharBufferByInstanceProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeNull(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.NullTest.getNullArray()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(byte)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonArrayImpl.value(int,Class)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.apply(JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.JsonReaderImplTest.unicodeFailAscii()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonProviderDelegate.createMergeDiff(JsonValue,JsonValue)": "JOHNZON-103 add createMergeDiff handling\n", "org.apache.johnzon.jaxrs.NoContentExceptionHandlerReader.NoContentExceptionHandlerReader(MessageBodyReader)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.mapper.MappingParserImpl.toValue(Object,JsonValue,Adapter,Adapter,Type,ObjectConverter,JsonPointerTracker,Type)": "JOHNZON-164 proper handling of conversion Exceptions\n", "org.apache.fleece.mapper.MapperEnhancedTest.buildTestClassInstance()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.Animal.equals(Object)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.MappingParserImpl.fromString(String)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.johnzon.jsonb.MoreTests.serialize(String,JsonGenerator,SerializationContext)": "Fix after review\n", "org.apache.johnzon.mapper.Mapper.readValue()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getOffsetDateTime()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.test.apache.johnzon.mojo.SomeValue.getWarmupTime()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.createArrayBuilder()": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.Mappings.Getter(AccessMode,boolean,boolean,boolean,boolean,Adapter,int)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.arrayString()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.core.JsonMergeBatchDiffTest.testAddDiff()": "JOHNZON-103 add createMergeDiff handling\n", "org.apache.johnzon.jsonb.JsonbTransientTest.illegalConfig()": "JOHNZON-239 transient support\n", "org.apache.johnzon.jsonb.ArrayHolder.getInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.core.AbstractJsonFactory.getBufferProvider()": "JOHNZON-217 toUpper on a Class name seems a bad idea...\n", "org.apache.fleece.core.JsonProviderImpl.createParserFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.ObjectIterator.hasNext()": "Fixed some minor possible bugs reported by FindBugs\n", "org.apache.johnzon.core.JsonPointerTest.testAddJsonStructureWithEmptyJsonPointer()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.numericComparison(BiPredicate,JsonValue,JohnzonJsonLogic,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getValueStream()": "completing previous commit, some missed case\n", "org.apache.johnzon.core.JsonObjectImpl.toString()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.johnzon.core.ParameterizedTypeImpl.ParameterizedTypeImpl(Type,Type[])": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.test.apache.johnzon.mojo.SomeValue.set_1000(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonStreamParserImpl.getBigDecimal()": "JOHNZON-265 some protection to cast a Bignumber as a long\n", "org.apache.johnzon.jsonb.AnnotationOrderTest.setPersonAge(int)": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(JsonObjectBuilder)": "initial import\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setSoma(SortedMap)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.maxStringStringOK()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonPatchDiffTest.containsOperation(JsonArray,JsonPatch,String,JsonValue)": "JOHNZON-103 added tests for JsonPatchDiff ADD and REMOVE\n", "org.apache.johnzon.core.JsonPatchTest.testTestingObjectMemberValueSuccess()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.varArrayInt()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.PolyBarAdapter.adaptToJson(TypeInstance)": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.johnzon.mapper.CircularExceptionTest.getName()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.isWriteable(Class,Type,Annotation,MediaType)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.Mapper.doWriteHandlingNullObject(Object,JsonGenerator)": "oops, fixing the build\n", "org.apache.fleece.core.JsonReaderImpl.readObject()": "initial import\n", "org.apache.johnzon.mapper.TheObject.getNested()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.equalsNoCoercion()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.BufferCache.initialValue()": "initial import\n", "javax.json.bind.JsonbConfig.getProperty(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.MapBuilderReader.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.SerializerTest.nullValuesInList()": "add tests for null values in arrays and lists\n", "org.apache.johnzon.mapper.reflection.Mappings.MapUnwrapperWriter(Map,String)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setPrivateFieldWithPublicAccessors(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.websocket.mapper.JohnzonTextDecoder.decode(Reader)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.from(A)": "renaming jsonb adapter methods\n", "org.apache.johnzon.jaxrs.WildcardJohnzonProvider.WildcardJohnzonProvider(Mapper,Collection)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.converter.Stringer.to(String)": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.jaxrs.WildcardJohnzonProvider.WildcardJohnzonProvider()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.fleece.core.JsonCharBufferStreamParser.readNextChar()": "removing several logs, less we have better it is for perf but mainly for readability\n", "org.apache.johnzon.mapper.MapperTest.setValue(String)": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.johnzon.jsonb.DefaultMappingTest.order()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithNullShouldThrowNullPointerException()": "Implemented JsonPointer\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writePrimitives(Object)": "JOHNZON-241 float can't be serialized as double\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,double)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(BigInteger)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.User.getName()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.GoldCustomer.setRating(int)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonPatchDiffTest.testDiffMoveValue()": "JOHNZON-103 added tests for REPLACE\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetStringWithDefaultShouldReturnDefault()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.core.JsonParserStreamingTest.testValueStreamForObjects()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.mapper.LiteralTest.getBg()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonJsonb.JohnzonJsonb(Mapper,boolean,Consumer)": "ensure jsonb instance does not track a lot of references cause it is an anonymous class\n", "org.apache.fleece.mapper.reflection.Mappings.Getter(Method,boolean,boolean,boolean,boolean,Converter,int)": "caching a bit more reflection for objects, this can be reworked to be more adapted BTW\n", "org.apache.johnzon.mapper.access.Meta.getIndirectAnnotation(Class,Supplier,Supplier)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.mapToDouble(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.extension.JsonValueReader.getResult()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.johnzons1()": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceMessageBodyWriter.FleeceMessageBodyWriter(Mapper)": "initial import\n", "org.apache.fleece.core.JsonReaderImplTest.parseSmall3KbJsonFile()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.NumberClass.hashCode()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.TestClass.getBd()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImpl.readArray()": "initial import\n", "org.apache.johnzon.core.SerializablePrimitives.getValueType()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.mapper.Mappings.findCollectionMapping(ParameterizedType,Type)": "aligning code from AccessMode and Generics to avoid duplication\n", "org.apache.johnzon.core.JsonGeneratorImplTest.unexpectedWriteEnd()": "JOHNZON-267 ensure writeEnd can't be call when irrelevant\n", "org.apache.johnzon.jsonb.UUIDSerializer.serialize(UUID,JsonGenerator,SerializationContext)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.modulo()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.access.MethodWriter.MethodWriter(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.fleece.core.JsonParserTest.fail39()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.mapper.converter.DateConverter.fromString(String)": "initial import\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.getTo()": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.johnzon.mapper.Mappings.isNillable()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.fromLocalDateTime(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.CircularObjectsTest.getMarriedTo()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.primitive()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.JsonLongImpl.longValue()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.reflection.Mappings.Setter(Method,boolean,Type,Converter,int)": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail25()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.ObjectTypeTest.setDogs(List)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.fleece.core.JsonReaderImplTest.emptyZeroCharBuffersize()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.createFor(JsonValue,Supplier)": "Fix after review\n", "org.apache.johnzon.jsonschema.regex.JsRegexTest.valid()": "provide a Joni integration for jsonschema when nashorn will be completely dropped - todo: check if we shade it with minimal=true\n", "org.apache.johnzon.jsonb.StatusAdapter.adaptToJson(DoorStatus)": "JOHNZON-184 fix TypeAwareAdapter support for other types than String\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.out(AsyncResponse)": "JOHNZON-133 ensure we test correctly jaxrs types and not just assume the signature is right\n", "org.apache.fleece.mapper.Mapper.convertFrom(Class,T)": "initial import\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.handleArray(Writer,String,Map,JsonValue,String,String,int,Collection)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonDoubleImpl.toString()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(String,Type)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.toErrors(Stream)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonParserTest.escapeStart2()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.Mapper.writeArrayAsString(T)": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.fleece.jaxrs.FleeceProviderTest.asParam()": "initial import\n", "org.apache.johnzon.core.JsonParserTest.numbers()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.shortAndByteBase64()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.JsonbAccessMode.WriterConverters(DecoratedType)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.MappingParserImpl.createParameters(Mappings,JsonObject)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.Mapper.stream(InputStream)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.jsonb.Model.setValue(String)": "JOHNZON-250 private accessors hide public fields\n", "org.apache.fleece.jaxrs.FleeceProvider.FleeceProvider()": "initial import\n", "org.apache.johnzon.jsonb.TransientTest.setInstance(String)": "JOHNZON-239 transient support\n", "org.test.apache.johnzon.mojo.PrimaryMetric.setScoreConfidence(List)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWint()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,JsonArrayBuilder)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.CircularObjectsTest.testSimpleCyclicPerson()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.getName()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.mapper.Mappings.putOrGetClassMapping(Type,ClassMapping)": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.jsonb.JsonbTypesTest.hashCode()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.primitive()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.toErrors(Stream)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.AdapterTest.setType(String)": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.ObjectConverterTest.getFirstName()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonParserTest.fail41()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.JsonbAccessMode.orderComparator(Class)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "javax.json.bind.JsonbConfig.withSerializers(JsonbSerializer[])": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.Person.setPersonGender(String)": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.getaDouble()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.jsonb.test.JsonbRule.evaluate()": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.access.MethodWriter.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.MapperEnhancedTest.compare(String,String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Beagle.getColor()": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteIterable(Iterable,Collection)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.core.SerializationTest.primitiveInObject()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.core.JsonReaderImplTest.emptyStream()": "adding NothingToRead exception\n", "org.apache.johnzon.jsonb.JohnsonJsonb.unwrapOptional(Object)": "simple value handling\n", "org.apache.fleece.core.JsonArrayImpl.getJsonArray(int)": "initial import\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getSose()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImpl.flush()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.NumberClass.setByteNumber(byte)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.EnumTest.newTestMapperBuilder()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddStringNull()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonParserTest.missingClosingObject()": "simple value handling\n", "org.test.apache.johnzon.mojo.SomeValue.getWarmupIterations()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.converter.TimestampAdapterTest.getDate()": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.fleece.core.JsonBaseStreamParser.handleLiteral(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.TypeVisitor.visit(Type)": "Fix after review\n", "org.apache.johnzon.mapper.MapperConfig.isPrettyPrint()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.MappingParserImpl.mapCollection(Mappings,JsonArray,Adapter)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.add(String,JsonValue)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.ByteShort.setNumByteA(byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.TheConverter.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.core.JsonPointerImpl.validateJsonPointer(JsonValue,int)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.multipleOf()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.from(OriginalType)": "fix JsonbAdapter gerneric types\n\nIt's now 1:1 with the spec.\n", "org.apache.johnzon.mapper.LiteralTest.getLongNumber()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.Mapper.mapCollection(Mappings,JsonArray)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(boolean)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getParameterTypes()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonNumberImpl.bigIntegerValueExact()": "initial import\n", "org.apache.johnzon.jsonb.OrderTest.getFirst()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.MapBuilderReader.getClassOrPackageAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setPolymorphicTypeLoader(Map)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.mapper.reflection.MapBuilderReader.findConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.MapperTest.getLongnumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImpl.checkArray()": "fix pretty printing\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.JohnzonDeserializationContext(MappingParser)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(OutputStream,Charset,BufferStrategy,ConcurrentMap)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.bufferOverFlow2()": "remove unused code\n", "org.apache.johnzon.jsonb.EnumHolder.toString()": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_99999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.setValue(int,JsonValue)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.core.JsonProviderImpl.createParser(InputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.MapperVersionTest.test()": "JOHNZON-199 split unit test to get better feedback for each assert\n", "org.apache.johnzon.core.JsonParserTest.escaping()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWholeDocument()": "Implemented JsonPointer\n", "org.apache.fleece.mapper.MapperEnhancedTests.setDates(List)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonParserTest.invalidArrayMissingKeyname()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.johnzon.core.BrokenDefaultTest.read()": "adding a broken test to show why previous commit broke the buffer strategies\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.getAnnotation(Class)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonGeneratorImplTest.boolLiteralArray()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getLocalTime()": "JOHNZON-196 support of LocalTime in JSON-B\n", "org.apache.johnzon.mapper.ObjectTypeTest.isHairCut()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.mapper.ClassToWrite.getName()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeKey(String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonArrayListener.onNull()": "initial import\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.next()": "completing previous commit, some missed case\n", "org.apache.johnzon.jsonb.JsonbAccessMode.newAdapter(Class)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonPatchImpl.toJson()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.johnzon.jaxrs.Johnzon.getName()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addLocalDateTimeConverter(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.Mappings.Getter(AccessMode,boolean,boolean,boolean,boolean,MapperConverter,ObjectConverter,int)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.core.JsonPatchTest.testRemoveObjectElementNonexistentTarget()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.jsonschema.ValidationResult.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeValue(Class,boolean,boolean,boolean,boolean,Adapter,String,Object,ObjectConverter,Collection,JsonPointerTracker)": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.jsonb.WriterConverters.WriterConverters(DecoratedType)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonPatchTest.testReplacingArrayElementPlainArray()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonGeneratorImpl.writeCachedOrEscape(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.maxItems()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.isIgnored(Class)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.mapper.NumberSerializationTest.toJson()": "JOHNZON-243 support of long as requested by jsonb (js range for serialization + BigDecimal on Number for deserialization)\n", "org.apache.johnzon.core.JohnzonJsonParserImpl.next()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.jsonb.PartialModel.getThird()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonCharBufferStreamParser.JsonCharBufferStreamParser(Reader,int,int)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonb.ClassConverterTest.adaptToJson(Switch)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(String,Function,Predicate)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.core.JsonParserTest.testUTF8BEBOMStream()": "JOHNZON-16 Fix BOM detection for UTF-8, new testcase for stream that throws an exception by Thiago Veronezi\n", "org.apache.fleece.core.Strings.toUnicode(char)": "initial import\n", "org.apache.johnzon.mapper.reflection.Mappings.handleVirtualObject(Collection,JohnzonVirtualObject,Map,Map,Map,Map)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.mapper.TheObject.getCollectionWrapper()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.PartialOrder.setStringInstance(String)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.CompositeReader.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.core.JsonStreamParser.hasNext()": "adding checkstyle\n", "org.apache.johnzon.mapper.converter.CachedDelegateConverter.toString(T)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.VIPCustomer.VIPCustomer(String,String,Double)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.PersonConverter.fromString(String)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setIgnores(String)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonPointerUtilTest.testDecodeNoTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.mapper.internal.Streams.append(char)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.fleece.mapper.converter.EnumConverterTest.fromEnumToString()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.newJsonGeneratorImpl(Writer)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.spi.builtin.JsRegex.JsRegex(String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.Mapper.writeArray(Collection,OutputStream)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail7()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBdouble()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonParserFactoryImpl.getDefaultJsonParserImpl(Reader)": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.JsonbJaxrsProvider(Collection)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.mapper.Mapper.createParameters(Mappings,JsonObject)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.equals(Object)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.MapperTest.mapToArrayOfJsonObjects()": "JOHNZON-206: Tests for nested toStructure mapping\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.Foo.hashCode()": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithJsonArrayInvalidIndex()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.setCyclists(List)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.core.ThreadLocalBufferCache.getCache()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonInMemoryParser.isNotTooLong()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderCopy()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.test.apache.johnzon.mojo.SomeValue.setBenchmark(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.Types.setOptionalLong(OptionalLong)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jaxrs.JohnzonResource.write(OutputStream)": "JOHNZON-57 ensuring to use signature type to test using reference checks in our providers\n", "org.apache.fleece.core.JsonReaderImpl.subObject()": "initial import\n", "org.apache.johnzon.core.ObjectIterator.ObjectIterator(JsonObject)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.modes()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.JsonbWriteTest.list()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.cat()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonGeneratorImplTest.writeBoolean()": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeObject(Object,JsonGenerator)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.JsonStringImpl.getValueType()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.DeduplicatedPerson.getName()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.HStack.push(T)": "fix pretty printing\n", "org.apache.johnzon.mapper.internal.Streams.read(char)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.core.JsonObjectImpl.hashCode()": "Catching exceptions is not nice and does not perform very well\n", "org.apache.fleece.core.JsonWriterFactoryImpl.createWriter(Writer)": "initial import\n", "org.apache.johnzon.mapper.MapperPerformanceTest.byteArrayBase64WriteTest()": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.core.JsonParserFactoryImpl.JsonParserFactoryImpl(Map)": "fixing config warnings\n", "org.test.apache.johnzon.mojo.SomeValue.getScoreConfidence()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.NullTest.setMap(Map)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.core.JsonParserTest.fail36()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImplTest.unicode4Bytes()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.CharClass.setCharValue(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.jsonbconfigProvider()": "Test fix - JsonBindingProvider added to secondary server to not influence pre existing tests", "org.apache.fleece.core.JsonArrayBuilderImplTest.addJOBuilderNpeIfNull()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.core.JsonInMemoryParser.getLocation()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.jaxrs.DelegateProvider.getSize(T,Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.BaseAccessMode.fieldComparator(Class)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.getRating()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.RFC4627AwareInputStreamReader.RFC4627AwareInputStreamReader(InputStream)": "JOHNZON-284 respect user charset when provided\n", "org.apache.fleece.jaxrs.WadlDocumentMessageBodyWriter.writeTo(Document,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "Document to json @Provider mainly dedicated to wadls (not defined behavior in other cases)\n", "org.apache.johnzon.core.JsonReaderImplTest.testGrowingStringWithDiferentBufferSizes()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.johnzon.mapper.MapperConfig.isFailOnUnknown()": "JOHNZON-109 fail on unknown properties support\n", "org.apache.johnzon.jsonb.JsonbReadTest.simple()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.HolderWithMultipleBounds.setInstance(List)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.core.JsonStreamParserImpl.uexio(IOException)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(long)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setAccessModeFieldFilteringStrategy(BaseAccessMode)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.mapper.ObjectSerializationTest.stringBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.mapper.LiteralTest.writeReadNumbers()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.mapper.MapperTest.readEmptyObject()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail58()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonParserTest.literalFailChecksTrue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonJsonb.isValueProvider(Reader)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.test.apache.johnzon.mojo.SomeValue.get_500()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.core.SerializablePrimitives.SerializationReplacement(String)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.fleece.core.JsonLongImpl.intValue()": "initial import\n", "org.apache.johnzon.websocket.endpoint.JsrClientEndpointImpl.on(JsonObject)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,boolean)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonArrayImpl.set(int,JsonValue)": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail42()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.getName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.SuppressConversionMappingParser.readObject(Type)": "JOHNZON-72 removed unnecessary method from interface\n\nSuppress conversion for same instance via internal class\n", "org.apache.johnzon.mapper.NullTest.writeArrayWithNullWithinType()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.core.JsonParserTest.simpleInMemory()": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.doToPointer(String)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.JsonGeneratorFacade.writeStartArray(String)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.jsonb.JsonbWriteTest.map()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.ArrayContainer.getbString()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.number.Validator.validateByte(int)": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.JsonNumberParserAdapter(JsonNumber)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.core.JsonWriterImpl.writeObject(JsonObject)": "initial import\n", "org.test.apache.johnzon.mojo.SomeValue.setThreads(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.PartialModel.getSecond()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jaxrs.DelegateProvider.isReadable(Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStreamParserImpl.handleEndObject()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.findConverter()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonb.reflect.GenericArrayTypeImpl.toString()": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.jsonb.OrderTest.setAnotherIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.maxImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.osgi.cdi.RegisterCdiExtension.tryLoadingCdi()": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.mapper.MapperTest.getNan()": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(BigDecimal)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mappings.getClassMapping(Type)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.findObjectConverterReader()": "JOHNZON-102 cleaning CompositeDecoratedType usage to avoid coding errors\n", "org.apache.fleece.core.JsonReaderImplTest.specialWithStringReader()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.Dummy2Adapter.adaptToJson(Dummy2)": "JOHNZON-224 support JsonValue in adapters (parsing side)\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.hasNext()": "completing previous commit, some missed case\n", "org.apache.fleece.mapper.TestClass.TestClass(TestClass)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.JsonbAccessMode.toConverter(Types,Type,JsonbTypeAdapter,JsonbDateFormat,JsonbNumberFormat)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.MapperTest.equals(Object)": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.mapper.MapperConfig.getObjectConverters()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.jsonb.Types.getInstant()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setOptionalString(Optional)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonschema.ValidationError.setMessage(String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.Mappings.CollectionMapping(boolean,Class,Type)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.JsonbDateConverter(JsonbDateFormat)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.Option.toString()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(double)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonParserTest.fail5()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.MinimumValidation.isValid(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObject(Object,JsonGenerator,boolean,Collection,JsonPointerTracker)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.core.JsonLocationImpl.getLineNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.AnEntity.getId()": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue5()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.GenericsTest.missingGeneric()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jsonb.ClassConverterTest.deserialize(JsonParser,DeserializationContext,Type)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonGeneratorImplTest.testCreateGenerator()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.writeTo(T,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.JsonGeneratorImpl.justWrite(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.CharBufferSingletonProvider.CharBufferSingletonProvider(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonJsonb.close()": "ensure jsonb instance does not track a lot of references cause it is an anonymous class\n", "org.apache.johnzon.core.JsonInMemoryParser.hasNext()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPatchTest.testTestingObjectMemberValueFailed()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.ArrayIterator.next()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toReader(Readable)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.mapper.access.CompositeWriter.write(Object,Object)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(ZonedDateTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonNumberImpl.intValueExact()": "initial import\n", "org.apache.fleece.mapper.Mapper.findConverter(Type)": "using toString to write unknown types by default\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setBufferStrategy(String)": "JOHNZON-30 basic johnzon jsonp component config in our mapper/jaxrs provider\n", "org.apache.fleece.mapper.MapperBuilder.build()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,BigDecimal)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.Beagle.setColor(String)": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.jsonb.PartialOrder.setIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.core.JsonProviderDelegate.createObjectBuilder()": "getting rid of some System properties configuring the factory\n", "org.apache.fleece.mapper.MapperBuilder.setReaderFactory(JsonReaderFactory)": "initial import\n", "org.apache.johnzon.core.JsonReaderImpl.readValue()": "simple value handling\n", "org.apache.johnzon.core.JsonGeneratorImplTest.numbers2()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ArrayContainer.getBboolean()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.Mappings.CompositeWriter(AccessMode[])": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.CircularExceptionTest.testCyclicPerson()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.fleece.core.JsonBaseStreamParser.getLocation()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.JsonLongImpl.isIntegral()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Types.setLocalDate(LocalDate)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeStartObject(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.NullTest.writeNullObjectDefaultMap()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.getLong()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.mapper.Mapper.toString(Object)": "using toString to write unknown types by default\n", "org.apache.johnzon.core.JsonParserTest.objectPrependedByGarbage7()": "Improved handling of trailing garbage\n", "org.apache.johnzon.mapper.LiteralTest.readWhenUseBigDecimalForFloats()": "JOHNZON-117 patch from Kimmel Tamas to enhance our number handling in generic structures (map etc), thanks a lot\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,AccessMode,boolean,boolean,Charset,Collection,boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonschema.spi.builtin.MultipleOfValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.TheClass.isFoo()": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getType()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.ClassToWrite.getInteger()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.MetaMapperTest.setName(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeStartArray(String)": "Fixed some minor possible bugs reported by FindBugs\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setZoneId(ZoneId)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MapperTest.getIntegerVal()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithTargetNull()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonWriterImpl.checkClosed()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonGeneratorImpl.writeEscaped0(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.setName(String)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.test.apache.johnzon.mojo.SomeValue.getThreads()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.websocket.endpoint.ClientEndpointImpl.on(Message)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.fleece.mapper.LiteralTest.getFloatNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonGeneratorImpl.newJsonGenerator(Writer,P,boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findConverter()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.JsonGeneratorImpl.key(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.toArray()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.access.MethodAccessMode.isIgnored(String)": "more global exclude rules for fields and methods\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getLong()": "completing previous commit, some missed case\n", "org.apache.fleece.jaxrs.FleeceMessageBodyWriter.writeTo(T,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail10()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonBaseStreamParser.getString()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.User.setCustom2(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.model.packageformat.FormatFromPackageModel.getInstance()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.Value.getName()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodDecoratedType(Method)": "JOHNZON-23 field access support\n", "org.apache.johnzon.core.JsonReaderImplTest.badTypeObject()": "JOHNZON-111 ensure to fail with a jsonexception when reading a wrong type of value with jsonreader, thanks Michele Vivoda\n", "org.apache.johnzon.mapper.CycleRace.equals(Object)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.jsonb.Types.getOptionalInt()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonReaderImpl.close()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.SomeValue.get_9999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.core.JsonDoubleImpl.getValueType()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeCachedOrEscape(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.BarAdapter.adaptFromJson(Bar)": "fix JsonbAdapter gerneric types\n\nIt's now 1:1 with the spec.\n", "org.apache.johnzon.core.JsonPointerTest.testAddObjectMemberToNestedObject()": "JOHNZON-95 fixed JsonPointer#add for complex objects\n", "org.apache.johnzon.jsonb.FooPassthroughSerializer.serialize(Named,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.johnzon.jsonb.OrderTest.deserializationRespectsOrderToo()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.getName()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setOptionalInt(OptionalInt)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MyMap.addString(String,String)": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.mapper.TheObject.setIntegerVal(Integer)": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.FieldReader.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,BufferStrategy,ConcurrentMap)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.DogOwner.getDogs()": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeObject(Object)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.jaxrs.Fleece.setName(String)": "initial import\n", "org.apache.johnzon.jsonb.Types.getDate()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.OrderTest.setInstance(StringHolder)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.core.JsonArrayImpl.getBoolean(int,boolean)": "initial import\n", "org.apache.johnzon.mapper.ByteShort.getNumByteA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.unbind()": "Test fix - JsonBindingProvider added to secondary server to not influence pre existing tests", "org.apache.johnzon.core.JsonProviderImpl.createValue(String)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.mapper.converter.CharacterConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.HolderHolder.getInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.core.JsonLocationImpl.getLineNumber()": "initial import\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getDuration()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.ContainsValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPatchTest.testAddArrayIndexOutOfBounds()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.internal.Streams.write(byte)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.accept(File,String)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.core.JsonProviderDelegate.createBuilderFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.MapperBuilder.setSupportEnumContainerDeserialization(boolean)": "JOHNZON-255 JOHNZON-256 JOHNZON-257 JOHNZON-258 JOHNZON-259 disable enummap/enumset deserialization by default (jsonb tck) + support some container impl deserialization without falling back on the generic interface\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.findWriters(Class)": "adding FieldAndMethodAccessMode access mode\n", "org.apache.johnzon.jsonb.extension.JsonValueWriter.getResult()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.adaptToJson(UUID)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonStreamParserImpl.cust(String)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeStartObject()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointer.replace(JsonStructure,JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jaxrs.JsrProvider.JsrProvider()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.WildcardListHolder.getInstance()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.mapper.ReaderHandler.isJsonLong(JsonNumber)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.JsonWriterImplTest.trueValueWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.fleece.core.JsonProviderDelegate.createWriter(OutputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addJABuilderNpeIfNull()": "renamed fleece to johnzon\n", "javax.json.bind.JsonbConfig.setProperty(String,Object)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.Mappings.Getter(AccessMode,boolean,boolean,boolean,boolean,MapperConverter,ObjectConverter,int,String)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.mapper.MapperTest.getTheCollection()": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.varObjectPtr()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(OutputStream,BufferStrategy,ConcurrentMap)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.Cached.get()": "JOHNZON-218 ensure to not allocate BufferStrategy.BufferProvider in JsonProviderImpl when not needed\n", "org.apache.fleece.mapper.NumberClass.getIntNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.Mappings.Mappings(MapperConfig)": "JOHNZON-71 moved attributeOrder to MapperConfig\n", "org.apache.johnzon.mapper.Mappings.Getter(AccessMode,boolean,boolean,boolean,boolean,boolean,MapperConverter,ObjectConverter,int,String)": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.testSerializeHierarchyOne()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.access.MethodAccessMode.findWriters(Class)": "more global exclude rules for fields and methods\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.DateHolder.setInstance(Date)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.JPATest.getDate()": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeNull(String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.MoreTests.serialize(VATNumber,JsonGenerator,SerializationContext)": "Fix after review\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeStartArray(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.converter.LocaleConverter.from(Locale)": "JOHNZON-66 support of Locale\n", "org.apache.johnzon.jsonb.JohnzonJsonb.isArray(Type)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.core.JsonStreamParserImpl.current()": "JOHNZON-157 don't use an actual state as default in our parsers to avoid errors when caller assumes the state (event)\n", "org.apache.johnzon.mapper.MapperTest.mapToJsonValue()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.LiteralTest.setFloatNumber(float)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStreamParserImpl.getLong()": "Remove unnecessary code for minor speed improvement, replace Integer (object) with int (primitive)\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getBlong()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonNumberImpl.JsonNumberImpl(BigDecimal)": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.jsonb.PropertyNamingStrategyFactoryTest.points()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.reflect.GenericArrayTypeImpl.getGenericComponentType()": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.fleece.core.JsonArrayListener.onTrue()": "initial import\n", "org.apache.johnzon.jsonb.JohnzonBuilder.fromCalendar(String,Function)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.access.FieldAccessMode.getAnnotation(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.core.JsonWriterImplTest.falseValueWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.getArrayLength(Object)": "JOHNZON-226 performance: avoid Array.getLength\n\nArray.getLength performs rather poor as it doesn't get inlined\nby the JIT due to heavy reflection.\n", "javax.json.bind.JsonbConfig.withEncoding(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.test(String,String)": "JOHNZON-95 initial JsonPatchBuilder impl\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeEnd()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.LocalDateAdapter.LocalDateAdapter()": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.core.Types.visit(Class)": "Fix after review\n", "org.apache.johnzon.mapper.internal.Streams.write(int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.addOperation(JsonPatchImpl)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonPointerImpl.JsonPointerImpl(JsonProvider,String)": "JOHNZON-274 ensure JsonPatch respects requested path for arrays and objects\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,BigDecimal)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonParserTest.fail14()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doConvertFrom(T,Adapter)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.mapper.MapperEnhancedTest.TestClass()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.PersonConverter.toString(Person)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonProviderTest.testJsonCreateValueDouble()": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveFieldMemberWithObjectAndArray()": "Fix issues related to JsonPointer remove operation\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategyTest.isFoo()": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.fleece.core.JsonBaseStreamParser.read(int)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueJsonArrayElement()": "Implemented JsonPointer\n", "org.apache.fleece.mapper.MapperEnhancedTest.getQueue()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteIterable(Iterable)": "JOHNZON-71 move writeArray to MappingGeneratorImpl\n", "org.apache.johnzon.mapper.access.BaseAccessMode.getParameterTypes()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonParserTest.literalFailChecksTrue()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWdouble()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.mapper.Converted.getS()": "initial import\n", "org.apache.fleece.core.JsonReaderImpl.onKey(String)": "initial import\n", "org.apache.johnzon.jsonb.SerializerTest.setName(String)": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.mapper.Mappings.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter,Getter,Method,Field,Method)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.core.JsonParserTest.testUTF32BEBOMStream()": "JOHNZON-16 Fix BOM detection for UTF-8, new testcase for stream that throws an exception by Thiago Veronezi\n", "org.apache.johnzon.jsonb.factory.CdiInstance.release()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.internal.Streams.write(String,int,int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.core.BufferStrategyFactory.StringBuilderQueueProvider(int)": "remove unused StringBuilder BufferProvider\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyWriter.JohnzonMessageBodyWriter(Mapper,Collection)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "javax.json.bind.JsonbConfig.withDeserializers(JsonbDeserializer[])": "ensure JsonbConfig accumulate varargs params instead of overriding them\n", "org.apache.johnzon.mapper.Mappings.Mappings(Comparator,AccessMode,int,ConcurrentMap)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.Types.setPeriod(Period)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.mapper.MapperPerformanceTest.intArrayWriteTest()": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.mapper.TestClass.getInner()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.PartialOrder.getAnIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.AttributesOrderingWithCounterClass.getFirst()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.MoreTests.VATNumber(long)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.Dog.getName()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.core.JsonParserTest.fail17()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Foo.setValues(Map)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.mapper.ObjectTypeTest.setHairCut(boolean)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.mapper.ObjectTypeTest.setColor(String)": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.core.util.ArrayUtil.get(int)": "JOHNZON-226 use own Array.length\n", "org.apache.johnzon.mapper.MapperTest.getList()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.Johnzon(String)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.MapperBuilder.setSupportGetterForCollections(boolean)": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.list()": "JOHNZON-133 ensure we test correctly jaxrs types and not just assume the signature is right\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(LocalTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.mapper.MapperEnhancedTests.writeTestclass()": "using toString to write unknown types by default\n", "org.apache.johnzon.jsonb.extras.polymorphism.DeSerializer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.mapper.internal.Streams.available()": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setAttributeOrder(Comparator)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.JsonPointerImpl.getArrayIndex(String,JsonArray,boolean)": "Added possibility to use minus as array index for the remove operation.\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage6()": "Improved handling of trailing garbage\n", "org.apache.johnzon.jsonb.extras.polymorphism.DeSerializer.eatStartObject(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.mapper.reflection.ClassMapping.ClassMapping(Class,Map,Map,boolean,boolean)": "avoiding npe + checkstyle\n", "org.apache.johnzon.mapper.MapperTest.tooLongIntAndLong()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.core.JsonReaderImpl.JsonReaderImpl(JsonParser)": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(double)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.reflection.Generics.resolveParameterizedType(Type,Class)": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.dontFailOnMissingPropsIfConfiguredAsSuch()": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.johnzon.mapper.MapperConfig.getTypeLoader()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.fleece.core.JsonArrayBuilderImpl.npe()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.SomeDocument.setContent(byte)": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(Writer,JsonPrettyGeneratorImpl,boolean,String,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.AdapterTest.adaptFromJson(Integer)": "JOHNZON-184 fix TypeAwareAdapter support for other types than String\n", "org.apache.johnzon.jsonb.CompositePOJO.getCompositeId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonStreamParserImpl.uexc(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mappings.Setter(AccessMode,boolean,boolean,Type,MapperConverter,int)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.access.MethodAccessMode.getMethod()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.reflection.Mappings.Setter(Method,boolean,Type,Converter,int)": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonb.DateFormatTest.setInstance(Date)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.AttributesOrderingWithCounterClass.getSecond()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.DefaultMappingTest.POJOWithoutDefaultArgConstructor(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonArrayImpl.equals(Object)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonLongImpl.longValueExact()": "initial import\n", "org.apache.johnzon.core.JsonParserTest.bufferOverFlow()": "remove unused code\n", "org.apache.johnzon.mapper.internal.ConverterAdapter.getFrom()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonDoubleImpl.bigDecimalValue()": "initial import\n", "org.apache.johnzon.mapper.DBAccessPoodleConverter.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-72 added test for ObjectConverter\n", "org.apache.johnzon.core.JsonNumberTest.testBigInteger()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object,Type)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.jsonb.AnimalListDeserializer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.core.JsonParserTest.fail29()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.Mappings.getType()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.JohnzonJsonb.wrapPrimitiveOptional(Object,Type)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.core.JsonProviderImpl.createArrayBuilder(JsonArray)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(Calendar)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.RecordTest.Record()": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.mapper.access.FieldAccessMode.doFindWriters(Class)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.CircularObjectsTest.DeduplicatedPerson(String)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.fleece.core.JsonArrayListener.onValue(String,String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.NumberClass.setBool(boolean)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetJsonStringMissingKeyShouldReturnNull()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,String)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.JsonParserTest.testBinaryNullStreamBOM()": "JOHNZON-183 JsonParser#hasNext() returns true even when input is completely empty\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveObjectWithInNestedArrayAndResusableJsonPointer()": "Added test case for reusable jsonpointer\n", "org.apache.johnzon.mapper.ObjectConverterTest.Person(String,String)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.internal.AdapterKey.equals(Object)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.OverflowTest.overflow()": "test for overflow\n", "org.apache.johnzon.core.JsonPatchDiff.calculateDiff()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.AdapterTest.getValue()": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.johnzon.jsonb.AttributesOrderingWithCounterClass.setFirst(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonReaderFactoryImpl.createReader(Reader)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.core.JsonPatchTest.testCopyObjectMemberFromNonexistentTarget()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.jsonb.TestInstantConverter.fromString(String)": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.johnzon.core.TestBufferProvider.release(char)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.Mapper.readObject(InputStream,Type)": "JOHNZON-81 better support of Object as mapping type\n", "org.apache.johnzon.mapper.MapperTest.literalFail()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.jsonb.Types.getOptionalDouble()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.JohnzonBuilder.readerConfig()": "JOHNZON-113 wiring jsonparserfactoryimpl options to jsonb impl\n", "org.apache.fleece.core.JsonInMemoryParser.JsonInMemoryParser(JsonArray)": "initial import\n", "org.apache.fleece.core.JsonProviderImpl.createGenerator(Writer)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.reflection.Mappings.findCollectionMapping(ParameterizedType,Class)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.AdapterTest.to(Bar)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonParserTest.fail35()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.Mappings.addSetterIfNeeded(Map,String,AccessMode)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.core.RFC4627AwareInputStreamReader.getCharset(PushbackInputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DateTypes.setOffsetDateTime(OffsetDateTime)": "complete support for DateFormat", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object,Type,JsonGenerator)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.fleece.core.JsonParserTest.testUTF16BEStream()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.Customer.getLastName()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.MapperTest.readCollection()": "JOHNZON-36 nested list support\n", "org.apache.johnzon.mapper.Wrapper.Wrapper(Object)": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.core.JsonPointer.remove(JsonArray)": "Implemented JsonPointer\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setUseBigDecimalForObjectNumbers(boolean)": "JOHNZON-254 ensure object are deserialized in bigdecimal\n", "org.superbiz.ModelBase.getAalist()": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.jsonb.VisibleAllFields.isVisible(Field)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.mapper.TheObject.isBool()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.isValid(double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonStreamParser.reset(int)": "initial import\n", "org.apache.johnzon.jsonb.UUIDComposite.serialize(UUID,JsonGenerator,SerializationContext)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonProviderDelegate.createArrayBuilder(JsonArray)": "JOHNZON-96 add test + logic for ArrayBuilder ft of JSONP-1.1\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.johnzon()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonb.ConstructorVisibilityTest.packageConstructor()": "JOHNZON-249 ensure constructor visibility is validated\n", "org.apache.johnzon.core.SerializableJsonValue.hashCode()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonNullValues()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.rootRequired()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObjectBody(Object,Collection,JsonPointerTracker,JsonGenerator)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonParserTest.fail51()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue6()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.reflection.Mappings.Getter(AccessMode,boolean,boolean,boolean,boolean,Adapter,int)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(boolean)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.Types.getZoneOffset()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveFieldMemberWithInNestedArray()": "Moved tests from single testcase in to individual tests\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getOptionalLong()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.StringBuilderByInstanceProvider.StringBuilderByInstanceProvider(int)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorImplTest.emptyArray()": "initial import\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.getContextResolver(Class,MediaType)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.isFloat(Class)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMaximumValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.NestedClass.setNestedId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setActive(Boolean)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.access.MethodAccessMode.write(Object,Object)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.mapper.TheAbstractConverter.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.core.JsonParserTest.fail59()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperGenericsTest.getName()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeValue(long)": "fix pretty printing\n", "org.apache.johnzon.jsonb.cdi.CDIs.CDIs(Object)": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.core.JsonReaderFactoryImpl.JsonReaderFactoryImpl(Map)": "JOHNZON-33 Define appropriate buffer size and max text size (also simplified factories)\n", "org.apache.johnzon.mapper.internal.Streams.write(String)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.jsonb.extras.polymorphism.DeSerializer.getTypeValue(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.core.JsonPointerImpl.remove(JsonValue,int)": "ensure '-' token is used for pointer.remove and not skipped due to number pattern check\n", "org.apache.fleece.mapper.Mapper.doWriteHandlingNullObject(Object,JsonGenerator)": "initial import\n", "org.apache.fleece.core.CharBufferSingletonProvider.CharBufferSingletonProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getLong()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.logger()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.mapper.NumberSerializationTest.numberFromJson()": "JOHNZON-243 support of long as requested by jsonb (js range for serialization + BigDecimal on Number for deserialization)\n", "org.test.apache.johnzon.mojo.SomeValue.getScoreError()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(LocalTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.TheObject.toString()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.createObjectBuilder(Map)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.fleece.core.JsonLongImpl.JsonLongImpl(long)": "initial import\n", "org.apache.johnzon.core.JsonLongImpl.intValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.serializer.JohnzonSerializationContext.serialize(T,JsonGenerator)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.core.JsonGeneratorImpl.write(long)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail69()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.Mappings.findModelClass(Class)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getObject()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.mapper.MapperBuilder.setPolymorphicDeserializationPredicate(Predicate)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createParser(InputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonLocationImpl.JsonLocationImpl(long,long,long)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setSerializeValueFilter(String)": "JOHNZON-115 add SerializeValueFilter configuration for providers\n", "org.apache.fleece.core.Strings.escape(String)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.access.FieldAccessMode.FieldReader(Field,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.Person.equals(Object)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.api.experimental.JsonbExtensionTest.toJsonValue2()": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findObjectConverterWriter()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonProviderImpl.createReader(InputStream)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(Duration)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.JohnzonBuilder.checkForDeprecatedTimeZone(String)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.core.JsonParserTest.fail61()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.TheObject.getName()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.VisibleCauseAnnotated.isFoo()": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.jsonb.PartialModel.setAnyOther(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.mapper.LiteralTest.setIntNumber(int)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.CharClass.getCharArr()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonInMemoryParser.JsonInMemoryParser(JsonObject)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonPointerTest.testAddReplaceObjectMember()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.itemsObject()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object,JsonGenerator)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jsonb.converter.JsonbValueConverter.toString(Object)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.JsonPatchBuilderImpl()": "JOHNZON-95 initial JsonPatchBuilder impl\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.getRawType()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonBaseStreamParser.isIntegralNumber()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.JsonParserTest.AttemptingInputStream(byte)": "JOHNZON-17 Thiago Veronezi: RFC4627AwareInputStreamReader - Make sure that we read all the bytes before throwing an exception\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.toNumber(JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.mapper.MapperEnhancedTest.getBd()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.Cached.Cached(Supplier)": "JOHNZON-218 ensure to not allocate BufferStrategy.BufferProvider in JsonProviderImpl when not needed\n", "org.apache.fleece.core.JsonGeneratorImpl.writeJsonValue(JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.reflection.Mappings.write(Object,Object)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.jsonb.Wrapper.equals(Object)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.testDeserializeHierarchyTwo()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.AccessorsClass.setPrivateFieldWithPublicAccessors(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonGeneratorImpl.checkArray()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(String,Function)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.mapper.MapperTest.literalFail()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.order.PerHierarchyAndLexicographicalOrderFieldComparator.PerHierarchyAndLexicographicalOrderFieldComparator(Class)": "JOHNZON-240 ensure child attributes are serialized after parent ones by default\n", "org.apache.johnzon.mapper.reflection.Mappings.findConverter(AccessMode)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.fleece.core.JsonStringImpl.JsonStringImpl(String,String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,MapperConfig,Collection)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.fleece.core.JsonParserTest.fail3()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseNumberValidation.BaseNumberValidation(String,Function,double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,long)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.reflection.Mappings.ClassMapping(Class,Map,Map,boolean,boolean)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jaxrs.JsrMessageBodyReader.JsrMessageBodyReader()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DateTypes.getInstant()": "complete support for DateFormat", "org.apache.johnzon.jsonb.extras.polymorphism.DeSerializer.ensureInit()": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jsonb.VisibleAllFields.isVisible(Method)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.core.ThreadLocalBufferCache.initialValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.SerializationTest.jsonLong()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,int)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.access.ConfiguredFieldFilteringStrategy.ConfiguredFieldFilteringStrategy()": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.core.JsonArrayImpl.getString(int,String)": "initial import\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testLong()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.fleece.mapper.MapperEnhancedTests.getBd()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonGeneratorFacade.write(double)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.core.JsonPointerImpl.addInternal(T,JsonValue)": "JOHNZON-312 JsonPointer patch process shouldnt check subobjects/arrays not matching the pointer\n", "org.apache.johnzon.core.JsonReaderImplTest.unicodeWithIoReader()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.map.LazyConverterMap.doLazyLookup(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.Dog.setFather(Dog)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.bindEndpoint()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.TheObject.getIntegerVal()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.fleece.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.invalidArray()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.johnzon.mapper.BikeConverter.writeJson(Bike,MappingGenerator)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.websocket.JsrCodecTest.codec()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.fleece.core.JsonStreamParser.nextChar()": "initial import\n", "org.apache.johnzon.jsonb.extension.JsonValueWriter.write(char,int,int)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.jsonb.CdiAdapterTest.toString(Model)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.MetaMapperTest.getCustom2()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toAccessMode(Object)": "JOHNZON-130 ensure access mode if configurable even for jsonb\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.plus()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.ByteShort.setShortWA(Short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.reflection.Mappings.matches(Type,Converter)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonObjectImpl.getBoolean(String)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.core.JsonObjectImplTest.reuseObjectBuilder()": "JOHNZON-193 ensure objectbuilder is reusable (todo: check it is valid since the map is not accurate for that but it is what the spec designed)\n", "org.apache.johnzon.mapper.MapperConfig.isTreatByteArrayAsBase64URL()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.ObjectTypeTest.fromJson(JsonValue,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.MapperTest.setNumShortA(short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithElementNotExistent()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.HStack.peek()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.reflection.Converters.matches(Type,Adapter)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.access.MethodAccessMode.extractKey(String,Method,Method)": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.ifStatic()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.JsonbReadTest.boolFromReader()": "JOHNZON-148 fixed Stream serializing for primitives\n", "org.apache.fleece.core.JsonParserTest.fail20()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.fleece.jaxrs.DelegateProvider.getSize(T,Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.fleece.mapper.MapperEnhancedTests.writeReadQueue()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,long)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.mapper.MapperEnhancedTests.needConvertersForComplexTypes()": "using toString to write unknown types by default\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.getType2()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.MapperTest.setNumByte(byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.JohnzonAnyMappingTest.setName(String)": "JOHNZON-85 @JohnzonAny\n", "org.apache.fleece.core.JsonParserTest.fail56()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.Foo.equals(Object)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.JsonReaderImpl.NothingToRead()": "adding NothingToRead exception\n", "org.apache.fleece.core.StringBuilderThreadLocalProvider.release(StringBuilder)": "resetting StringBuilder in all implementations of bufferstrategy\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getOptionalDouble()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonPatchTest.testTestingArrayElementSuccess()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.mapper.ObjectTypeTest.getOwnerType()": "JOHNZON-72 added test for ObjectConverter\n", "org.apache.johnzon.core.JsonProviderImpl.createMergePatch(JsonValue,JsonValue)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addDoubleNpeIfNegIfinite()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.core.JsonPointer.equals(Object)": "Implemented JsonPointer\n", "org.apache.johnzon.jsonb.ArrayContainer.getBlong()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonParserTest.arrayFollowedByGarbage()": "Improved handling of trailing garbage\n", "org.apache.johnzon.jsonb.JsonbWriteTest.setDate(LocalDateTime)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPointerTest.testAddFirstObjectMember()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonb.JsonbAccessMode.tryToCreateInstance(Class)": "JOHNZON-235 ensure @JsonbCreator is validated even when the factory is not static\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getCharArr()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.ObjectTypeTest.testWriteWithAdvancedObjectConverter()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveJsonObjectWithTargetNull()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.fleece.core.JsonGeneratorFacade.write(int)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.fleece.core.ValueBuilder.reset(int)": "initial import\n", "org.apache.johnzon.mapper.Mapper.writeObject(Object,OutputStream)": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonCollection()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperConfig.isDeduplicateObjects()": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxPropertiesValidation.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonStreamParserImpl.StructureElement(StructureElement,boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbReadTest.getBlob()": "JOHNZON-164 add a unit test for JsonB throwing JsonbException on wrong data\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeStartArray()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.TheObject.hashCode()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.internal.ConverterAdapter.to(String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_99999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.mapper.converter.StringConverter.toString(String)": "initial import\n", "org.apache.johnzon.core.JsonNumberImpl.intValueExact()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTest.writeTestclass()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.jaxrs.JsrMessageBodyWriter.getSize(JsonStructure,Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.simpleUTF16LE()": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.fleece.mapper.MapperEnhancedTest.setInner(TestClass)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.Types.hashCode()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonPointerUtilTest.someComplexRoundTrip()": "JOHNZON-312 JsonPointer patch process shouldnt check subobjects/arrays not matching the pointer\n", "org.apache.fleece.core.JsonLongImpl.longValue()": "initial import\n", "org.apache.johnzon.jsonb.ConstructorVisibilityTest.InstantiablePackageCons(String)": "JOHNZON-287 JOHNZON-288 JOHNZON-289 add supportPrivateAccess for jsonbcreator in jsonbaccessmode + cleanup CDI property support\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceJsonObjectWithEmptyJsonPointer()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.fleece.mapper.MapperEnhancedTests.setMap(Map)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonParserTest.fail54()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImpl.checkArray(boolean)": "fix pretty printing\n", "org.apache.fleece.mapper.NumberClass.setLongNumber(long)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail7()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonNumberParserAdapter.JsonNumberParserAdapter(JsonNumber)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jaxrs.WildcardJohnzonProvider.shouldThrowNoContentExceptionOnEmptyStreams()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.isIntegralNumber()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.core.BufferStrategyFactory.CharBufferThreadLocalProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.core.JsonProviderDelegate.createBuilderFactory(Map)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.core.JsonMergeBatchTest.jsonObjectFrom(String)": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.fleece.mapper.LiteralTest.isBool()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.mapper.Mapper.writeIterable(Iterable,Writer)": "initial import\n", "org.apache.fleece.core.JsonArrayBuilderImpl.addNull()": "initial import\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,long)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.extension.JsonValueReader.setResult(T)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonProviderImpl.createReader(Reader)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.TestClass.setDates(List)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Bike.Bike(String,BikeType)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonPointer.replace(JsonArray,JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.DateTypes.setDate(Date)": "complete support for DateFormat", "org.apache.johnzon.core.JohnzonJsonParserImpl.getValue()": "Fix JsonParser.getValue()\n", "org.apache.johnzon.jsonb.FooDeser.deserialize(JsonParser,DeserializationContext,Type)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.MapperBuilder.addAdapter(Type,Type,Adapter)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,String)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.core.JsonStreamParser.JsonStreamParser(Reader,int)": "initial import\n", "org.apache.johnzon.jsonb.POJO.setName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.jaxrs.Johnzon.setName(String)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.CircularObjectsTest.testComplexCyclicPerson()": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.JsonObjectBuilderImpl(JsonObject,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.TestWithTypeConverter.writeJson(Dog,MappingGenerator)": "JOHNZON-71 improve Converter and MappingParser\n\npairprogramming together with rsandtner\n", "org.apache.johnzon.jsonb.AdapterTest.adaptJson()": "JOHNZON-224 support JsonValue in adapters (parsing side)\n", "org.apache.johnzon.core.JsonParserTest.fail70()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.OrderTest.setLongInstance(long)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.core.JsonReaderImplTest.stringescapeVariousBufferSizes()": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findFactory(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(Reader,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.websocket.MapperCodecTest.war()": "dont use jar dependency in maven reactor\n", "org.test.apache.johnzon.mojo.SomeValue.setMode(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.mapper.Mapper.writeArray(T,OutputStream)": "initial import\n", "org.apache.johnzon.core.ThreadLocalProvider.release(T)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,MapperConfig,Map,int,Comparator,Collection)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.mapper.MetaMapperTest.setName2(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.MapperTest.writeShortArray()": "JOHNZON-35 Mapper fails on short and byte array - patch from Prem Sangeeth, thanks a lot\n", "org.apache.fleece.core.JsonBaseStreamParser.getLong()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeStartArray(String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.test.apache.johnzon.mojo.SomeValue.setScoreConfidence(List)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.BufferStrategyFactory.StringBuilderByInstanceProvider(int)": "remove unused StringBuilder BufferProvider\n", "org.apache.johnzon.core.StringBuilderThreadLocalProvider.release(StringBuilder)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jsonb.SerializerTest.serialize(List,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.TestDTO.setInstant(Instant)": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.fleece.mapper.TestClass.getSose()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonProviderImpl.createArrayBuilder()": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.JsonProviderImpl.createBuilderFactory(Map)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getArray()": "completing previous commit, some missed case\n", "org.apache.johnzon.jsonb.UUIDComposite.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonWriterImpl.writeArray(JsonArray)": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.getType()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.MapperTest.compare(String,String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.BazAdapter.adaptToJson(Baz)": "JOHNZON-282: add support for @JsonbTypeAdapter at class level (#53)\n\n* JOHNZON-282: add support for @JsonbTypeAdapter at class level\r\n\r\n* add test with adapter at root object\r\n\r\n* remove recursion\r\n", "org.apache.johnzon.core.SerializationReplacement.readResolve()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.mapper.NumberClass.equals(Object)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonDoubleImpl.isIntegral()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParserImpl.createLocation()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonProviderImpl.createPatch(JsonStructure,JsonStructure)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeStartObject(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.doWriteObjectBody(JsonGenerator,Object)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.core.HStack.Node(Node,T)": "fix pretty printing\n", "org.apache.johnzon.mapper.VIPCustomer.setDiscount(Double)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonGeneratorFactoryImpl.getConfigInUse()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.JsonSchemaValidator.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonReaderImpl.onLong(long)": "initial import\n", "org.apache.fleece.core.JsonGeneratorImplTest.pretty()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.JsonBuilderFactoryImpl(Map)": "Some enhancements for handling configs in factories\n", "org.apache.johnzon.jsonb.AnySupportTest.subObject()": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.fleece.core.JsonBuilderFactoryImpl.createArrayBuilder()": "initial import\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,Object)": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.core.JsonPatchTest.testAddArrayElementWithIndex()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.Mapper.writeMapBody(Map,JsonGenerator,Converter)": "JOHNZON-48 basic map support for nested converter\n", "org.apache.johnzon.jsonb.cdi.CDIs.track(JohnzonJsonb)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.core.JsonProviderImpl.createReader(Reader)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.ensureInit()": "JOHNZON-170 adding polymorphic extension\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String,JsonValue)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.fleece.core.JsonStreamParserImpl.appendToCopyBuffer(char)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonDoubleImpl.longValueExact()": "initial import\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveArrayElementWithInvalidIndex()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.ModelAdapter.adaptFrom(String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.listPostNoGeneric()": "JOHNZON-67 ensure list can be serialized in jaxrs mapper even if we lost the generics\n", "org.apache.johnzon.jsonb.OrderTest.getAnIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.jaxrs.FleeceProviderTest.getRawType()": "initial import\n", "org.apache.johnzon.jaxrs.WadlDocumentMessageBodyWriter.getSize(Document,Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.getAnnotation(Class)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.MapperTest.literalFail2()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(Writer,BufferStrategy,ConcurrentMap)": "fix pretty printing\n", "org.apache.johnzon.core.JsonPointer.add(JsonArray,JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.extension.JsonValueWriter.accept(JsonValue)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.core.JsonWriterImpl.write(JsonValue)": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.fleece.jaxrs.FleeceProviderTest.getActualTypeArguments()": "initial import\n", "org.apache.johnzon.mapper.FallbackConverter.toString(Object)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWfloat()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getId()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.TheObject.getList()": "initial import\n", "org.apache.johnzon.core.CharBufferByInstanceProvider.CharBufferByInstanceProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.fleece.mapper.MapperEnhancedTests.setSoma(SortedMap)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.osgi.JsonbJaxrsProviderFactory.JsonbJaxrsProviderFactory(Config)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.core.JsonStreamParserImpl.isInArray()": "JOHNZON-139 improve skipArray and skipObject\n\nThey both need to also work within objects.\n", "org.apache.johnzon.mapper.Multiple.getDogs()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.EConverter.from(E)": "JOHNZON-112 custom enum serialization support for arrays\n", "org.apache.johnzon.jaxrs.JsrProviderTest.object()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchTest.testRemoveObjectMember()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.jsonb.spi.ConstantInstance.getValue()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.jsonb.DefaultMappingTest.simpleValues()": "simple value handling\n", "org.apache.fleece.core.Strings.newValue(int)": "initial import\n", "org.apache.fleece.mapper.MapperEnhancedTest.writeReadQueue()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addLocalDateConverter(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.NumberClass.getBg()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperBuilder.setAttributeOrder(Comparator)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.websocket.internal.jsr.JsrDecoder.decode(Reader)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.ArrayContainer.getbWboolean()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.test.apache.johnzon.mojo.SomeValue.get_999999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.array()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.VIPCustomer(String,String,Double)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.StaticNestedClass.getNestedName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.object()": "JOHNZON-57 ensuring to use signature type to test using reference checks in our providers\n", "org.apache.johnzon.core.JsonParserTest.testSlowIs()": "JOHNZON-18, applied patch from Thiago Veronezi: JsonStreamParserImpl not filling up buffer consistently - thanks a lot for this issue report and patch!\n", "org.apache.johnzon.jsonb.converter.JsonbLocalDateConverter.JsonbLocalDateConverter(JsonbDateFormat)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonModifiers()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.access.Meta.getAnnotation(Package,Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.ensureStart()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonschema.ValidationError.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.setBody(byte)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getBigDecimal()": "completing previous commit, some missed case\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.flushIfNeeded()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.reflection.MapUnwrapperWriter.getClassOrPackageAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.johnzon.mapper.access.FieldReader.getType()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.orImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.test(String,JsonValue)": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonProviderImpl.createWriter(OutputStream)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.fleece.mapper.Pair.getS()": "initial import\n", "org.apache.johnzon.jsonschema.JsonSchemaValidator.apply(JsonObject)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.internal.AdapterKey.getFrom()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.mapper.TheObject.setList(List)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.invalidLiteral()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.johnzon.core.JsonParserTest.fail9()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonBaseStreamParser.resetToMark()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(double)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jaxrs.JsrProviderTest.bindEndpoint()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Types.setTimeZone(TimeZone)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.NullObject.getIntegerIsnull()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.mapper.reflection.Mappings.ClassMapping(Class,Map,Map)": "JOHNZON-22 supporting private constructors in Mapper\n", "org.apache.johnzon.mapper.Dog.setMother(Dog)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonParserTest.SlowIs()": "JOHNZON-18, applied patch from Thiago Veronezi: JsonStreamParserImpl not filling up buffer consistently - thanks a lot for this issue report and patch!\n", "org.apache.johnzon.mapper.Contact.toString()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setSupportHiddenAccess(boolean)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.TypeInstance.getType()": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.fleece.core.JsonParserTest.fail68()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonArrayImpl.getJsonString(int)": "initial import\n", "org.apache.johnzon.mapper.access.FieldAccessMode.fields(Class)": "skipping static fields with FieldAccessMode\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObject(Object)": "JOHNZON-71 swap mapper parts out to MappingGenerator\n", "org.apache.fleece.core.JsonProviderDelegate.createGeneratorFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.Versioned.getName()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.readJohnzonCollection(InputStream,JohnzonCollectionType)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderReplaceInt()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail4()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParser.getEscapedString()": "initial import\n", "org.apache.johnzon.core.JsonArrayImpl.get(int)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorImpl.StructureElement(StructureElement,boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MapperGenericsTest.hashCode()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.JohnsonJsonb.wrapPrimitiveOptional(Object,Type)": "simple value handling\n", "org.apache.fleece.core.JsonReaderImpl.JsonReaderImpl(EscapedStringAwareJsonParser)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonOptional()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueElementNotExistentShouldThrowJsonException()": "Implemented JsonPointer\n", "org.apache.johnzon.mapper.MapperBuilder.setAutoAdjustStringBuffers(boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.serialize(Color,JsonGenerator,SerializationContext)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.Mapper.readArray(Reader,Class)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.or()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonObjectImpl.getJsonObject(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPolymorphicSerializationPredicate(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.setaDouble(double)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createParser(Reader)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfigTest.testFindObjectConverterConverterForSpecificClass()": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.mapper.MapperBuilder.setPolymorphicDiscriminatorMapper(Function)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.jsonb.cdi.Lazy.load(Object)": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.mapper.AnEntity.setDate(Date)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.asParam()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.MapperTest.getByteW()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.object()": "simple jsonb jaxrs provider\n", "org.apache.fleece.core.JsonBaseStreamParser.isHexDigit(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.JsonParserTest.assertSimple(JsonParser)": "JOHNZON-139 implement getObject, getArray and getValue for JsonParser\n\nstill missing:\n* skipObject\n* skipArray\n* getObjectStream\n* getArrayStream\n* getValueStream\n", "org.apache.johnzon.mapper.MapperGenericsTest.map()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.FieldAndMethodAccessMode(boolean,boolean,boolean,boolean)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.jsonb.PropertyNamingStrategyFactoryTest.valid(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonArrayImplTest.equals()": "JOHNZON-124 ensure JsonArray#equals is portable\n", "org.apache.johnzon.jsonb.JsonbAccessMode.shouldSkip(PropertyVisibilityStrategy,DecoratedType)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonDoubleImpl.bigIntegerValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodGetterAsWriter(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(Instant)": "complete support for DateFormat", "org.apache.fleece.mapper.reflection.Mappings.findClassMapping(Type)": "initial import\n", "org.apache.johnzon.core.CommentsJsonStreamParserImpl.CommentsJsonStreamParserImpl(InputStream,Charset,int,BufferStrategy,BufferStrategy,boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,BigInteger)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.addCommaIfNeeded()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.PrimaryMetric.setScoreUnit(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.OrderTest.getStringInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.reflection.Setter.Setter(AccessMode,boolean,boolean,Type,Converter,int)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.Mappings.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveLastArrayElement()": "Fixed faulty comment in test.\n", "org.apache.johnzon.mapper.CustomEnumCodecTest.to(String)": "JOHNZON-112 custom enum serialization support for arrays\n", "org.apache.johnzon.websocket.JsrCodecTest.war()": "dont use jar dependency in maven reactor\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWlong(Long)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.run()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.mapper.VIPCustomer.VIPCustomer(Customer,Double)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.Value.setAge(int)": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.VIPCustomer(Customer,Double)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.fleece.core.JsonLongImpl.equals(Object)": "initial import\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.setName(String)": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.core.JsonNumberImpl.getValueType()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonProviderImpl.createParserFactory(Map)": "Minor performance improvements for writer and reader factories and for provider impl\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJsonValue(JsonValue,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.Mapper.readJsonArray(Reader)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.testCloseWithException()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.core.JsonPointerTest.testAddObjectMemberWithNonexistentTarget()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeValue(Class,boolean,boolean,boolean,boolean,Adapter,String,Object,ObjectConverter,Collection,String)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.jsonb.DateFormatting.getDate()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(Date)": "complete support for DateFormat", "org.apache.johnzon.core.JsonParserTest.escapeStart()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidation.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.nestJsonPointer(String,String)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.fleece.core.JsonDoubleImpl.bigIntegerValueExact()": "initial import\n", "org.apache.fleece.core.JsonNumberImpl.getValueType()": "initial import\n", "org.apache.johnzon.jsonb.Dog.getName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.withDiscriminator(String)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.SerializationTest.serialDeser(T)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.isNull(JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.JohnzonBuilder.getBeanManager()": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.fleece.core.JsonParserTest.fail16()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.TheObject.setBool(boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(BigInteger)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonInMemoryParser.getCharArrayProvider()": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.NullObjectWithMap.NullObjectWithMap()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeEnd()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerTest.testConstructorWithInvalidJsonPointerShouldThrowJsonException()": "Implemented JsonPointer\n", "org.apache.johnzon.core.TypeVisitor.visit(GenericArrayType)": "Fix after review\n", "org.apache.johnzon.core.JsonCollectorTest.testToJsonArray()": "JOHNZON-96 added tests for JsonCollectors\n", "org.apache.fleece.core.JsonArrayImpl.toString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonReaderImplTest.parseBig600KbJsonFile()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.SerializableJsonValue.writeReplace()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.fleece.core.JsonWriterImpl.write(JsonStructure)": "initial import\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.binary()": "JsonbConfig injectable by JAX-RS Provider", "org.apache.johnzon.core.JsonLongImpl.doubleValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializerTest.Animal(int,String,float,boolean)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.JsonPatchDiffTest.testAddObjectToArray()": "JOHNZON-103 implemented JsonPatchDiff for JsonArray\n\nstill more tests needed\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderTestBoolean()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getOffsetTime()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,BigDecimal)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorFacade.writeStartObject(String)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.core.JsonReaderImplTest.parseBigDecimal()": "JOHNZON-265 fix handling of numbers which exceed long\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObjectBody(Object,Collection,String)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.mapper.TypeAdapter.getFrom()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter)": "JOHNZON-115 add SerializeValueFilter\n", "org.apache.johnzon.core.JsonObjectImpl.getString(String,String)": "Catching exceptions is not nice and does not perform very well\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findAnyGetter(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.mapper.MapingsKeyCacheForParameterizedTypesTest.ensureParameterizedTypeDontEndUpOnClass()": "[JOHNZON-316] ensure parameterized type use their own instance as key cache in mappins and not just the raw type\n", "org.apache.johnzon.core.RFC4627AwareInputStreamReader.readAllBytes(PushbackInputStream)": "JOHNZON-147 support BOM even if encoding is defined\n\nIf a BOM is set, then this defines the encoding.\nAny configured encoding is only used no BOM is found.\nBefore this patch we did blow up if UTF-8 encoding was configured and\nthe JSON stream did have a BOM.\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object,Type,Writer)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jsonb.SerializerTest.setStudent(List)": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.mapper.CompositeWriter.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jaxrs.Jsons.isJson(MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.StreamTest.roundTrip()": "JOHNZON-229 serializing streams as list for now\n", "org.apache.johnzon.core.Types.resolveArgumentTypes(Type,Class)": "Fix after review\n", "org.apache.johnzon.mapper.Dog.equals(Object)": "JOHNZON-72 added ObjectConverter support for reading json\n", "org.apache.johnzon.mapper.EnumTest.setEnumset(EnumSet)": "JOHNZON-150 add support for EnumSets\n", "org.apache.johnzon.jsonb.converter.JsonbLocaleParserConverterBase.newLocale(String)": "JOHNZON-66 support of Locale\n", "org.apache.johnzon.core.JsonReaderImpl.parseObject(JsonObjectBuilder)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.Mapper.readArray(InputStream,Class)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.getDiscriminator()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setAccessModeName(String)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.JsonGeneratorImpl.checkArrayOrValue()": "JOHNZON-208 ensure writeKey().write() pattern is valid in generator\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbString()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.doReadWithNoContentException(Jsonb,Type,InputStream)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceJsonObjectWithTargetNull()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.JsonWriterFactoryImpl.getConfigInUse()": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail23()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.SlowIs.read(byte,int,int)": "JOHNZON-18, applied patch from Thiago Veronezi: JsonStreamParserImpl not filling up buffer consistently - thanks a lot for this issue report and patch!\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.npe()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Book.setId(long)": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,double)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.JsonbWriteTest.propertyNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.accessModes()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.VATNumber(long)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.eatTypeKey(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.fromIso(String)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.core.JsonInMemoryParser.isInArray()": "JOHNZON-139 improve skipArray and skipObject\n\nThey both need to also work within objects.\n", "org.apache.fleece.core.JsonDoubleImpl.JsonDoubleImpl(double)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.test(String,boolean)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.Mappings.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.getClassOrPackageAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.MoreTests.of(boolean)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonPointerTest.testRemoveLastArrayElementSimple()": "ensure '-' token is used for pointer.remove and not skipped due to number pattern check\n", "org.apache.johnzon.core.PatchValue.equals(Object)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonb.JsonNumberParserAdapter.getBigDecimal()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.ObjectTypeTest.compare(String,String)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.fleece.core.JsonObjectImplTest.objectToString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonBuilderFactoryImpl.JsonBuilderFactoryImpl(Map)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonInMemoryParser.getEscapedString()": "initial import\n", "org.apache.johnzon.core.JsonDoubleImpl.intValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setSupportConstructors(boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.core.JsonObjectImplTest.objectToString()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setVersion(int)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.RFC4627AwareInputStreamReader.getCharset(PushbackInputStream,Charset)": "JOHNZON-147 support BOM even if encoding is defined\n\nIf a BOM is set, then this defines the encoding.\nAny configured encoding is only used no BOM is found.\nBefore this patch we did blow up if UTF-8 encoding was configured and\nthe JSON stream did have a BOM.\n", "org.apache.fleece.core.JsonGeneratorImpl.flush()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.NumberClass.getLongNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.list()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonb.cdi.CDIs.untrack(JohnsonJsonb)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(JsonParser,Class)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jsonb.cdi.JohnzonCdiExtension.started(BeforeBeanDiscovery)": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.jsonb.MyBean.toString()": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonParserTest.zeroCharInput()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Wrapper.hashCode()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.mapper.converter.ShortConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.LiteralTest.setIntNumber(int)": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceMessageBodyWriter.isWriteable(Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.jsonb.Wrapper.getData()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.superbiz.ModelSuperBase.setChildB(B)": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.mapper.reflection.Mappings.CompositeWriter(AccessMode[])": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.fleece.core.JsonStreamParser.isIntegralNumber()": "initial import\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,boolean)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.Dog.getFather()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.core.JsonGeneratorImplTest.stringArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonBuilder.build()": "complete support for DateFormat", "org.apache.johnzon.jaxrs.DelegateProvider.shouldThrowNoContentExceptionOnEmptyStreams()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.core.JsonPatchTest.testRemoveArrayElementIndexOutOfBounds()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.MapperConfig.getAccessMode()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.MapBuilderReader.getType()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonObjectListener.onObject(Object)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_1000()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonGeneratorFactoryImpl.getBufferProvider()": "JOHNZON-33 Define appropriate buffer size and max text size (also simplified factories)\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.getTypeValue(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.core.JsonStreamParserImpl.readString()": "JOHNZON-29 don't use recursion to avoid stackoverflow\n", "org.apache.johnzon.jsonb.DateHolder.getInstance()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.PatchValue.PatchValue(JsonPatch,String,String,JsonValue)": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object,Type,JsonGenerator)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.out()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.core.util.ArrayUtil.asList(int)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addBINpeIfNull()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.internal.Streams.append(CharSequence,int,int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.TypeInstance.setValue(Dog)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setLocalDateTime(LocalDateTime)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.CdiAdapterTest.Model(int)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonPatchImpl.PatchValue(JsonPatch,String,String,JsonValue)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.getAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.Impl(Collection,Function,String)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.reflection.MapUnwrapperWriter.write(Object,Object)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.MapperEnhancedTest.writeReadQueue()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Lazy.get()": "use jsonp as base for jsonb and not johnzon internals\n", "org.apache.fleece.mapper.Mapper.doWriteObject(JsonGenerator,Object)": "initial import\n", "org.apache.fleece.mapper.TheObject.getNested()": "initial import\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(JsonParser,Type)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.mapper.internal.Streams.append(CharSequence)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.internal.JsonPointerTracker.toString()": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.minImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator,AccessMode,boolean,boolean,int,ConcurrentMap)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.Option.of(boolean)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.test.apache.johnzon.mojo.SomeValue.getPrimaryMetric()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.access.FieldAccessMode.getType()": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.JsonPatchImpl.equals(Object)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.core.JsonObjectListener.getObject()": "initial import\n", "org.apache.fleece.mapper.MapperTest.getInteger()": "initial import\n", "org.apache.johnzon.mapper.MapperTest.toString()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.fleece.mapper.MapperTest.getCollectionWrapper()": "initial import\n", "org.apache.fleece.core.JsonBaseStreamParser.JsonBaseStreamParser(int,char)": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeInt0(int)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonWriterImpl.JsonWriterImpl(JsonGenerator)": "initial import\n", "org.apache.johnzon.core.JsonWriterImplTest.nonIntegralNumberValueWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setAge(int)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.TestClass.getDates()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.CompositePOJO.setInner(POJO)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.websocket.mapper.JohnzonTextDecoder.JohnzonTextDecoder(Mapper,Type)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.MapperConfig.getObjectConverterWriters()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.BufferStrategyFactory.CharBufferQueueProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setReadAttributeBeforeWrite(boolean)": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.johnzon.core.JsonNumberTest.testBigIntegerButFromJustALongTooLong()": "JOHNZON-110 better testing if we can use the JsonLongImpl optimization for jsonnumber\n", "org.apache.fleece.mapper.NumberClass.getShortNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.DateTypes.setLocalDate(LocalDate)": "complete support for DateFormat", "org.apache.fleece.mapper.TheObject.equals(Object)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.doFindWriters(Class)": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.TheObject.setNested(TheObject)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceJsonArrayWithEmptyJsonPointer()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.fromString(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.MapperTest.testLongArray()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.mapper.reflection.Mappings.ClassMapping(Class,Map,Map,boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeEnd()": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.fleece.core.JsonNumberImpl.toString()": "initial import\n", "org.apache.johnzon.jsonb.SerializerTest.serialize(Foo,JsonGenerator,SerializationContext)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.converter.JsonbValueConverter.fromString(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.RecordTest.hashCode()": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.isWriteable(Class,Type,Annotation,MediaType)": "simple jsonb jaxrs provider\n", "org.apache.fleece.core.JsonCharBufferStreamParser.reset()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.fleece.core.JsonStringImpl.equals(Object)": "initial import\n", "org.apache.johnzon.mapper.BikeWrapper.getBike()": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.additionalProperties()": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.mapper.ListHolder.getInstance()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jsonb.TestDTOConverter.writeJson(TestDTO,MappingGenerator)": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.core.JsonGeneratorFactoryImpl.getInt(String)": "JOHNZON-33 Define appropriate buffer size and max text size (also simplified factories)\n", "org.apache.johnzon.mapper.reflection.Mappings.Getter(AccessMode,boolean,boolean,boolean,boolean,Converter,int)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.Types.getZoneId()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.TestInstantConverter.toString(Instant)": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.InObjectOrPrimitiveJsonGenerator(JsonGenerator,Runnable,String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonschema.spi.builtin.TypeValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.converter.JsonbConverterFromString.fromString(String)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.mapper.Person.getFather()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.DateTypes.setCalendar(Calendar)": "complete support for DateFormat", "org.apache.fleece.core.JsonArrayBuilderImplTest.boolJsonValueArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.converter.EnumConverter.type()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonStringImpl.hashCode()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerImpl.toString()": "JOHNZON-274 ensure JsonPatch respects requested path for arrays and objects\n", "org.apache.johnzon.mapper.Converted.getS()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.CompositeReader.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.Value.toString()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWboolean(Boolean)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonCollectorTest.testGroupingByJsonObject()": "JOHNZON-96 added tests for JsonCollectors\n", "org.apache.johnzon.core.JsonReaderImplTest.specialWithIoReader()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.JsonBuilderFactoryImpl(Map,BufferStrategy)": "JOHNZON-212 ensure we can serialize jsonp objects\n", "org.apache.johnzon.mapper.internal.Streams.write(byte,int,int)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.MappingParserImpl.convertTo(Adapter,JsonValue,JsonPointerTracker)": "JOHNZON-226 avoid JsonValue.equals as it is slow\n\nWe rather use JsonValue.ValueType comparison instead.\n", "org.apache.fleece.core.JsonParserTest.testUTF8Stream()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetJsonNumberMissingKeyShouldReturnNull()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.fleece.core.JsonParserTest.fail37()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonPatchDiffTest.testDiffEqualObjects()": "JOHNZON-103 added tests for JsonPatchDiff ADD and REMOVE\n", "org.apache.johnzon.jsonb.extras.polymorphism.PolymorphicTest.serialize()": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.mapper.MappingParserImpl.readObject(Type)": "JOHNZON-71 json-p 1.1 handling optional\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.withTypeLoader(Function)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.mapper.Customer.Customer()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.NullTest.writeArrayWithNullWithinMap()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.maxProperties()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonParserFactoryImpl.getBool(String)": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.fleece.jaxrs.FleeceResource.object()": "initial import\n", "org.apache.johnzon.mapper.reflection.MapBuilderReader.getClassOrPackageAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator,boolean,boolean,AccessMode,boolean,boolean,Charset)": "simple value handling\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.close()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.toString()": "JOHNZON-191 ensure we validate the right value for meta validation (jsonschema): patternproperties and additionalProperties\n", "org.apache.johnzon.core.JsonGeneratorImpl.checkObject()": "fix pretty printing\n", "org.test.apache.johnzon.mojo.SomeValue.get_950()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.core.JsonStreamParserImpl.handleEndArray()": "JOHNZON-139 improve skipArray and skipObject\n\nThey both need to also work within objects.\n", "org.apache.johnzon.core.JsonArrayImpl.hasNext()": "JOHNZON-226 iterator for JsonArrayImpl\n", "org.apache.johnzon.core.JsonPointerTest.testAddArrayElementWithInvalidIndex()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.CompositeReader.read(Object)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonParserTest.fail31()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.BaseAccessMode.getFieldFilteringStrategy()": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.jsonb.IJsonTest.setInstance(Calendar)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.mapper.converter.EnumConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator,AccessMode,int,ConcurrentMap)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.core.JsonParserTest.threeLiterals()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.GenericsTest.noVariable()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.client()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.NestedClass.setNestedName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.fromJson(JsonObject,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonURLURI()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.JohnzonReaderHandler.read(JsonReader)": "simple value handling\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testCharacter()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.johnzon.core.JsonProviderDelegate.createGenerator(Writer)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorImpl.write(double)": "initial import\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.asSet(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findWriter(Class)": "JOHNZON-81 better support of Object as mapping type - write side\n", "org.apache.johnzon.mapper.VIPCustomer.getDiscount()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.MapperConfig.setVersion(int)": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.jsonschema.spi.builtin.MultipleOfValidation.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.Setter.toString()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.ReaderHandler.ReaderHandler(boolean)": "simple value handling\n", "org.apache.fleece.mapper.converter.CachedDelegateConverter.toString(T)": "initial import\n", "org.apache.fleece.mapper.reflection.Setter.Setter(Method,boolean,Type,Converter,int)": "initial import\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setDoCloseOnStreams(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.jsonb.JsonbAccessMode.doFindReaders(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.fleece.core.JsonGeneratorImpl.writeNull()": "initial import\n", "org.apache.fleece.mapper.reflection.CollectionMapping.CollectionMapping(boolean,Class,Type)": "initial import\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.getActualTypeArguments()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonProviderImpl.createGenerator(OutputStream)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.fleece.core.JsonObjectImpl.getBoolean(String,boolean)": "initial import\n", "org.apache.johnzon.jsonb.OrderTest.typeSerializer()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWlong(Long)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.reflection.MapBuilderReader.getType()": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.MappingParserImpl.readObject(JsonValue,Type,boolean)": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.johnzon.core.ArgumentTypeResolver.visit(Class)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.testCloseConcurrent()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.core.JsonParserTest.testGetValueOfIntegerType()": "Fix JsonParser.getValue()\n", "org.apache.fleece.mapper.LiteralTest.getBg()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonLocationImpl.hashCode()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(ZoneId)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonReaderImpl.onFalse()": "initial import\n", "org.apache.johnzon.core.CommentsJsonStreamParserImpl.CommentsJsonStreamParserImpl(InputStream,int,BufferStrategy,BufferStrategy)": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.johnzon.jsonschema.spi.builtin.MinimumValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setUri(URI)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.Mappings.createClassMapping(Class)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.mapper.map.LazyConverterMap.setDateTimeFormatter(DateTimeFormatter)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonObjectImpl.getInt(String)": "initial import\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.equals(Object)": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.jsonb.Foo.equals(Object)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.core.JsonParserTest.fail8()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonProviderTest.testJsonCreateValueBigInteger()": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.getOrLoadId(T)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.fleece.core.JsonParserTest.fail67()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonStreamParserImpl.createLocation()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.SomeValue.getMeasurementIterations()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonParserTest.plainValues()": "simple value handling\n", "org.apache.johnzon.jsonb.ConstructorVisibilityTest.instantiablePackageConstructor()": "JOHNZON-287 JOHNZON-288 JOHNZON-289 add supportPrivateAccess for jsonbcreator in jsonbaccessmode + cleanup CDI property support\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(BigInteger)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.toString()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.jsonb.AnimalSerializer.serialize(Animal,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.MapperTest.setMap(Map)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperException.MapperException(String)": "initial import\n", "org.apache.fleece.mapper.TheObject.getLongnumber()": "initial import\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getString()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.ValidationContext.getValueProvider()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.Customer.Customer(String,String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MapperBuilder.setPrimitiveConverters(boolean)": "JOHNZON-84 getting rid of default converters for primitives\n", "org.apache.johnzon.jsonb.JsonbAccessMode.validateAnnotations(Object,JsonbTypeAdapter,JsonbDateFormat,JsonbNumberFormat,JohnzonConverter)": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.johnzon.core.JsonGeneratorImpl.flushBuffer()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStreamParserImpl.appendToCopyBuffer(char)": "Remove unnecessary code for minor speed improvement, replace Integer (object) with int (primitive)\n", "org.apache.johnzon.jsonb.ArrayContainer.getBshort()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.JsonbVisitilityTest.get(String)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.fleece.jaxrs.JsrProviderTest.object()": "initial import\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.getDto()": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMinimumValidation.Impl(String,Function,double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonProviderDelegate.createMergePatch(JsonValue)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.all()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.SimplifiedTypeVariable.equals(Object)": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseNumberValidation.onNumber(JsonNumber)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonReaderImplTest.parseSmall3KbJsonFile()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setSupportGetterForCollections(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.MapperTest.getCollectionWrapper()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Bytes.getData()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.Mapper.writeIterable(Iterable,Writer)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.StudentDeserializer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.fleece.mapper.MapperTest.toString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.getMethod(String,Class,Class[])": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.fleece.core.JsonParserTest.maxStringStringFail()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setDates(List)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbWriteTest.boolAsString()": "JOHNZON-148 provide unit test\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(JsonValue)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.getConfigInUse()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.UniqueItemsValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonProviderImpl.createWriterFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.JsonArrayImpl.getString(int,String)": "Catching exceptions is not nice and does not perform very well\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbWchar(Character)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.Mapper.doWriteObject(JsonGenerator,Object)": "JOHNZON-48 basic map support for nested converter\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setThrowNoContentExceptionOnEmptyStreams(boolean)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.mapper.Mapper.readTypedArray(InputStream,Class,Class)": "JOHNZON-81 better support of Object as mapping type\n", "org.apache.johnzon.jsonb.NestedClass.getNestedId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.EnumTest.getEnumset()": "JOHNZON-150 add support for EnumSets\n", "org.apache.johnzon.jsonb.ArrayContainer.setbWbyte(Byte)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,BigDecimal)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.StringArrayDeserializer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(String,Function,int)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonschema.spi.builtin.MinItemsValidation.Impl(String,Function,int)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonReaderImplTest.unicode2Bytes()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.ArrayHolder.setInstance(StringHolder)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(BigInteger)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.generateFile(JsonReaderFactory,File)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.hashCode()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.util.ArrayUtil.asList(byte)": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.mapper.Person.getMarriedTo()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetJsonArrayMissingKeyShouldReturnNull()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.mapper.access.MethodAccessMode.doFindWriters(Class)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeStartObject()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.setNestedId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.rootType()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.StringHolder.setInstance(String)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.Cat.hashCode()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonPatchTest.testReplacingArrayElementAttribute()": "JOHNZON-274 ensure JsonPatch respects requested path for arrays and objects\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.create(ValidationContext)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.mapper.MapperBuilder.setSkipNull(boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonParserTest.fail17()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.converter.Model.getDate()": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.johnzon.mapper.MapperTest.writeByteArray()": "JOHNZON-35 Mapper fails on short and byte array - patch from Prem Sangeeth, thanks a lot\n", "org.apache.fleece.core.JsonObjectImpl.hashCode()": "initial import\n", "org.apache.fleece.core.JsonReaderImpl.subArray()": "initial import\n", "org.apache.johnzon.core.DiffBase.isJsonObject(JsonValue)": "JOHNZON-103 add createMergeDiff handling\n", "org.apache.fleece.mapper.MapperTest.fromString(String)": "initial import\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.JohnzonDeserializationContext(MappingParser,JsonBuilderFactory,JsonProvider)": "use jsonp as base for jsonb and not johnzon internals\n", "org.apache.fleece.core.JsonStreamParserImpl.next()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonParserTest.assertSimple(JsonParser)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonb.model.packageformat.FormatOnClassModel.getInstance()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonParserTest.fail34()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.SomeValue.setScoreError(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddMissingPath()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.ObjectTypeTest.fromJson(MappingParser,Type)": "JOHNZON-71 improve Converter and MappingParser\n\npairprogramming together with rsandtner\n", "org.apache.johnzon.jsonb.ArrayContainer.setBshort(short)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail9()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodWriter(Method)": "JOHNZON-23 field access support\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,double)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.core.JsonParserTest.simpleUTF16LE()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.Value.equals(Object)": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.Impl(String,Function,double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonObjectImpl.value(String,Class)": "initial import\n", "org.apache.fleece.core.JsonGeneratorFacade.flush()": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.MapperBuilder.setUseJsRange(boolean)": "JOHNZON-243 support of long as requested by jsonb (js range for serialization + BigDecimal on Number for deserialization)\n", "org.apache.fleece.mapper.LiteralTest.getDoubleNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.Mappings.lookupType(AccessMode,Map)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.mapImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.JsonInMemoryParser.JsonInMemoryParser(JsonObject)": "initial import\n", "org.apache.fleece.core.JsonParserTest.shortestNonEmtyJsonFileWithWhiteSpaceChars()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.Mapper.toObject(JsonValue,Type)": "JOHNZON-20 basic Map<String, Object> support\n", "org.apache.johnzon.mapper.MapperConfig.getDeserializationPredicate()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.johnzons2()": "simple jsonb jaxrs provider\n", "org.apache.fleece.core.JsonStringImpl.toString()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.websocket.endpoint.ServerReport.pmessage()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.NumberClass.getBi()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.testEmptyArray()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonProviderImpl.createParser(Reader)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.jsonb.factory.CdiJohnzonAdapterFactory.CdiInstance(T,CreationalContext)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.writeJson(TestDTO,MappingGenerator)": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object,Type,Appendable)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.fleece.mapper.NumberClass.setShortNumber(short)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderReplaceBoolean()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.fleece.core.JsonBaseStreamParser.parseLongFromChars(char,int,int)": "FLEECE-8 another bunch of cleanup and improvements from Hendrik Saly\n", "org.apache.johnzon.core.JsonGeneratorFactoryImpl.JsonGeneratorFactoryImpl(Map)": "JOHNZON-33 Define appropriate buffer size and max text size (also simplified factories)\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.onBoolean(boolean)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPointer.validateJsonPointer(JsonValue,int)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.core.JsonPatchDiffTest.fromEmptyArray()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.fleece.core.JsonReaderImpl.parseObject(JsonObjectBuilder)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.osgi.JsonbJaxrsProviderFactory.getService(Bundle,ServiceRegistration)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.mapper.ByteShort.getByteW()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.Types.resolveArgumentTypes(ParameterizedType,Class)": "Clarified Types.findParameterizedType()\n", "org.apache.fleece.core.JsonBaseStreamParser.ifConstructingStringValueAdd(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getCharValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.LongConverter.toString(Long)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTests.setQueue(Queue)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.access.MethodAccessMode.getPropertyDescriptors(Class)": "JOHNZON-23 field access support\n", "org.apache.johnzon.core.JsonArrayImplTest.emptyArray()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTests.getMap()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.CharBufferSingletonProvider.newInstance(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.fleece.core.JsonProviderImpl.createBuilderFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.fleece.core.JsonCharBufferStreamParser.JsonCharBufferStreamParser(InputStream,Charset,int,int)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.QueueProvider.newBuffer()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail72()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.GoldCustomer.GoldCustomer(VIPCustomer,int)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonPointerUtilTest.testEncodeWholeTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jsonb.SerializerTest.hashCode()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperEnhancedTests.setSose(SortedSet)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.internal.AdapterKey.getTo()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.core.JsonParserTest.fail64()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.converter.URLConverter.fromString(String)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getActive()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.reflection.Mappings.getClassMapping(Type)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfig.getDiscriminatorMapper()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonPointerUtilTest.testDecodeSecondTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.mapper.JsonObjectGenerator.close()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonParserTest.testEmptyArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.mapper.Mapper.convertTo(Class,String)": "using toString to write unknown types by default\n", "org.apache.fleece.mapper.converter.BooleanConverter.fromString(String)": "initial import\n", "org.apache.johnzon.mapper.access.FieldReader.FieldReader(Field)": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonb.PartialModel.getAnyOther()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.flush()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.test.apache.johnzon.mojo.SomeValue.getRawData()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeKey(String)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.getString()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonschema.spi.builtin.Impl.isNull(JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.adaptFromJson(String)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.createObjectBuilder(JsonObject)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(BigDecimal)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.out()": "JOHNZON-57 ensuring to use signature type to test using reference checks in our providers\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.emptyArray()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserFactoryImpl.getBufferProvider()": "forgotten files in last commit\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.getActualTypeArguments()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveArrayElementWithLeadingZeroIndex()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.mapper.TestClass.getMap()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.JsRegex.test(CharSequence)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.fleece.core.ByInstanceProvider.ByInstanceProvider(int)": "supporting several buffer cache strategies\n", "org.apache.johnzon.jsonschema.regex.JavaRegex.JavaRegex(String)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(String,JsonValue)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.core.TestJsonGeneratorFactory.TestJsonGeneratorFactory()": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.fleece.mapper.MapperBuilder.addPropertyEditor(Class,Converter)": "initial import\n", "org.apache.johnzon.mapper.MapperConfig.isSkipNull()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "javax.json.bind.JsonbConfig.withNullValues(Boolean)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonPointerImpl.remove(JsonObject)": "Fix issues related to JsonPointer remove operation\n", "org.apache.johnzon.core.JsonParserTest.testUTF32LEBOMStream()": "JOHNZON-16 Fix BOM detection for UTF-8, new testcase for stream that throws an exception by Thiago Veronezi\n", "org.apache.johnzon.jsonb.Student.setAge(int)": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.fleece.mapper.Mapper.readCollection(Reader,ParameterizedType,Class)": "initial import\n", "org.apache.johnzon.mapper.MapperBuilder.addConverter(Type,Converter)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.mapper.LiteralTest.equals(Object)": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.jsonb.GenericAdapterTest.testJOHNZON223()": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.core.JsonPatchTest.testMovingObjectMemberMoveToSubFrom()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.mapper.converter.CharacterConverter.toString(Character)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.MinPropertiesValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonschema.ValidationResult.getMessage()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonPatchTest.testAddObjectMember()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setValid(Boolean)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.NanHolder.setNan(Double)": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.BaseValidation(String,Function,JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithJsonArrayLeadingZeroIndex()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.mapper.access.MethodReader.MethodReader(Method)": "JOHNZON-23 field access support\n", "org.apache.johnzon.core.JsonPointerTest.testAddJsonStructureWithTypeValueNotTypeTarget()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.CompositeReader.getAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.access.MethodAccessMode.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.fleece.mapper.TheObject.getName()": "initial import\n", "org.apache.johnzon.mapper.JPATest.setDate(Date)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.add(String,String)": "JOHNZON-95 initial JsonPatchBuilder impl\n", "org.apache.fleece.core.JsonInMemoryParser.getString()": "initial import\n", "org.apache.johnzon.jsonb.SimpleProperty.getValue()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonArrayBuilderImpl.addValue(JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.SomaClass.setSoma(SortedMap)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(JsonArrayBuilder)": "adding checkstyle\n", "org.apache.johnzon.mapper.SerializeValueFilterTest.Foo(Collection)": "JOHNZON-115 add SerializeValueFilter\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getPrivateFieldWithPublicAccessors()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.jaxrs.FleeceResource.array()": "initial import\n", "org.apache.johnzon.mapper.JsonpIntegrationTest.readAndWrite()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.EnumTest.AdvancedEnum(String,int)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.JohnzonBuilder.createJsonParserFactory()": "JOHNZON-130 ensure access mode if configurable even for jsonb\n", "org.apache.johnzon.core.JsonProviderTest.testJsonCreateValueInt()": "JOHNZON-96 implement Json.createValue methods\n", "org.apache.johnzon.core.JsonParserTest.fail12()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.MinimumValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.ArrayContainer.getbWchar()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonPointerUtilTest.testEncodeNull()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jsonb.JohnzonJsonb.JohnzonJsonb(Mapper)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.mapper.Cyclist.getBike()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.mapper.MapperTest.setSuperLongProperty(String)": "JOHNZON-37 @JohnzonProperty\n", "org.apache.johnzon.mapper.MapperConfigTest.testFindObjectConverterConverterOnlyForSuperclass()": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderReplaceJsonArray()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.jsonb.SerializerTest.typeSerializer()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.johnzons2()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.NoContentExceptionHandlerReader.isReadable(Class,Type,Annotation,MediaType)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.fleece.core.JsonGeneratorFacade.write(String,BigDecimal)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.LiteralTest.writeReadNumbersNaN()": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.fleece.core.JsonGeneratorImpl.writeStartArray()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonStreamParserImpl.handleStartObject()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonParserTest.fail6()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonPatchImpl.PatchValue(JsonPatchOperation,JsonPointer,JsonPointer,JsonValue)": "JOHNZON-97 first draft for JsonPointer\n\nstill far away from finished - just to check if\ni go the right direction\n", "org.apache.johnzon.core.JsonPointerImpl.remove(JsonValue,int,int,List)": "Updated the logic based on comments\n", "org.apache.johnzon.mapper.reflection.CompositeWriter.findConverter()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.core.JsonGeneratorImpl.write(boolean)": "initial import\n", "org.apache.johnzon.jaxrs.JsrMessageBodyWriter.getSize(JsonStructure,Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.setAction(Action)": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.mapper.MapperConfig.setSkipNull(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.fleece.core.JsonStreamParserImpl.uexc(String)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jaxrs.JsrMessageBodyReader.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperEnhancedTest.needConvertersForComplexTypes()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail38()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.SerializationReplacement.SerializationReplacement(String)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonb.Value.hashCode()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.mapper.Mapper.readJsonArray(InputStream)": "JOHNZON-222 enable to map JsonArray in jsonb impl\n", "org.apache.johnzon.mapper.NullObject.setEmptyArray(String)": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.core.JsonParserTest.testGetValueOfNullType()": "Fix JsonParser.getValue()\n", "org.apache.johnzon.core.JsonWriterImplTest.integralNumberValueWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.jsonb.Dog.setName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.Mappings.addGetterIfNeeded(Map,String,AccessMode,boolean,Map)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonPointerTest.testAddArrayElementWithIndexOutOfRange()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.CircularObjectsTest.setFather(DeduplicatedPerson)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.createArrayBuilder(JsonArray)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.fleece.core.JsonParserTest.fail26()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.test.apache.johnzon.mojo.SomeValue.setRawData(List)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.MapperConfig.setPrettyPrint(boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithJsonArrayIndexOutOfRange()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.access.BaseAccessMode.getParameterItemConverter()": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.johnzon.core.JsonStringImpl.JsonStringImpl(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(JsonValue)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.itemsValidatesObject()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.NullTest.getStringIsnull()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.mapper.Mappings.createClassMapping(Class,Map)": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.mapper.MapperGenericsTest.equals(Object)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setIgnores(String)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonPatchDiffTest.testRemoveDiffObject()": "JOHNZON-103 added tests for JsonPatchDiff ADD and REMOVE\n", "org.apache.fleece.core.JsonObjectListener.onBigDecimal(BigDecimal)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.buildValidFieldName(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.mapper.MapperTest.writeObject()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonArrayImpl.hashCode()": "initial import\n", "org.apache.johnzon.jsonb.SimpleBool.setBool(Boolean)": "JOHNZON-148 fixed checkstyle, added test with Boolean in Object\n", "org.apache.johnzon.jsonb.AdapterTest.adaptFromJson(JsonString)": "JOHNZON-224 support JsonValue in adapters (parsing side)\n", "org.apache.johnzon.core.Types.visit(GenericArrayType)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonParserFactoryImpl.getValueBufferProvider()": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addDoubleNpeIfNaN()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonObjectImpl.toString()": "initial import\n", "org.apache.johnzon.core.JsonPatchTest.testCreatePatch()": "JOHNZON-96 add test for Json.createPatch\n", "org.apache.johnzon.jsonb.POJO.getId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.HStack.pop()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object,Type,Writer)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.UUIDComposite.adaptToJson(UUID)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeEOL()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.onString(JsonString)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail2()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.OrderTest.setInstance(String)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.core.JsonProviderDelegate.createParser(InputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonInstantiation()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.reflection.ClassMapping.findConstructor(boolean,boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.core.JsonReaderImplTest.parseBig600KbJsonFile()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.checkTransient(Annotation)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.TestClass.getSose()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayImpl.getInt(int,int)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonWriterFactoryImpl.getConfigInUse()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.NumberClass.getLongNumber()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonDoubleImpl.longValue()": "initial import\n", "org.apache.fleece.core.JsonNumberImpl.longValueExact()": "initial import\n", "org.apache.johnzon.core.JsonGeneratorImpl.alignState()": "fix pretty printing\n", "org.apache.johnzon.core.JsonPointer.validateArraySize(JsonArray,int,int)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.TransientGetterWithFieldProperty.getInstance()": "JOHNZON-239 transient support\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.setDto(TestDTO)": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.core.JsonStreamParserImpl.handleLiteral(char)": "typos fixed, method signature simplified\n", "org.apache.johnzon.jsonb.Types.getUri()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.DateTypes.equals(Object)": "complete support for DateFormat", "org.apache.johnzon.core.JsonNumberImpl.bigDecimalValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeValueAsJsonString(String)": "fix pretty printing\n", "org.apache.fleece.mapper.MapperEnhancedTests.TestClass()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.Command.getName()": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.mapper.Mappings.newOrderedMap(Class)": "JOHNZON-71 moved attributeOrder to MapperConfig\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.deserialize(Class,JsonParser)": "reupdating jsonb api\n", "org.apache.fleece.core.JsonDoubleImpl.getValueType()": "initial import\n", "org.apache.johnzon.core.JsonStreamParserImpl.readNextChar()": "JOHNZON-18, applied patch from Thiago Veronezi: JsonStreamParserImpl not filling up buffer consistently - thanks a lot for this issue report and patch!\n", "org.apache.johnzon.mapper.MapperBuilder.build()": "JOHNZON-30 basic johnzon jsonp component config in our mapper/jaxrs provider\n", "org.apache.johnzon.mapper.Base.setValue(T)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.MapperTest.testFloatArray()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.mapper.Mapper.readObject()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.AnEntity.setId(long)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.Impl(String,Function,double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.converter.JsonbConverterFromString.toString(T)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.mapper.MapperPerformanceTest.createTestDocument()": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.mapper.Mapper.toString(Object)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.Impl(Collection,String,Function)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.testCreateObjectBuilderWithMapFlatItems()": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.nullArrayNonChaining()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.johnzons1()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.getInt()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.POJOWithNestedClass.getNestedClass()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPointerUtil.decode(String)": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.core.JsonMergeBatchTest.testSimpleMergePatch()": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.jsonb.factory.CdiJohnzonAdapterFactory.getValue()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.ObjectTypeTest.setType(String)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jsonb.JsonbAccessMode.writeJson(Object,MappingGenerator)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.QueueProvider.release(T)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonNumberImpl.bigIntegerValueExact()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperGenericsTest.getValue()": "JOHNZON-56 generic test for mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.RequiredValidation.apply(JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonObjectBuilderImpl.npe()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.Mapper.writeValue(JsonGenerator,Class,boolean,boolean,boolean,boolean,Converter,String,Object)": "JOHNZON-48 basic map support for nested converter\n", "org.apache.johnzon.jsonb.Types.getOffsetTime()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.mapper.converter.BigIntegerConverter.toString(BigInteger)": "initial import\n", "org.apache.johnzon.mapper.ObjectTypeTest.getColor()": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.mapper.reflection.MapUnwrapperWriter.findConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.serialize(Color,JsonGenerator,SerializationContext)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.MapperTest.hashCode()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.mapper.ObjectTypeTest.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-72 added test for ObjectConverter\n", "org.apache.johnzon.mapper.MapperConfig.isReadAttributeBeforeWrite()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.JsonStreamParserImpl.hasNext()": "simple value handling\n", "org.apache.johnzon.mapper.HolderWithMultipleBounds.getInstance()": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jsonb.Cat.Cat(int,String,float,boolean,boolean)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.MapperBuilder.setGeneratorFactory(JsonGeneratorFactory)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ArrayContainer.getbWbyte()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.mapper.MapperTest.setNested(TheObject)": "initial import\n", "org.apache.johnzon.core.JsonPatchTest.testAddArrayElementPlainArray()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonPatchTest.testTestingObjectMemeberNonexistentTarget()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonParserTest.fail19()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.TheObject.setList(List)": "renamed fleece to johnzon\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.fieldGetSetMethods(Writer,String,String,String,String,int,Collection)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonMergeBatchBuilderTest.testSimpleMergePatch()": "JOHNZON-95 first bits of MergeBatch handling\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeValue(Class,boolean,boolean,boolean,boolean,Adapter,String,Object,ObjectConverter,Collection)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.johnzon.jsonb.IJsonTest.calendar()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonGeneratorImpl.noCheckWrite(char)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperTest.getI()": "initial import\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.Johnzon(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonBuilder.isVisible(Method)": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.johnzon.core.JsonReaderFactoryImpl.getConfigInUse()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.converter.DoubleConverter.toString(Double)": "initial import\n", "org.apache.johnzon.jsonb.OrderTest.getSecond()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.MapperEnhancedTest.writeTestclass()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.FallbackConverter.toString(Object)": "using toString to write unknown types by default\n", "org.apache.johnzon.mapper.EnumSetObject.setEnumset(EnumSet)": "JOHNZON-150 add support for EnumSets\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mappings.findModelClass(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.mapper.CompositeWriter.getClassOrPackageAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(double)": "initial import\n", "org.apache.johnzon.jsonb.ArrayContainer.setBboolean(boolean)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.JsonbTransientTest.setName(String)": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.core.JsonNumberTest.testBigIntegerExact()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.BufferStrategyFactory.ThreadLocalProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.apply(JsonArray)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.core.JsonParserFactoryImpl.getInt(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.FooSer.serialize(Foo,JsonGenerator,SerializationContext)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.core.JsonReaderImplTest.unicodeWithIoReader()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonObjectImplTest.testIsNullMissingKeyShouldThrowNullPointerException()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.mapper.converter.BooleanConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.jaxrs.JsonBindingProvider.getContext(Class)": "JsonbConfig injectable by JAX-RS Provider", "org.apache.johnzon.mapper.BikeConverter.fromJson(JsonValue,Type,MappingParser)": "Fix after review\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.setMonument(boolean)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.getClassOrPackageAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.johnzon.core.CommentsJsonStreamParserImpl.CommentsJsonStreamParserImpl(Reader,int,BufferStrategy,BufferStrategy)": "org.apache.johnzon.supports-comments // style comment support with org.apache.johnzon.supports-comments reader flag\n", "org.apache.johnzon.mapper.internal.Streams.write(char)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.fleece.core.JsonArrayImpl.getJsonNumber(int)": "initial import\n", "org.apache.johnzon.jsonb.ParsingCacheEntry.ParsingCacheEntry(DecoratedType,Types)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyReader.JohnzonMessageBodyReader(Mapper)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStreamParserImpl.isFitLong()": "JOHNZON-265 refine isLong algorithm\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.arrayTest(JohnzonJsonLogic,JsonValue,JsonValue,BiPredicate)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.JsonCharBufferStreamParser.JsonCharBufferStreamParser(InputStream,int,int)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWshort()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.test.apache.johnzon.mojo.SomeValue.getScore()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.Mapper.buildArray(Type,JsonArray,Converter)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.StillGeneric.setInstance(T)": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.mapper.MapperConfig.getDiscriminator()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.jsonb.StringHolder.getInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.CompositeReader.CompositeReader(AccessMode[])": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.ArrayContainer.getBint()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.ObjectTypeTest.getTo()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.JsonObjectBuilderImpl(JsonObject)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.fleece.core.JsonStreamParserImpl.StructureElement(StructureElement,boolean)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonArrayImpl.removeAll(Collection)": "initial import\n", "org.apache.johnzon.core.Strings.escape(String)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.setName(String)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.access.BaseAccessMode.getParameterNames()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.access.MethodAccessMode.findConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.internal.JsonPointerTrackerTest.testJsonPointerTracker()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.fleece.core.JsonGeneratorFacade.writeNull()": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.fleece.core.JsonParserTest.testUTF16LEStream()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isDateType(Type)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJson(Object,JsonGenerator)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.Option(boolean)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonPatchImpl.PatchValue(JsonProvider,JsonPatch,String,String,JsonValue)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.MapUnwrapperWriter(Map,String)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderReplaceString()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.access.ConfiguredFieldFilteringStrategy.getFieldsToRemove()": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.core.JsonLongImpl.bigDecimalValue()": "initial import\n", "org.apache.johnzon.mapper.reflection.Getter.Getter(AccessMode,boolean,boolean,boolean,boolean,Converter,int)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.Types.setCalendar(Calendar)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setBufferStrategy(String)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.jsonb.FailOnUnknownPropertiesTest.failOnUnknownProperties()": "JOHNZON-244 ensure jsonb property for unknown properties is used (as well as our johnzon specific one)\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getBd()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfig.getObjectConverterReaders()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.core.JsonObjectImpl.remove(Object)": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail43()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jaxrs.JohnzonResource.johnzons2()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTests.setBd(BigDecimal)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonParserTest.commaChecks()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getValue()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.TypeAdapter.from(Dog)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.ObjectSerializationTest.nestedArrayString()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.jsonschema.spi.ValidationContext.ValidationContext(String,JsonObject,Function)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.serialize(UUID,JsonGenerator,SerializationContext)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.mapper.Versioned.getName()": "initial import\n", "org.apache.johnzon.jaxrs.JsrProvider.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonschema.ValidationError.setField(String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPolymorphicDeserializationPredicate(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.core.JsonGeneratorImplTest.prettySimpleWriter()": "fix pretty printing\n", "org.apache.fleece.jaxrs.JsrProviderTest.array()": "initial import\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(JsonValue)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.Mapper.isFloat(Class)": "JOHNZON-71 remove unused code\n\nThose parts got moved over to MappingGeneratorImpl\n", "org.apache.johnzon.mapper.reflection.Setter.Setter(AccessMode,boolean,Type,Converter,int)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.MapperTest.toString(String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeValue(Class,boolean,boolean,boolean,boolean,boolean,Adapter,String,Object,ObjectConverter,Collection,JsonPointerTracker)": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testByte()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.johnzon.core.JsonPointerUtil.encode(String)": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMaximumValidation.Impl(String,Function,double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonProviderDelegate.createObjectBuilder(Map)": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.fleece.core.QueueProvider.release(T)": "forgotten files in last commit\n", "org.apache.johnzon.core.JsonParserTest.array()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.BikeWrapper.BikeWrapper(Bike)": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.fleece.core.JsonParserTest.simpleInMemory()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object,Type)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.getType1()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.access.CompositeDecoratedType.getType1()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.LocationTest.simpleLocation()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.fail53()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue4()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setZoneOffset(ZoneOffset)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.Mappings.toResolvedTypes(Type)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.core.JsonParserTest.hasNext()": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceMessageBodyReader.isReadable(Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeStartObject()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.IndirectAdapterTest.GenericTimeAdapter(DateTimeFormatter,TemporalQuery)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.jsonb.HiddingPublicFieldTest.setValue(String)": "JOHNZON-250 private accessors hide public fields\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.writeNull()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.JsrMessageBodyReader.JsrMessageBodyReader(JsonReaderFactory,boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.xml.WadlDocumentToJson.addChildrens(JsonObjectBuilder,NodeList)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParserImpl.parseLongFromChars(char,int,int)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.asParam(Johnzon)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonProviderImpl.createWriter(Writer)": "getting rid of some System properties configuring the factory\n", "org.apache.fleece.core.JsonGeneratorImplTest.emptyStringArray()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.setName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(Duration)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonReaderImpl.JsonReaderImpl(JsonParser,boolean,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.converter.CachedDelegateConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonProviderImpl.createWriterFactory(Map)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.toValue(JsonValue,Converter,Type)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.jsonb.SimpleProperty.setValue(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.andImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.MetaMapperTest.setCustom(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.CircularObjectsTest.setKids(List)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.fleece.core.JsonReaderImpl.parseArray(JsonArrayBuilder)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.SimpleContainerSerializer.serialize(StringHolder,JsonGenerator,SerializationContext)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.GenericTimeAdapter.GenericTimeAdapter(DateTimeFormatter,TemporalQuery)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.mapper.NumberClass.setDoubleNumber(double)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParserImpl.parseIntegerFromChars(char,int,int)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.access.MethodAccessMode.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.Getter.Getter(AccessMode,boolean,boolean,boolean,boolean,Adapter,int)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.access.MethodGetterAsWriter.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.access.FieldAccessMode.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(OffsetTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonObjectImpl.isNull(String)": "initial import\n", "org.apache.johnzon.jsonb.extras.polymorphism.Wrapper.Wrapper(String,T)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueJsonArrayElementNoNumberShouldThrowJsonException()": "Implemented JsonPointer\n", "org.apache.johnzon.mapper.NumberClass.setBg(BigDecimal)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(Reader,Type)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.core.JsonGeneratorImplTest.writeKeyWriteNull()": "JOHNZON-208 ensure writeKey().write() pattern is valid in generator\n", "org.apache.johnzon.mapper.MappingParserImpl.SuppressConversionMappingParser(MappingParserImpl,JsonObject)": "JOHNZON-72 removed unnecessary method from interface\n\nSuppress conversion for same instance via internal class\n", "org.apache.johnzon.jsonb.AnySupportTest.equals(Object)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.mapper.access.FieldReader.FieldReader(Field,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.MapperConfig.getAttributeOrder()": "JOHNZON-71 moved attributeOrder to MapperConfig\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setUseJsRange(boolean)": "JOHNZON-243 support of long as requested by jsonb (js range for serialization + BigDecimal on Number for deserialization)\n", "org.apache.johnzon.mapper.RecordTest.equals(Object)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.core.JsonParserTest.testParseGetObject()": "JOHNZON-157 test for showing broken readObject\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setNestedId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.moduloImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jaxrs.JohnzonProvider.JohnzonProvider(Mapper)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.fromJson(JsonValue,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonschema.spi.builtin.MultipleOfValidation.isValid(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.MapperBuilder.setAttributeOrder(Comparator)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.Types.ParameterizedTypeImpl(Type,Type[])": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.ParameterizedTypeImpl.equals(Object)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.mapper.MapperTest.getMap()": "initial import\n", "org.apache.johnzon.jsonb.JohnzonProviderTest.provider()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.mapper.LiteralTest.getShortNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.ArrayIterator.hasNext()": "Fixed some minor possible bugs reported by FindBugs\n", "org.apache.fleece.mapper.LiteralTest.writeReadNumbersInf()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setEnforceQuoteString(boolean)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.JsonbWriteTest.propertyMappingNotNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.JohnzonProvider.create()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonObjectImplTest.testToStringShouldReturnEscapedKey()": "Fix JsonObject#toString() to escape key names.\n", "org.apache.johnzon.mapper.Cyclist.equals(Object)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.core.JsonGeneratorImplTest.stringArray()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonProviderDelegate.createArrayBuilder()": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setIgnoreFieldsForType(String)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.jsonb.CharsDeSer.serialize(String,JsonGenerator,SerializationContext)": "Fix after review\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.parseArray(JsonParser,JsonArrayBuilder)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonWriterImpl.checkState()": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.fleece.core.JsonParserTest.fail9()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonGeneratorImpl.addCommaIfNeeded()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfigTest.testFindObjectConverterConverterForInterfaceAndClassConverterSubclasses()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.fleece.core.JsonProviderDelegate.createReader(InputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.jsonb.JsonbAccessMode.fromJson(JsonValue,Type,MappingParser)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.mapper.MapperEnhancedTest.getInner()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.JsonbWriteTest.date()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addInstantConverter(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.mapper.ReverseConverter.fromString(String)": "initial import\n", "org.apache.johnzon.core.JsonMergePatchBuilder.mergePatch(JsonValue,JsonValue)": "JOHNZON-95 first bits of MergeBatch handling\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceObjectMemberWithNonexistentTarget1()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonPointerTest.testAddArrayElementWithLeadingZeroIndex()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.fleece.core.JsonGeneratorFacade.write(BigInteger)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.MapperBuilder.addObjectConverter(Class,MapperConverter)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveArrayElementWithIndexOutOfRange()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.core.JsonParserTest.fail13()": "renamed fleece to johnzon\n", "org.apache.johnzon.websocket.endpoint.ClientEndpointImpl.MessageDecoder()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.asBoolean()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getMap()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonReaderImplTest.JsonReaderImplTest()": "don't fail if not the right charset\n", "org.apache.johnzon.mapper.MapperTest.noSetterCollection()": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.converter.JsonbNumberConverter.fromString(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.streamOutput()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.CustomEnumCodecTest.roundTripArray()": "JOHNZON-112 custom enum serialization support for arrays\n", "org.apache.johnzon.core.JsonProviderImpl.createReaderFactory(Map)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.mapper.CircularObjectsTest.setName(String)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.mapper.access.Meta.getAnnotation(AccessibleObject,Class)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.map.LazyConverterMap.fromString(String)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonReaderImplTest.specialWithStringAsByteArrayInputStream()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonInMemoryParser.getLong()": "initial import\n", "org.apache.johnzon.jsonb.SerializerTest.serialize(DetailName,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.getId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.VATNumber.toString()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.ArrayContainer.setBlong(long)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.apply(JsonValue)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceArrayElement()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.mapper.Mapper.objectToList(Object)": "JOHNZON-205: add support for arrays in toStructure\n", "org.apache.johnzon.mapper.TestClass.setString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonLongImpl.intValueExact()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.fleece.core.JsonInMemoryParser.generateArrayEvents(List,JsonArray)": "initial import\n", "org.apache.johnzon.core.JsonPatchTest.testCopyObjectMemberToNonexistingTarget()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.NamedBuilder.NamedBuilder(T,String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonStreamParserImpl.readNumber(char)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.CycleRace.CycleRace(boolean,boolean,List)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.mapper.SomeIntDocument.setContent(Integer)": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.fleece.mapper.LiteralTest.getByteNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.object()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonParserTest.testUTF32LEStream()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonObjectImpl.getString(String)": "Catching exceptions is not nice and does not perform very well\n", "org.apache.fleece.core.JsonParserTest.fail34()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceArrayElementWithIndexOutOfRange()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.ClassMapping.isDeduplicateObjects()": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.core.Node.Node(Node,T)": "fix pretty printing\n", "org.apache.fleece.mapper.MapperVersionTest.version()": "initial import\n", "org.apache.johnzon.core.JsonPatchTest.testReplacingArrayElementIndexOutOfBounds()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.core.JsonParserTest.fail22()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.fleece.mapper.MapperTest.setArray(TheObject)": "initial import\n", "org.apache.johnzon.mapper.access.FieldAccessMode.getClassOrPackageAnnotation(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.fleece.mapper.reflection.Mappings.findCollectionMapping(ParameterizedType,Class)": "initial import\n", "org.apache.johnzon.mapper.access.FieldAccessMode.isIgnored(String)": "more global exclude rules for fields and methods\n", "org.apache.johnzon.core.JsonInMemoryParser.addValueEvents(List,JsonValue)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.varArrayDefault()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.OrderTest.arrayTypes()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.extension.JsonValueReader.get()": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.mapper.Mapper.mapObject(Type,JsonReader)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JsonbVisitilityTest.put(String,String)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.core.JsonGeneratorImplTest.stringArrayEscapes2()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.UUIDComposite.adaptFromJson(String)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.mapper.NumberClass.getFloatNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonStreamParserImpl.close()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.ArrayContainer.getbWlong()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonStreamParserImpl.uexc(char,String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbTypesTest.equals(Object)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.mapper.Mapper.buildArray(Type,JsonArray)": "adding checkstyle\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.newJsonGenerator(Writer,JsonPrettyGeneratorImpl,boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.internal.JsonPointerTracker.JsonPointerTracker(JsonPointerTracker,String)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.Animal.hashCode()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(LocalDateTime)": "date format in jsonbconfig\n", "org.apache.johnzon.mapper.MapperBuilder.setEnforceQuoteString()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findAdapter(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonProviderDelegate.createPatchBuilder()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.core.JsonReaderImpl.readArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.MethodAccessMode.findReaders(Class)": "more global exclude rules for fields and methods\n", "org.apache.johnzon.core.JsonStreamParserImpl.isInObject()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setSkipNull(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.ConstructorUsage.ConstructorUsage(String,Collection,String)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.jsonb.AdapterTest.adaptToJson(Dummy2)": "JOHNZON-224 support JsonValue in adapters (parsing side)\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(Writer,BufferStrategy,ConcurrentMap,boolean)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.jsonb.jaxrs.JohnzonResource.asParam(Johnzon)": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.MapperTest.isBool()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonStreamParserImpl.getInt()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonParserTest.JsonParserTest()": "ensure Json.createValue(BigInteger) does not loose precision\n", "org.apache.johnzon.mapper.reflection.CompositeReader.findConverter()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.EnumTest.testSimpleEnumAccessModeField()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonParserTest.fail2()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTest.setBd(BigDecimal)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.Student.getAge()": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.core.JsonPatchDiffTest.toEmptyArray()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.johnzon.core.JsonPatchTest.testTestingArrayElementPlainArrayFailed()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.superbiz.ModelSuperSuperBase.getChildB()": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.core.JsonPointer.JsonPointer(String)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.mapper.AliasesOnField.getSuperLongProperty()": "JOHNZON-37 @JohnzonProperty\n", "org.apache.johnzon.mapper.util.ArrayUtil.asList(long)": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addDoubleNpeIfPosInfinite()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(String,Function,double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.OverrideDefaultAdaptersTest.adaptToJson(Date)": "JOHNZON-187 ensure user adapters can override default adapters\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.getTypeLoader()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyReader.JohnzonMessageBodyReader()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.JsonParserTest.testGetValueOfTrueType()": "Fix JsonParser.getValue()\n", "org.apache.johnzon.core.JsonPatchTest.testAddNonexistentTarget()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.jsonb.extension.JsonValueWriter.close()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonStreamParserImpl.uexio(IOException)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeStartArray()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonInheritance()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperConfig.getAdapters()": "JOHNZON-71 copied writer parts over to MappingGenerator\n\nAnd hey, it compiles again!\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.getActualTypeArguments()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.fleece.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,Reader,Charset,int,BufferStrategy,BufferStrategy)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.Option(boolean)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.CharClass.getCharValue()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.AccessorsClass.getPrivateFieldWithPublicAccessors()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonStreamParserImpl.next()": "JOHNZON-74 mention org.apache.johnzon.max-string-length in error message\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.ProvidedInstance(Jsonb)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.fromZonedDateTime(String)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.mapper.reflection.Mappings.Getter(Method,boolean,boolean,boolean,boolean,Converter,int)": "JOHNZON-23 field access support\n", "org.apache.johnzon.mapper.Poodle.setHairCut(boolean)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.core.JsonGeneratorImpl.write(long)": "fix pretty printing\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeStartArray()": "JOHNZON-82 more prettification tests for arrays\n", "org.apache.johnzon.mapper.Mapper.getProvider()": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.fleece.core.ThreadLocalProvider.release(char)": "supporting several buffer cache strategies\n", "org.apache.johnzon.core.JsonObjectImpl.valueOrExcpetion(String,Class)": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(BigInteger)": "initial import\n", "org.apache.johnzon.mapper.access.BaseAccessMode.sanitize(Class,Map)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.core.JsonReaderImplTest.badTypeArray()": "JOHNZON-111 ensure to fail with a jsonexception when reading a wrong type of value with jsonreader, thanks Michele Vivoda\n", "org.apache.johnzon.mapper.ReaderHandler.read(JsonReader)": "simple value handling\n", "org.apache.fleece.mapper.Mapper.fromString(String)": "using toString to write unknown types by default\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_500()": "better to use double instead of integer when guessing the type\n", "org.apache.fleece.core.JsonGeneratorImplTest.stringArrayEscapes2()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.POJOWithStaticNestedClass.getNestedName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.NumberClass.setFloatNumber(float)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ReaderConverters.mapItem(JsonValue,Type,MappingParser,JsonbDeserializer)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.MapperTest.expectMapperException(Runnable)": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.fleece.core.JsonStreamParserImpl.getLong()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.Mapper.mapObjectOld(Type,JsonReader)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceObjectMember()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonNumberTest.equals()": "JOHNZON-122 equals contract for JsonNumber\n", "org.apache.fleece.core.JsonStreamParser.isNumber()": "adding checkstyle\n", "org.apache.johnzon.core.JsonGeneratorImpl.swapState(GeneratorState)": "fix pretty printing\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_00()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.MappingParserImpl.buildObject(Type,JsonObject,boolean)": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.core.Types.equals(Object)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.jaxrs.FleeceMessageBodyReader.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.modifiers()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.osgi.Activator.notEmpty(String)": "JOHNZON-295 Only set JsonbJaxrsProvider configuration when non-default values are set\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonBaseStreamParser.appendValue(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.core.JsonPointerImpl.add(JsonObject,JsonValue)": "JOHNZON-95 fixed JsonPointer#add for complex objects\n", "org.apache.johnzon.mapper.reflection.Mappings.addSetterIfNeeded(Map,String,AccessMode,boolean)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.core.JsonStreamParser.skipNotEventChars()": "initial import\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeStartArray(String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.superbiz.ModelSuperBase.setChildA(A)": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.jsonb.AdapterTest.adaptToJson(Path)": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.core.JsonParserTest.fail16()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.Types.setSimpleTimeZone(SimpleTimeZone)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,JsonObjectBuilder)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidator.ItemsValidator(String,Function,JsonSchemaValidator)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.serialize(UUID,JsonGenerator,SerializationContext)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.mapper.reflection.Mappings.Mappings(Comparator)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.Aliases.getSuperLongProperty()": "JOHNZON-37 @JohnzonProperty\n", "org.apache.johnzon.jsonschema.spi.builtin.EnumValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithWholeDocument()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.test.apache.johnzon.mojo.SomeValue.setForks(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.itemsArray()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetJsonObjectMissingKeyShouldReturnNull()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.jsonb.SerializerTest.setInstance(StringHolder)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.ObjectTypeTest.testObjectConverterMapper()": "JOHNZON-72 implemented writing with ObjectConverter\n", "org.apache.johnzon.jsonb.DefaultMappingTest.nulls()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonArrays()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBbyte(byte)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.PartialModel.getFirst()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.DynamicInstance.apply(Class)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.johnzon.mapper.converter.DoubleConverter.toString(Double)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapper.writeItem(JsonGenerator,Object)": "JOHNZON-36 nested list support\n", "org.apache.johnzon.jsonb.DateFormatTest.dateCanBeParsed()": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.fleece.mapper.TestClass.setInner(TestClass)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.Cat.equals(Object)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.ObjectTypeTest.getName()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.mapper.Mappings.findCollectionMapping(ParameterizedType)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonGeneratorImpl.noCheckWrite(char)": "fix pretty printing\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toJson(Object,Writer)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toWriter(Appendable)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jsonb.SerializerTest.getName()": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.core.ThreadLocalProvider.ThreadLocalProvider(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.Mappings.findCollectionMapping(ParameterizedType)": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.fleece.core.StringBuilderSingletonProvider.newInstance(int)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.JohnzonParameterizedType(Type,Type[])": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.PatternValidation.JsRegex(String)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.mapper.NumberClass.setDoubleNumber(double)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.MapperConfig.setAccessMode(AccessMode)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonGeneratorImplTest.stringArrayEscapes()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.EConverter.to(String)": "JOHNZON-112 custom enum serialization support for arrays\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.getField()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonParserTest.testSkipObject()": "JOHNZON-139 add skipObject and skipArray support\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.of(boolean)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonNumberImpl.bigIntegerValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.LiteralTest.compare(String,String)": "JOHNZON-28 Bad numeric conversion - thanks to Thiago Veronezi\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.getBufferProvider()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.Mapper.doConverFrom(T,Converter)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,boolean)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.core.JsonInMemoryParser.next()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.remove(String)": "basic validations: JsonObject should be immutable, JsonObjectBuilder#remove does not validate NPE for its input\n", "org.apache.johnzon.jsonb.DateFormatTest.setInstance(Calendar)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.jsonb.OrderTest.setSecond(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.SerializerTest.serialize(Animal,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,String)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addDoubleNpeIfNaN()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeIterator(Adapter,String,ObjectConverter,Collection,JsonPointerTracker,JsonGenerator,Iterator)": "JOHNZON-229 serializing streams as list for now\n", "org.apache.johnzon.mapper.reflection.Generics.resolveTypeVariable(Type,Type)": "JOHNZON-303 a class with some generic should be able to map a container (list/map) using this generic\n", "org.apache.johnzon.mapper.AdapterTest.compare(String,String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonPatchDiffTest.testAddDiffInNestedObject()": "JOHNZON-103 added tests for JsonPatchDiff ADD and REMOVE\n", "org.apache.johnzon.core.JsonParserTest.fail20()": "renamed fleece to johnzon\n", "org.apache.fleece.core.RFC4627AwareInputStreamReader.getCharset(PushbackInputStream)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.MapperTest.encodingTest()": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.onString(JsonString)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.access.MethodReader.getType()": "JOHNZON-23 field access support\n", "org.apache.johnzon.mapper.NullTest.NullObjectWithMap()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.mapper.Poodle.isHairCut()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.jsonb.ClassDecoratedType.getClassOrPackageAnnotation(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.isNotTooLong()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.core.JsonPatchDiffTest.testRemoveObjectFromArray()": "JOHNZON-103 implemented JsonPatchDiff for JsonArray\n\nstill more tests needed\n", "org.apache.johnzon.mapper.ObjectTypeTest.equals(Object)": "JOHNZON-72 added ObjectConverter support for reading json\n", "org.apache.johnzon.mapper.Mapper.readJohnzonCollection(Reader,JohnzonCollectionType)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.core.NothingToRead.NothingToRead()": "adding NothingToRead exception\n", "org.apache.johnzon.core.JsonNumberImpl.checkFractionalPart()": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.mapper.ClassToWrite.getaDouble()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.jsonb.Option.Option(boolean)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setEncoding(String)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.BufferStrategyFactoryTest.testJsonGeneratorStrategyFromClass()": "JOHNZON-217 toUpper on a Class name seems a bad idea...\n", "org.apache.johnzon.mapper.MapperTest.setNan(Double)": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.johnzon.mapper.reflection.Generics.resolve(Type,Type)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.mapper.converter.DateWithCopyConverter.to(String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonb.JohnsonJsonb.isArray(Type)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.AbstractJsonFactory.AbstractJsonFactory(Map,Collection,Collection)": "JOHNZON-212 ensure we can serialize jsonp objects\n", "org.apache.fleece.core.JsonArrayImpl.addInternal(JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.MapperEnhancedTest.setMap(Map)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonStreamParser.incr()": "initial import\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_900()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.Person.setFather(Person)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(GregorianCalendar)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.access.MethodAccessMode.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.JohnzonIgnoreNestedTest.ignoreNested()": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setAccessModeFieldFilteringStrategyName(String)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.mapper.ByteShort.getShortW()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.client()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.MapperBuilder.setIgnoreFieldsForType(Class,String[])": "JOHNZON-49 avoid cycling by default for throwable\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.testCreateArrayBuilderWithJsonArrayInitialData()": "JOHNZON-96 add test + logic for ArrayBuilder ft of JSONP-1.1\n", "org.apache.johnzon.mapper.MapperBuilder.setEncoding(String)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.core.JsonObjectImpl.getJsonNumber(String)": "initial import\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProviderTest.jsonpTest()": "JOHNZON-299 jsonb MessageBodyReader/Writer provider excludes jsonp\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>\n", "org.apache.johnzon.mapper.MapperBuilder.setPolymorphicSerializationPredicate(Predicate)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getPrivateFieldWithPrivateAccessors()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonParserTest.fail50()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.extras.polymorphism.DeSerializer.loadMapping(Type)": "Fixed typo in error message re: missing annotations\n\nSigned-off-by: Markus KARG <markus@headcrashing.eu>\n", "org.apache.johnzon.core.BufferStrategyFactory.StringBuilderSingletonProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addDoubleNpeIfNegIfinite()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setUrl(URL)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.MaximumValidation.Impl(String,Function,double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jaxrs.JohnzonResource.out()": "JOHNZON-57 ensuring to use signature type to test using reference checks in our providers\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.writeTo(T,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "JOHNZON-284 respect user charset when provided\n", "org.apache.fleece.core.JsonReaderFactoryImpl.createReader(InputStream,Charset)": "getting rid of some System properties configuring the factory\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addJABuilderNpeIfNull()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.jsonb.AdapterTest.adapt()": "JOHNZON-224 support JsonValue in adapters (parsing side)\n", "org.apache.johnzon.core.JsonGeneratorFactoryImpl.createGenerator(OutputStream,Charset)": "fix pretty printing\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategyTest.annotated()": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.mapper.CircularObjectsTest.setMarriedTo(DeduplicatedPerson)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.JsonObjectImpl.writeReplace()": "JOHNZON-94 ignoring null and true/false serialization to ensure == works for these values\n", "org.apache.johnzon.websocket.internal.mapper.MapperLocator.newMapper()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.OverflowTest.testVeryLargeJson()": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.write(Object,Object)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonGeneratorImpl.noCheckWrite(String)": "fix pretty printing\n", "org.apache.johnzon.core.JsonParserTest.fail58()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.JohnzonReaderHandler.isLong(JsonNumber)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setAttributeOrder(Comparator)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.AdapterTest.adaptFromJson(Bar)": "fix JsonbAdapter gerneric types\n\nIt's now 1:1 with the spec.\n", "org.test.apache.johnzon.mojo.SomeValue.setMeasurementTime(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.ArrayContainer.getbWfloat()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isReversedAdapter(Class,Class,Adapter)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.BufferCache.BufferCache(int)": "initial import\n", "org.apache.johnzon.mapper.LiteralTest.setLongNumber(long)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonObjectImpl.getJsonArray(String)": "initial import\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveJsonArrayWithTargetNull()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getValueWithoutField()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.testObjectConverter()": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.mapper.CompositeWriter.CompositeWriter(AccessMode[])": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.JsonbTypesTest.readAndWrite()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setBd(BigDecimal)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorFactoryImpl.createGenerator(Writer)": "fix pretty printing\n", "org.apache.johnzon.jsonb.SomeImpl.setValue(String)": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.superbiz.ExtendMappingTest.findOrCreateClassMapping(Type)": "restoring previous ability to extend our mapping to add generation features to it\n", "org.apache.johnzon.jsonb.JsonbAccessMode.ReaderConverters(DecoratedType)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonArrayImpl.getJsonArray(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.OverrideDefaultAdaptersTest.adaptFromJson(String)": "JOHNZON-187 ensure user adapters can override default adapters\n", "org.apache.johnzon.mapper.MapperTest.justObjectAsModel()": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.EnumHolder.valueOf(String)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_999999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.core.JsonGeneratorImplTest.notFluentGeneratorUsage()": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.jsonb.api.experimental.JsonbExtensionTest.fromJsonValue2()": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.fleece.mapper.Mapper.doConverFrom(T,Converter)": "initial import\n", "org.apache.johnzon.jsonb.JsonbReadTest.testInvalidBase64()": "JOHNZON-164 add a unit test for JsonB throwing JsonbException on wrong data\n", "org.apache.fleece.core.JsonLongImpl.intValueExact()": "initial import\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.apply(JsonObject)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.core.JsonInMemoryParser.getInt()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.reflection.MapBuilderReader.MapBuilderReader(Map,String,int)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setDeduplicateObjects(boolean)": "JOHNZON-135 add configuration for JaxRS\n", "org.apache.johnzon.mapper.MapperPerformanceTest.setContent(byte)": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.mapper.MapperTest.setNumByteA(byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonPatchDiff.diff(JsonPatchBuilder,String,JsonValue,JsonValue)": "JOHNZON-103 implemented JsonPatchDiff for JsonArray\n\nstill more tests needed\n", "org.apache.johnzon.mapper.internal.Streams.read(byte)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.core.BufferStrategyFactory.release(T)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.core.JsonParserTest.testIOException()": "JOHNZON-16 Fix BOM detection for UTF-8, new testcase for stream that throws an exception by Thiago Veronezi\n", "org.apache.johnzon.core.JsonProviderImpl.createValue(BigDecimal)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setReaderFactory(JsonReaderFactory)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getNestedClass()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.MapperEnhancedTest.writeNull()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.StringBuilderSingletonProvider.StringBuilderSingletonProvider(int)": "forgotten files in last commit\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.initThrowNoContentExceptionOnEmptyStreams()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.jsonb.JohnsonJsonb.toArray(Object)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setSupportConstructors(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.SerializationTest.jsonNumber()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.mapper.ObjectTypeTest.multiple()": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.mapper.MappingParserImpl.buildObject(Type,JsonObject,boolean,JsonPointerTracker)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMinimumValidation.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonschema.spi.builtin.ItemsValidation.ItemsValidator(String,Function,Collection)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.toString(Date)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.JPATest.setId(long)": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.core.JsonGeneratorImplTest.writeKeyWriteFormatted()": "JOHNZON-208 ensure writeKey().write() pattern is valid in generator\n", "org.apache.johnzon.mapper.MapperConfig.isSupportEnumContainerDeserialization()": "JOHNZON-255 JOHNZON-256 JOHNZON-257 JOHNZON-258 JOHNZON-259 disable enummap/enumset deserialization by default (jsonb tck) + support some container impl deserialization without falling back on the generic interface\n", "org.apache.johnzon.mapper.NumberClass.getShortNumber()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.LiteralTest.equals(Object)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(String,Function,JsonValue[])": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MapperConfig.setReadAttributeBeforeWrite(boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.ColorDeSer.serialize(Color,JsonGenerator,SerializationContext)": "Fix after review\n", "org.superbiz.ExtendMappingTest.run()": "restoring previous ability to extend our mapping to add generation features to it\n", "org.apache.johnzon.mapper.Mappings.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.JohnzonJsonb.isNotObjectOrArray(Object)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.TheObject.getMap()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mappings.doFindOrCreateClassMapping(Type,Map,boolean)": "[JOHNZON-316] ensure parameterized type use their own instance as key cache in mappins and not just the raw type\n", "org.apache.fleece.mapper.TestClass.setDates(List)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jaxrs.DelegateProvider.isWriteable(Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(long)": "JOHNZON-110 improve long support impl\n", "org.apache.fleece.core.JsonArrayImpl.getInt(int,int)": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.primitives()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeEnd()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.castToNumber(JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonProviderDelegate.createValue(BigDecimal)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.fleece.core.JsonObjectImpl.entrySet()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueFromNestedObject()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonschema.ValidationResult.getField()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.JohnzonBuilder.visibilityStrategy(Class)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.jsonb.AttributesOrderingWithCounterClass.setSecond(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.websocket.internal.jsr.FactoryLocator.contextInitialized(ServletContextEvent)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.Mapper.writeMapBody(Map,JsonGenerator,Adapter)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findFactory(Class)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.mapper.Converted.setS(String)": "initial import\n", "org.apache.johnzon.core.JsonInMemoryParser.remove()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverterBase.JsonbDateConverterBase(JsonbDateFormat)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.onObject(JsonObject)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.mapper.Mapper.writeArray(Collection,Writer)": "initial import\n", "org.apache.johnzon.mapper.MapperConfigTest.testFindObjectConverterConverterForInterfaceAndClass()": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.mapper.reflection.MapUnwrapperWriter.getType()": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.Contact.hashCode()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createInternalParser(Reader)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Converted.setS(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBlong(long)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonParserFactoryImpl.createParser(JsonArray)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.TestWithTypeConverter.getSubClass(Type,String)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jsonb.Bar.getValues()": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.core.JsonPointerImpl.validateAdd(JsonValue)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.fleece.core.JsonObjectImpl.getValueType()": "initial import\n", "org.apache.johnzon.core.ParameterizedTypeImpl.toString()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.Types.setOffsetTime(OffsetTime)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.reflection.ClassMapping.ClassMapping(Class,Map,Map)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonGeneratorFacade.writeStartObject()": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.internal.ConverterAdapter.getConverter()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.MapperTest.sortedMap()": "JOHNZON-80 respecting attributeorder when deserializing SortedMaps\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPropertyNamingStrategy(String)": "simple jsonb jaxrs provider\n", "org.apache.fleece.mapper.MapperEnhancedTests.writeReadSortedSet()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.converter.DateWithCopyConverter.from(Date)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonb.WriterConverters.WriterConverters(DecoratedType,Types)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.getRawType()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperBuilder.setPolymorphicDiscriminator(String)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.fleece.core.JsonParserTest.fail21()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonb.api.experimental.JsonbExtensionTest.fromJsonValue()": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.isIntegralNumber()": "completing previous commit, some missed case\n", "org.test.apache.johnzon.mojo.SomeValue.setPrimaryMetric(PrimaryMetric)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.mapper.reflection.Mappings.findConverter(Method)": "initial import\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(BigDecimal)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.TypeInstance.setType(String)": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.johnzon.core.JsonPointerUtilTest.assertRoundTrip(String,String)": "JOHNZON-312 JsonPointer patch process shouldnt check subobjects/arrays not matching the pointer\n", "org.apache.johnzon.mapper.map.LazyConverterMap.hasTime(Calendar)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.MapperEnhancedTest.writeReadSortedSet()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPatchTest.toJsonString(JsonStructure)": "JOHNZON-269 ensure JsonWriter#close is not implicit\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.parseObject(JsonParser,JsonObjectBuilder)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.reflection.Mappings.read(Object)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.fleece.mapper.TheObject.setPrimitives(int)": "initial import\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addCalendarConverter(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jaxrs.NoContentExceptionHandlerReader.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.core.JsonLongImpl.numberValue()": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeStartObject(String)": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.fleece.mapper.TheObject.hashCode()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.SimpleAdapter.from(Foo)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.MapperTest.testShortArray()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.mapper.EnumTest.testSimpleEnumWithCollectionAccessModeField()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.primitiveBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.fleece.core.JsonBaseStreamParser.isAsciiDigit(char)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.access.AllEntriesFieldFilteringStrategy.select(Class)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.core.JsonStreamParserImpl.handleEndObject()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.Person.getPersonGender()": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.mapper.access.MethodReader.read(Object)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addZonedDateTimeConverter(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isTransient(DecoratedType,PropertyVisibilityStrategy)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.ModelAdapter.adaptTo(String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.map.LazyConverterMap.from(Object)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,int)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.fleece.mapper.TheObject.setArray(TheObject)": "initial import\n", "org.apache.johnzon.jaxrs.JohnzonResource.primitive()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.ParameterizedTypeImpl.getActualTypeArguments()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonGeneratorImpl.writeValue(String)": "JOHNZON-82 more prettification tests for arrays\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.getType()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonStreamParserImpl.parseHexDigit(char)": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.mapper.converter.EnumConverterTest.fromStringToEnum()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,int,BufferStrategy,BufferStrategy,boolean)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.fleece.core.JsonLocationImpl.equals(Object)": "initial import\n", "org.apache.fleece.jaxrs.FleeceMessageBodyWriter.FleeceMessageBodyWriter()": "initial import\n", "org.apache.johnzon.mapper.DeduplicatedPerson.getFather()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.fleece.mapper.NumberClass.setByteNumber(byte)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonWriterImpl.close()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MapperConfig.isSkipEmptyArray()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.Record.Record()": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.minProperties()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.MapperBuilder.setBuilderFactory(JsonBuilderFactory)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.core.JsonStreamParserImpl.handleStartObject()": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.core.JsonParserTest.fail57()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithWholeJsonArray()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.CircularObjectsTest.getName()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.SerializerTest.setAge(int)": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.core.JsonArrayImpl.getJsonNumber(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.ByteShort.setNumShort(short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.ArrayContainer.setBchar(char)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.ObjectTypeTest.getDogs()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.reflection.CompositeReader.CompositeReader(AccessMode[])": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(int)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.internal.Streams.markSupported()": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.converter.ClassConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.TestBufferProvider.releaseCalls()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.test.apache.johnzon.mojo.SomeValue.get_900()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.CompositeReader.findConverter()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.DeduplicatedPerson.getMother()": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.mapper.access.BaseAccessMode.setFieldFilteringStrategy(FieldFilteringStrategy)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.core.JsonArrayListener.onFalse()": "initial import\n", "org.apache.johnzon.jsonb.JsonbReadTest.getValue()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.InterfaceMappingTest.setValue(String)": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.core.JsonPatchTest.testReplacingObjectMemberNonexistingTarget()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.MappingParserImpl.toValue(Object,JsonValue,Adapter,Adapter,Type)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setFailOnMissingCreatorValues(boolean)": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.johnzon.mapper.MapperBuilder.setDoCloseOnStreams(boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonPointerTest.testConstructorWithInvalidJsonPointer()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jaxrs.DelegateProvider.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfig.isClose()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.jsonb.SerializerTest.Dog(int,String,float,boolean,boolean)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.Impl(Collection,String,Function)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.getaLong()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointerImpl.validateArraySize(JsonArray,int,int)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.jsonb.CdiAdapterTest.adaptFrom(String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.MapperEnhancedTest.writeReadSortedMap()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonBaseStreamParser.JsonBaseStreamParser(int)": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setPolymorphicDeserializationPredicate(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.mapper.RecordTest.Record(int,String)": "better record support (after jdk14 validation)\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "JOHNZON-284 respect user charset when provided\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.getLocation()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeValue(Class,boolean,boolean,boolean,boolean,boolean,Adapter,String,Object,ObjectConverter,Collection,JsonPointerTracker,JsonGenerator)": "more reference passing in MappingGenerator to ensure we can override the generator as for object writers\n", "org.apache.johnzon.mapper.reflection.Mappings.Setter(AccessMode,boolean,Type,Converter,int)": "JOHNZON-23 field access support\n", "org.apache.fleece.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,BufferStrategy,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MapperBuilder.setFailOnUnknownProperties(boolean)": "JOHNZON-109 fail on unknown properties support\n", "org.apache.johnzon.mapper.access.FieldWriter.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.SomeIntDocument.getContent()": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.jsonb.TransientHolder.getInstance()": "JOHNZON-239 transient support\n", "org.apache.fleece.mapper.MapperTest.readArray()": "initial import\n", "org.apache.johnzon.jsonb.JsonbAccessMode.afterParsed(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.model.nillable.notnillable.StringHolder.getString()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonPatchDiff.diffJsonArray(JsonPatchBuilder,String,JsonArray,JsonArray)": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.fleece.mapper.NumberClass.equals(Object)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.JohnzonJsonb.toJsonValue(Object)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.JohnzonJsonLogic()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.RecordTest.roundTrip()": "better record support (after jdk14 validation)\n", "org.apache.johnzon.core.JsonPatchTest.testMovingArrayElement()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.reflection.Mappings.findConstructor(boolean)": "JOHNZON-39 constructor instantiation using @ConstructorProperties\n", "org.apache.johnzon.core.JsonParserTest.testUTF16LEBOMStream()": "JOHNZON-16 Fix BOM detection for UTF-8, new testcase for stream that throws an exception by Thiago Veronezi\n", "org.apache.johnzon.jsonb.CdiAdapterTest.adaptTo(Model)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonArrayImplTest.arrayToString()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbWriteTest.getBool()": "JOHNZON-148 fixed checkstyle, added test with Boolean in Object\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setPrimitiveConverters(boolean)": "JOHNZON-84 getting rid of default converters for primitives\n", "org.apache.johnzon.mapper.ClassMapping.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter,Getter,Method,Method)": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.jsonb.DateTypes.getCalendar()": "complete support for DateFormat", "org.apache.johnzon.mapper.AdapterTest.run()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonb.PropertyNamingStrategyFactory.PropertyNamingStrategyFactory(Object)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.AdvancedEnumObject.AdvancedEnumObject(AdvancedEnum,List)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonb.cdi.JohnzonCdiExtension.cleanUp(BeforeShutdown)": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.mapper.internal.JsonPointerTracker.JsonPointerTracker(JsonPointerTracker,int)": "JOHNZON-135 write and read much more complex cyclic data\n", "org.apache.johnzon.mapper.Mapper.readTypedArray(JsonParser,Class,Class)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.getOwnerType()": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.jsonb.Dog.hashCode()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.toString()": "JOHNZON-239 transient support\n", "org.apache.johnzon.jsonb.DefaultMappingTest.instantiation()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.equals(Object)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonStreamParser.getLocation()": "initial import\n", "org.apache.johnzon.core.JsonGeneratorImplTest.simpleArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWbyte()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.FieldAndMethodAccessMode(boolean,boolean,boolean)": "adding a backward compatible constructor for FieldAndMethodAccessMode\n", "org.apache.johnzon.mapper.NumberClass.setLongNumber(long)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperEnhancedTest.buildTestClassInstance()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.TimestampAdapter.to(Long)": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,BufferStrategy,ConcurrentMap,boolean)": "fix pretty printing\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.hasNext()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonInMemoryParser.getBigDecimal()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.ThreadLocalBufferCache.release(T)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayImpl.getBoolean(int)": "JOHNZON-94 ignoring null and true/false serialization to ensure == works for these values\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderRemoveMissingPath()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodWriter(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.JsonPatchTest.testTestingArrayAsObjectMemberFailed()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.LiteralTest.toString()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.core.CharBufferThreadLocalProvider.CharBufferThreadLocalProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.Cyclist(String,Bike)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toStringCalendar(Calendar)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.converter.LocaleConverter.getKey()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.isNillable()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.MapperTest.StringHolder(String)": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.johnzon.mapper.User.getName2()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.map.LazyConverterMap.checkForDeprecatedTimeZone(String)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.NullObjectWithMap.getMap()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.buildArrayType(int,String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMaximumValidation.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,boolean)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.MapperTest.readArray()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.mapper.Person.getFirstName()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(ZoneOffset)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonGeneratorImpl.checkArrayOrObject(boolean)": "fix pretty printing\n", "org.apache.fleece.core.JsonParserTest.zeroCharInput()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonReaderImplTest.emptyOneCharBufferSize()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.getName()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.mapper.reflection.Mappings.findConverter()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.NumberClass.toString()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.fleece.mapper.CharClass.setCharArr(char)": "FLEECE-14 char handling in mapper\n", "org.apache.fleece.core.JsonArrayBuilderImpl.add(BigDecimal)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.commaChecks()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.SomeValue.getMeasurementTime()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.MapperBuilder.addObjectConverter(Class,ObjectConverter)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.jsonb.PolyBarAdapter.adaptToJson(Bar)": "JOHNZON-282: add support for @JsonbTypeAdapter at class level (#53)\n\n* JOHNZON-282: add support for @JsonbTypeAdapter at class level\r\n\r\n* add test with adapter at root object\r\n\r\n* remove recursion\r\n", "org.apache.johnzon.core.JsonGeneratorImplTest.writeKeyWrite()": "JOHNZON-208 ensure writeKey().write() pattern is valid in generator\n", "org.apache.johnzon.mapper.ObjectConverterTest.toString(Person)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.EnumSetObject.getEnumset()": "JOHNZON-150 add support for EnumSets\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setAccessModeName(String)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.hashCode()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.MapperBuilder.setInterfaceImplementationMapping(Map)": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.mapper.access.CompositeReader.CompositeReader(Reader,DecoratedType)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.MapperPerformanceTest.getContent()": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonOptional()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.TestBufferProvider.newBuffer()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.map.LazyConverterMap.to(Object)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.toNumber(JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setQueue(Queue)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonProviderDelegate.createWriter(Writer)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.MapperConfig.findObjectConverterReader(Class)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(GregorianCalendar)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonArrayImpl.immutable()": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail51()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.AdapterTest.from(Foo)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.CircularExceptionTest.getMarriedTo()": "JOHNZON-135 support recursive structures\n\nthis is the write part for now.\nWe still need to support de-serialisation\n", "org.apache.johnzon.core.JsonProviderImpl.createArrayBuilder()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperEnhancedTest.TestClass(TestClass)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testAddJsonArrayWithTargetNull()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator,AccessMode,boolean,boolean,int,Map)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.core.JsonParserTest.shortestNonEmtyJsonFile()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.testArrayRoundTrip()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "javax.json.bind.JsonbConfig.withPropertyOrderStrategy(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.TheObject.getPrimitives()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonStreamParserImpl.readNumber()": "simple value handling\n", "org.apache.fleece.core.JsonArrayListener.onKey(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.ByteShort.getNumByte()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.map.LazyConverterMap.addOffsetDateTimeConverter(AdapterKey)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonReaderImpl.onArray(Object)": "initial import\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeItem(Object)": "JOHNZON-71 swap mapper parts out to MappingGenerator\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addBDNpeIfNull()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.loadMapping(Type)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.core.JsonPatchImpl.JsonPatchImpl(List)": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.jaxrs.FleeceMessageBodyWriter.getSize(T,Class,Type,Annotation,MediaType)": "initial import\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.addValue(int,JsonValue)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.MapperBuilder.addCloseable(Closeable)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.mapper.MapUnwrapperWriter.cast(Type)": "JOHNZON-261 JOHNZON-260 better optional handling\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.fromJson(JsonValue,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonObjectImpl.getInt(String,int)": "Catching exceptions is not nice and does not perform very well\n", "org.apache.johnzon.jsonb.CharsDeSer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.Getter.Getter(AccessMode,boolean,boolean,boolean,boolean,MapperConverter,ObjectConverter,int,String)": "JOHNZON-114 @JohnzonIgnoreNested support to cut common cycles (JPA for instance)\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.Types.getPeriod()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.LocationTest.simpleLocationCrossingBufferBoundaries()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.SerializableJsonValue.equals(Object)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.core.JsonReaderFactoryImpl.createReader(InputStream,Charset)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.getNestedName()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.getDiscriminatorMapper()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonObjectImpl.getBoolean(String,boolean)": "JOHNZON-226 avoid JsonValue.equals as it is slow\n\nWe rather use JsonValue.ValueType comparison instead.\n", "javax.json.bind.JsonbConfig.getAsMap()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.jaxrs.Jsons.isJson(MediaType)": "initial import\n", "org.apache.johnzon.mapper.TheObject.equals(Object)": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue8()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.ByteShort.setNumByte(byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.util.ArrayUtil.newCollection(Object)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.LiteralTest.getFloatNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.fieldComparator(Class)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperTest.readObject()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,BigInteger)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonb.Person.setPersonAge(int)": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.jsonb.TimezoneTest.exceptionOnDeprecated()": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.fleece.mapper.org.apache.fleece.mapper.converter.EnumConverterTest.fromStringToEnum()": "initial import\n", "org.apache.johnzon.core.Types.visit(ParameterizedType)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.core.JsonParserTest.fail69()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.test.JsonbRule.apply(Statement,Description)": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.serialize(String,JsonGenerator,SerializationContext)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.fleece.core.JsonGeneratorImpl.checkObject()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setBboolean(boolean)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.TestClass.getMap()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail5()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.getSize(T,Class,Type,Annotation,MediaType)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.setType(BikeType)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.testSerializeObjectWithCollectionAndObjectConverter()": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPolymorphicDiscriminator(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.core.JsonPointerImpl.replace(JsonStructure,JsonValue)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.fleece.core.JsonLongImpl.getValueType()": "initial import\n", "org.apache.johnzon.core.JsonParserTest.threeLiterals()": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_00(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.converter.LocaleConverter.getFrom()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.mapper.TheObject.setNested(TheObject)": "initial import\n", "org.apache.fleece.mapper.MapperTest.readEmptyArray()": "initial import\n", "org.apache.johnzon.core.JsonStreamParserImpl.tmc()": "JOHNZON-74 mention org.apache.johnzon.max-string-length in error message\n", "org.apache.johnzon.jsonb.DateTypes.getOffsetDateTime()": "complete support for DateFormat", "org.apache.johnzon.mapper.EnumTest.SimpleObject(MyEnum)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.mapper.converter.ShortConverter.toString(Short)": "initial import\n", "org.apache.johnzon.jsonb.Types.setDuration(Duration)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.converter.BigIntegerConverter.toString(BigInteger)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.Entry.Entry(Event,JsonValue)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,double)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mappings.getAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.mapper.SoseClass.getSose()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.mapper.Mapper.writeObject(Object,Writer)": "initial import\n", "org.apache.johnzon.mapper.MapperTest.getInteger()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.fleece.mapper.MapperEnhancedTest.TestClass(TestClass)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonGeneratorImplTest.numbers()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.NumberClass.setIntNumber(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.User.setId(long)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.getbWlong()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.BufferStrategyFactoryTest.verify(Object)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jsonb.ClassDecoratedType.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.map.LazyConverterMap.fromCalendar(String,Function)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getLocalDate()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.core.JsonArrayImpl.getBoolean(int)": "initial import\n", "org.apache.fleece.core.JsonArrayImpl.getInt(int)": "initial import\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(InputStream,Class)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.jsonb.JsonbAccessMode.validateAnnotations(Object,JsonbTypeAdapter,JsonbDateFormat,JsonbNumberFormat,JsonbValue)": "removing @JsonbValue\n", "org.test.apache.johnzon.mojo.SomeValue.get_00()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.map()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.TestClass.setInner(TestClass)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.TypesTest.assertTypeParameters(Class,Class,Type[])": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.MapperTest.getIntVal()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.fleece.core.JsonGeneratorFacade.writeNull(String)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.mapper.MapperConfig.getEncoding()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.fleece.core.JsonObjectImpl.clear()": "initial import\n", "org.apache.johnzon.mapper.Mappings.Setter(AccessMode,boolean,boolean,Type,Adapter,int)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.converter.EnumConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.TheObject.getIntVal()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.jsonb.PartialOrder.getYetAnotherIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.test.apache.johnzon.mojo.SomeValue.set_999(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.Mapper.stream(Writer)": "JOHNZON-148 fixed Stream serializing for primitives\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.eatValueStart(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.core.JsonParserFactoryImpl.getDefaultJsonParserImpl(InputStream)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.RewindableJsonParser(JsonParser)": "completing previous commit, some missed case\n", "org.apache.johnzon.mapper.reflection.CollectionMapping.CollectionMapping(boolean,Class,Type)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonNumberTest.testBigInteger()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonPointerTest.testAddArrayElement()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.execute()": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.core.JsonParserTest.bigdecimal()": "FLEECE-3 JsonStreamParser.isIntegralNumber() does not throw IllegalStateException, patch from Hendrik Saly\n", "org.apache.johnzon.jsonb.Dog.equals(Object)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.fleece.core.JsonParserTest.fail8()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.fleece.core.JsonStreamParser.savePreviousStringBeforeOverflow(int,StringBuilder)": "initial import\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.createGenerator(OutputStream,Charset)": "initial import\n", "org.apache.johnzon.core.JsonStreamParserImpl.getLocation()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnsonJsonb.flush()": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.core.JsonParserTest.escapedStringAwareParser()": "Bugfix to prevent a \"bufferoverflow\" in parser when working with a recycled buffer\n", "org.apache.johnzon.websocket.internal.jsr.JsrEncoder.init(EndpointConfig)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.Bar.setValues(Map)": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.fleece.core.JsonGeneratorImplTest.fail3()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonPointer.remove(JsonValue,int,int)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.fleece.mapper.MapperTest.setMap(Map)": "initial import\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.getOwnerType()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.onObject(JsonObject)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonArrayImpl.getJsonString(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonObjectBuilderImplTest.testRemove()": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.core.JsonObjectImplTest.boolErrors()": "JOHNZON-121 classcastexception got getBoolean if the jsonvalue is wrong\n", "org.apache.fleece.core.JsonObjectBuilderImplTest.build()": "initial import\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.adaptToJson(UUID)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonParserTest.fail7()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.EnumAdapter.adaptToJson(EnumHolder)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findAnySetter(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.core.TypesTest.test()": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.jsonb.PartialModel.setFirst(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.lessOrEqualsThan()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.POJOWithMixedFieldAccess.setActive(Boolean)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperTest.setNumShort(short)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.ClassToWrite.getaLong()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.mapper.util.ArrayUtil.asList(short)": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.core.JsonGeneratorImpl.currentState()": "fix pretty printing\n", "org.apache.johnzon.mapper.EnumTest.testSimpleEnumWithCollectionAccessModeBoth()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.User.setName2(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.Getter.Getter(AccessMode,boolean,boolean,boolean,boolean,MapperConverter,int)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.MapperConfig.getInterfaceImplementationMapping()": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.jsonb.AttributesOrderingWithCounterClass.setThird(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonArrayImpl.JsonArrayImpl(List)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPolymorphicTypeLoader(Map)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.fleece.core.JsonProviderImpl.createWriter(OutputStream)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonNumberImpl.hashCode()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonLongImpl.bigDecimalValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,long)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.setName(String)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.toString()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JsonObjectImpl.getJsonArray(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.GenericTimeAdapter.from(T)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.jsonschema.spi.builtin.ContainsValidation.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.TestClass.setMap(Map)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonWriterImpl.writeArray(JsonArray)": "initial import\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.skipArray()": "completing previous commit, some missed case\n", "org.apache.johnzon.mapper.internal.AdapterKey.toString()": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonb.EnumHolder.EnumHolder(Enum)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.mapper.ClassMapping.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter,Getter,Method)": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.core.JsonParserTest.fail24()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.hashCode()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.jsonb.ParserGeneratorMappingTest.generator()": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.registerOperator(String,Operator)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.JohnzonJsonb.unwrapOptional(Object)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.fleece.core.JsonParserTest.dosProtected()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.fleece.core.JsonParserTest.simpleUTF16LEAutoDetect()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.reflection.Mappings.addGetterIfNeeded(Map,String,AccessMode,boolean)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.BrokenDefaultTest.get(Class,Object,String)": "adding a broken test to show why previous commit broke the buffer strategies\n", "org.apache.johnzon.mapper.AdderTest.adderObject()": "JOHNZON-198 basic adder support\n", "org.apache.johnzon.mapper.Mappings.addSetterIfNeeded(Map,String,AccessMode,boolean,Class,Map)": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.core.JsonStreamParserImpl.handleStartArray()": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.mapper.converter.URIConverter.toString(URI)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.hasNext()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.mapper.Foo.getName()": "JOHNZON-56 basic one level support of generics\n", "org.apache.fleece.core.JsonReaderImpl.read()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonDoubleImpl.checkFractionalPart()": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.mapper.Mapper.doConvertFrom(T,Adapter)": "JOHNZON-71 remove unused code\n\nThose parts got moved over to MappingGeneratorImpl\n", "org.apache.johnzon.jsonb.cdi.CDIs.isCanWrite()": "better CDI tracking of jsonb instances, can still need improvement for often created ones\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.call()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.fleece.mapper.Mapper.readObject(Reader,Type)": "initial import\n", "org.apache.fleece.mapper.TheObject.getArray()": "initial import\n", "org.apache.johnzon.core.JsonPatchTest.testDiff()": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.setInteger(int)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.fleece.core.JsonParserTest.shortestNonEmtyJsonFile()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonObjectImpl.getInt(String)": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.fail46()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.CircularObjectsTest.setMother(DeduplicatedPerson)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyReader.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.mapper.User.setCustom(String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.core.JsonGeneratorImplTest.boolLiteralArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.primitiveCollection()": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.fleece.core.JsonParserTest.fail70()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.MapperConfig.addObjectConverter(Class,ObjectConverter)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.ArgumentTypeResolver.visit(ParameterizedType)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,BigDecimal)": "renamed fleece to johnzon\n", "org.apache.fleece.jaxrs.FleeceProviderTest.asParam(Fleece)": "initial import\n", "org.apache.johnzon.core.JsonPointerImpl.hashCode()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonPointerUtilTest.testDecodeEmptyString()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.jsonb.AdapterTest.adaptFrom(Dummy)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.fleece.core.JsonGeneratorImpl.writeInt0(int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonInMemoryParser.getEvent(ValueType)": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.johnzon.core.JsonGeneratorImpl.checkObject(boolean)": "fix pretty printing\n", "org.apache.fleece.mapper.TheObject.getPrimitives()": "initial import\n", "org.apache.johnzon.mapper.MapperTest.setCollectionWrapper(List)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.testUTF16BEBOMStream()": "JOHNZON-16 Fix BOM detection for UTF-8, new testcase for stream that throws an exception by Thiago Veronezi\n", "org.apache.fleece.mapper.reflection.Mappings.ClassMapping(Class,Map,Map)": "initial import\n", "org.apache.johnzon.jsonb.Types.getTimeZone()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.map.LazyConverterMap.get(Object)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonParserStreamingTest.testValueStreamForArrays()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setOffsetDateTime(OffsetDateTime)": "complete support for DateFormat", "org.test.apache.johnzon.mojo.SomeValue.setWarmupIterations(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveObjectMember()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.converter.EnumConverterTest.fromEnumToString()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.mapToJsonValueComplex()": "JOHNZON-205: add support for arrays in toStructure\n", "org.apache.johnzon.mapper.Mapper.writePrimitives(JsonGenerator,String,Class,Object)": "JOHNZON-20 basic Map<String, Object> support\n", "org.apache.johnzon.jsonb.PartialModel.setThird(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.Mappings.MapUnwrapperWriter(Map,String)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.LiteralTest.setBool(boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.toString(Instant)": "JOHNZON-144 add a unit test to make the problem clear\n", "org.apache.johnzon.core.JsonReaderImplTest.specialWithStringReader()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.fail1()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonObjectImplTest.testToStringShouldReturnEscapedValue()": "Fix JsonObject#toString() to escape key names.\n", "org.apache.johnzon.jsonb.converter.JsonbLocalDateConverter.fromString(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.TestBufferProvider.newBufferCalls()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.getType()": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonb.Request.getName()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.fleece.core.JsonWriterFactoryImpl.JsonWriterFactoryImpl(Map)": "initial import\n", "org.apache.johnzon.core.SlowIs.SlowIs()": "JOHNZON-18, applied patch from Thiago Veronezi: JsonStreamParserImpl not filling up buffer consistently - thanks a lot for this issue report and patch!\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getArrayStream()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jsonb.Types.setZoneOffset(ZoneOffset)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.TheObject.setArray(TheObject)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.HierarchySerializationTest.parentFieldsAreSerializedBeforeChildOnes()": "JOHNZON-240 ensure child attributes are serialized after parent ones by default\n", "org.apache.johnzon.core.JsonStreamParserImpl.readNextNonWhitespaceChar()": "supporting /**/ comments\n", "org.apache.johnzon.jsonb.AnnotationOrderTest.setPersonName(String)": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(OutputStream,Charset,BufferStrategy,ConcurrentMap,boolean)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.mapper.NullTest.writeArrayWithNull()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.jsonb.JohnsonJsonb.isCollection(Type)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.Mapper.readObject(JsonValue,Type)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.build()": "Enhancement [JOHNZON-278] Return constant instead of new instance of empty block / empty array\n\nEven in these days of modern Java, reducing memory consumption, GC stress and memory fragmentation, are beneficial side aspects.\n\nIf makes no sense to create new empty instances of JsonArray and JsonObject again and again. For this case, JSON-P provides special constants.\n\nIt makes sense to return these constants always.\n\nSigned-off-by: Markus KARG <markus@headcrashing.eu>\n", "org.apache.johnzon.jsonschema.spi.builtin.MinimumValidation.Impl(String,Function,double)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.CompositeReader.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonb.JohnzonBuilder.get()": "JOHNZON-130 ensure access mode if configurable even for jsonb\n", "org.apache.johnzon.osgi.Activator.getJaxrsExtensionProperties(Dictionary,Config)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.fleece.core.JsonDoubleImpl.toString()": "initial import\n", "org.apache.johnzon.mapper.ObjectTypeTest.writeJson(Poodle,MappingGenerator)": "JOHNZON-72 added test for ObjectConverter\n", "org.apache.johnzon.mapper.ObjectTypeTest.getJson()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.Mapper.writeArray(T,OutputStream)": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.getInt(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.jaxrs.JsrMessageBodyReader.JsrMessageBodyReader()": "initial import\n", "org.apache.johnzon.mapper.DeduplicatedPerson.setMother(DeduplicatedPerson)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.core.StructureElement.StructureElement(StructureElement,boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.arrayObjectInArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperBuilder.addPropertyEditor(Class,Converter)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.BufferStrategyFactoryTest.testNotExistingStrategy()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setPretty(boolean)": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.core.util.ArrayUtil.asList(double)": "JOHNZON-226 use own Array.length\n", "org.apache.johnzon.core.JsonReaderImplTest.emptyArrayOneCharBufferSize()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testAddObject()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.NullObject.getEmptyArray()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.asSet(String)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.core.JsonGeneratorImplTest.prettySimple()": "fix pretty printing\n", "org.apache.johnzon.jsonb.JohnzonBuilder.findFactory()": "JOHNZON-287 JOHNZON-288 JOHNZON-289 add supportPrivateAccess for jsonbcreator in jsonbaccessmode + cleanup CDI property support\n", "org.apache.fleece.mapper.MapperEnhancedTest.setCharValue(char)": "FLEECE-14 char handling in mapper\n", "org.apache.johnzon.jaxrs.WildcardJsrProvider.shouldThrowNoContentExceptionOnEmptyStreams()": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.fleece.core.JsonArrayImpl.size()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.reflection.Getter.Getter(Method,boolean,boolean,boolean,boolean,Converter,int)": "caching a bit more reflection for objects, this can be reworked to be more adapted BTW\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPolymorphicDiscriminatorMapper(Map)": "JOHNZON-290 configuration of jaxrs provider for polymorphic config\n", "org.apache.johnzon.core.SerializablePrimitives.SerializableJsonValue(JsonValue)": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonb.PropertyNamingStrategyFactory.translateName(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.AnnotationOrderTest.getPersonAge()": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.jsonb.Types.setUrl(URL)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.fleece.core.JsonGeneratorImpl.writeStartArray(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.NanHolder.getNan()": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.setMimeType(String)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.write(String,String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.JohnzonAnyMappingTest.getAny()": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.jsonb.CdiAdapterTest.adaptTo(String)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.test.apache.johnzon.mojo.PrimaryMetric.getScoreConfidence()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.core.JsonGeneratorImplTest.numbers()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.StringerTest.Holder(byte)": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.jsonb.JsonbWriteTest.boolAsStream()": "JOHNZON-148 provide unit test\n", "org.apache.johnzon.jsonb.JsonbWriteTest.setBool(Boolean)": "JOHNZON-148 fixed checkstyle, added test with Boolean in Object\n", "org.apache.johnzon.core.JsonParserTest.testStreamReadNotAllBytes()": "JOHNZON-17 Thiago Veronezi: RFC4627AwareInputStreamReader - Make sure that we read all the bytes before throwing an exception\n", "org.apache.johnzon.jsonb.ConfigurableNamingStrategy.ConfigurableNamingStrategy(Function,char)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.converter.ReversedAdapter.from(A)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(InputStream,Charset,int,BufferStrategy,BufferStrategy)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeNull(String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.core.JsonNumberImpl.doubleValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonProviderImpl.createGenerator(Writer)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.jaxrs.WadlDocumentMessageBodyWriter.writeTo(Document,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage7()": "Improved handling of trailing garbage\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean)": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.test.apache.johnzon.mojo.SomeValue.getMode()": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.BufferStrategyFactoryTest.testFqcnBufferStrategy()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isNumberType(Type)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.test.apache.johnzon.mojo.PrimaryMetric.getScorePercentiles()": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.mapper.converter.IntegerConverter.toString(Integer)": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail36()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.MapperTest.tooLongShortAndByte()": "JOHNZON-177 blow up if java type range is exceeded\n\nthanks to Markus Bruckner for the report!\n", "org.apache.johnzon.mapper.Person.getLastName()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.substrImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.converter.Holder.Holder(byte)": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.fleece.core.JsonReaderImplTest.simpleBadBufferSize9()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonGeneratorImpl.justWrite(char)": "fix pretty printing\n", "org.apache.johnzon.mapper.ObjectConverterTest.fromString(String)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonGeneratorImpl.close()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.NumberClass.getDoubleNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.DBAccessPoodleConverter.fromJson(JsonValue,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.DefaultMappingTest.anonymous()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeStartObject(String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddInt()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.Pair.getI()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.CompositeReader.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonPointer.validateAdd(JsonValue)": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.mapper.Mapper.readObject(String,Type)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.jsonb.JsonbWriteTest.getValue()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonStreamParser.readValue()": "initial import\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jsonb.MoreTests.adaptToJson(UUID)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonPatchTest.testAddObjectMemberAlreadyExists()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,String)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.Types.setOptionalString(Optional)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.instance()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.writeValue(Class,boolean,boolean,boolean,boolean,Adapter,String,Object,ObjectConverter)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.mapper.NumberClass.setBi(BigInteger)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.access.CompositeWriter.CompositeWriter(Writer,DecoratedType)": "JOHNZON-102 cleaning CompositeDecoratedType usage to avoid coding errors\n", "org.apache.johnzon.mapper.MapperGenericsTest.setName(String)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.MapperConfig.findObjectConverterWriter(Class)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.JohnzonJsonb.matchesType(Class,Class)": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.fleece.core.JsonProviderDelegate.createParser(Reader)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.jsonb.JsonbTransientTest.setId(long)": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.jsonb.JohnzonBuilder.doCreate()": "use jsonp as base for jsonb and not johnzon internals\n", "org.apache.fleece.mapper.LiteralTest.setBi(BigInteger)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.ReaderHandler.create(JsonReaderFactory)": "simple value handling\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.JohnzonDeserializationContext(MappingParser,BufferStrategy)": "use jsonp as base for jsonb and not johnzon internals\n", "org.apache.johnzon.mapper.MetaMapperTest.getName()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,JsonValue)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getArrayStream()": "completing previous commit, some missed case\n", "org.apache.johnzon.jsonb.BarAdapter.adaptToJson(Bar)": "fix JsonbAdapter gerneric types\n\nIt's now 1:1 with the spec.\n", "org.apache.johnzon.mapper.MapperEnhancedTest.getDates()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.invalidKeyWithoutValue()": "Fixed a bug which causes that invalid json was not detected\n", "org.apache.fleece.core.SingletonProvider.SingletonProvider(int)": "supporting several buffer cache strategies\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.emptyArrayInEmtyArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setAccessModeFieldFilteringStrategyName(String)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,JsonValue)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.jsonb.JsonbReadTest.propertyMappingNewLineTabs()": "JOHNZON-157 add more tests and remove obsolete code\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.toStringFromLocalDateTime(Instant)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.nullArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.AnnotationOrderTest.getPersonGender()": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.fleece.jaxrs.JsrMessageBodyReader.readFrom(Class,Type,Annotation,MediaType,MultivaluedMap,InputStream)": "initial import\n", "org.apache.johnzon.mapper.StringHolder.setValue(String)": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.fleece.core.JsonArrayListener.onLong(long)": "initial import\n", "org.apache.johnzon.jsonb.api.experimental.Value.Value(String,int)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.fleece.core.JsonCharBufferStreamParser.JsonCharBufferStreamParser(Reader,int,BufferStrategy)": "supporting several buffer cache strategies\n", "org.apache.johnzon.jsonb.Types.setGregorianCalendar(GregorianCalendar)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.getLastName()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(LocalDate)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.JsonArrayBuilderImpl(JsonArray)": "JOHNZON-96 implement JSON-P 1.1 API\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.QueueClass.getQueue()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.Person.Person(String)": "JOHNZON-135 support recursive structures\n\nthis is the write part for now.\nWe still need to support de-serialisation\n", "org.apache.johnzon.jsonb.JohnzonBuilder.findFactory(boolean)": "JOHNZON-287 JOHNZON-288 JOHNZON-289 add supportPrivateAccess for jsonbcreator in jsonbaccessmode + cleanup CDI property support\n", "org.apache.johnzon.mapper.MappingParserImpl.buildArray(Type,JsonArray,Adapter)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.getActualTypeArguments()": "JOHNZON-133 ensure we test correctly jaxrs types and not just assume the signature is right\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.onString(JsonString)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonGeneratorFacade.writeStartArray()": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.johnzon.jsonb.JsonbJsonValueTest.to()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.to(JsonType)": "fix JsonbAdapter gerneric types\n\nIt's now 1:1 with the spec.\n", "org.apache.johnzon.core.JsonObjectImplTest.testIsNullShouldReturnTrue()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.fleece.core.JsonReaderImplTest.parseLarge130KbJsonFile()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.MapperBuilder.setSupportsComments(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_900()": "better to use double instead of integer when guessing the type\n", "org.apache.fleece.core.ThreadLocalProvider.ThreadLocalProvider(int)": "supporting several buffer cache strategies\n", "org.apache.fleece.core.JsonProviderDelegate.createReaderFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.fleece.core.JsonGeneratorImpl.justWrite(char)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.AdapterTest.adaptValue()": "JOHNZON-282: add support for @JsonbTypeAdapter at class level (#53)\n\n* JOHNZON-282: add support for @JsonbTypeAdapter at class level\r\n\r\n* add test with adapter at root object\r\n\r\n* remove recursion\r\n", "org.apache.fleece.core.JsonParserTest.read()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonLocationImpl.toString()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testDouble()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.johnzon.core.TypeVisitor.visit(ParameterizedType)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.array()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.mapper.MapperEnhancedTest.setSose(SortedSet)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonMergePatchImpl.applyJsonObjectPatch(JsonObject,JsonObject)": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.jsonb.DateTypes.getDate()": "complete support for DateFormat", "org.apache.johnzon.jsonb.DefaultMappingTest.setFirst(String)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonParserFactoryImpl.createParser(Reader)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.fleece.core.JsonArrayImpl.value(int,Class)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JsonReaderImpl.checkType(Class,JsonStructure)": "JOHNZON-111 ensure to fail with a jsonexception when reading a wrong type of value with jsonreader, thanks Michele Vivoda\n", "org.apache.johnzon.mapper.IndirectAdapterTest.LocalDateAdapter()": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.fleece.core.JsonGeneratorFactoryImpl.createGenerator(OutputStream)": "initial import\n", "org.apache.johnzon.core.TypesTest.variable(String)": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.core.JsonParserTest.testUTF8Stream()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserTest.escapeStart()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.util.ArrayUtil.getArrayTypeFor(Class)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.StringBuilderQueueProvider.newInstance(int)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonBuilder.addDateFormatConfigConverters(Map,ZoneId)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.init()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.TypeAdapter.getTo()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.JohnzonAnyMappingTest.roundTrip()": "JOHNZON-85 @JohnzonAny\n", "org.apache.fleece.core.JsonGeneratorImpl.writeNull(String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.converter.JsonbConverterToString.toString(T)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.core.JsonPointerTest.testConstructorWithNullShouldThrowNullPointerException()": "Implemented JsonPointer\n", "org.apache.johnzon.jsonb.POJOWithMixedFieldAccess.isValid()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPatchTest.testCopyObjectMemberToObjectMember()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findPt(Class,Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.getClassOrPackageAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testFloat()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyReader.isReadable(Class,Type,Annotation,MediaType)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.reflection.Mappings.findConverter(boolean,AccessMode)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.ClassToWrite.setaLong(long)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.minusImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonschema.spi.builtin.ContainsValidation.ItemsValidator(String,Function,JsonSchemaValidator)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonGeneratorImpl.JsonGeneratorImpl(Writer,BufferStrategy,boolean)": "JOHNZON-195 ensure jsongenerator can write pritmitives directly (jsonp 1.1) and it still fails when it writes array items in an object\n", "org.apache.johnzon.mapper.map.LazyConverterMap.parseZonedDateTime(String,DateTimeFormatter,ZoneId)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.core.JsonObjectListener.onValue(String,String)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.core.JsonReaderImplTest.specialKeysWithStringAsByteArrayInputStream()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.fleece.mapper.TheObject.setInteger(int)": "initial import\n", "org.apache.johnzon.jsonb.DateTypes.getGregorianCalendar()": "complete support for DateFormat", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.bindEndpoint()": "Test fix - JsonBindingProvider added to secondary server to not influence pre existing tests", "org.apache.johnzon.core.JsonParserTest.testUTF16BEStream()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset)": "JOHNZON-71 moved attributeOrder to MapperConfig\n", "org.test.apache.johnzon.mojo.PrimaryMetric.setScoreError(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.core.SerializableJsonValue.toString()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.missingSome()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.ThreadLocalProvider.newBuffer()": "supporting several buffer cache strategies\n", "org.apache.johnzon.core.JsonWriterImplTest.arrayValueWriter()": "JOHNZON-195: enhanced JsonWriterImplTest unit test to writer all kinds of values and fixed JsonGeneratorImpl accordingly.\n", "org.apache.johnzon.mapper.MapperConfig.getSerializeValueFilter()": "JOHNZON-115 add SerializeValueFilter\n", "org.apache.fleece.core.JsonNumberImpl.intValue()": "initial import\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_999999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.getMethod()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonschema.spi.builtin.MaximumValidation.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.converter.TimestampAdapterTest.setDate(Date)": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.johnzon.mapper.NullTest.writeListWithNullWithinMap()": "fixing checkstyle\n", "org.apache.johnzon.mapper.ObjectSerializationTest.primitiveBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.fleece.core.JsonNumberImpl.longValue()": "initial import\n", "org.apache.johnzon.mapper.MappingParserImpl.toValue(Object,JsonValue,Adapter,Adapter,Type,ObjectConverter)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.access.FieldAccessMode.FieldWriter(Field)": "JOHNZON-23 field access support\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.testCreateArrayBuilderWithCollectionInitialData()": "JOHNZON-96 add test + logic for ArrayBuilder ft of JSONP-1.1\n", "org.apache.johnzon.core.JsonPatchTest.testCopyArrayMemberFromIndexOutOfBounds()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.core.JsonArrayImpl.JsonArrayImpl(List,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.DefaultPropertyVisibilityStrategy.isVisible(Method)": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.johnzon.mapper.MapperPerformanceTest.setContent(Integer)": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.asParam(Johnzon)": "JOHNZON-67 ensure list can be serialized in jaxrs mapper even if we lost the generics\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.uniqueItems()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jaxrs.JohnzonMessageBodyWriter.JohnzonMessageBodyWriter()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.mapper.CircularExceptionTest.setMarriedTo(Person)": "JOHNZON-135 support recursive structures\n\nthis is the write part for now.\nWe still need to support de-serialisation\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setStringArray(String)": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonParserTest.isIntegralThrowsISE()": "FLEECE-3 JsonStreamParser.isIntegralNumber() does not throw IllegalStateException, patch from Hendrik Saly\n", "org.apache.johnzon.core.JsonParserTest.testGetValueOfNumberType()": "Fix JsonParser.getValue()\n", "org.apache.johnzon.mapper.CircularObjectsTest.getFather()": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.jsonb.Types.getLocalTime()": "JOHNZON-196 support of LocalTime in JSON-B\n", "org.apache.johnzon.core.BufferStrategyFactory.QueueProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.DeduplicatedPerson.setName(String)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.jsonb.CdiAdapterTest.Root(Model)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.jsonb.ParserGeneratorMappingTest.parser()": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.mapper.Mapper.buildArrayWithComponentType(JsonArray,Class)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonReaderImplTest.simpleBadBufferSize8()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.LiteralTest.hashCode()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.CompositeWriter.getAnnotation(Class)": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.fleece.core.JsonArrayImpl.retainAll(Collection)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jaxrs.JsrMessageBodyWriter.JsrMessageBodyWriter()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.TypesTest.SimplifiedTypeVariable(String)": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxLengthValidation.Impl(String,Function,int)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.write(String,boolean)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.mapper.access.FieldWriter.write(Object,Object)": "JOHNZON-306 more details on which field/method failed to bind\n", "org.apache.johnzon.mapper.converter.StringConverter.fromString(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.PartialOrder.getAnotherIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.jsonb.SerializerTest.roundTrip()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jaxrs.JsrProviderTest.client()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonschema.spi.builtin.EnumValidation.Impl(Collection,String,Function)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.Person.setMother(Person)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.johnzon.mapper.GetterSetterRespectTest.getName()": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.fleece.core.JsonStreamParser.getString()": "initial import\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.JsonArrayBuilderImpl(Collection,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.mapper.reflection.JohnzonParameterizedType.findUserParameterizedType()": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.mapper.reflection.Mappings.findConverter(Method)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.NullTest.writeListWithNullWithinType()": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.fleece.mapper.MapperEnhancedTests.writeReadSortedMap()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.jsonb.TransientTest.transientFieldIsIgnored()": "JOHNZON-239 transient support\n", "org.apache.johnzon.mapper.converter.LocaleConverter.getTo()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.Mappings.ClassMapping(Class,AccessMode,Map,Map)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.JohnzonBuilder.generatorConfig()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.PatchValue.hashCode()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.Mapper.Mapper(JsonReaderFactory,JsonGeneratorFactory,boolean,Map,int,Comparator)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.toType(Type)": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(JsonArrayBuilder)": "JOHNZON-110 improve long support impl\n", "org.apache.fleece.core.JsonReaderFactoryImpl.createReader(Reader)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.jsonb.ParsingCacheEntry.ParsingCacheEntry(DecoratedType)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.RFC4627AwareInputStreamReader.RFC4627AwareInputStreamReader(PushbackInputStream)": "JOHNZON-284 respect user charset when provided\n", "org.apache.johnzon.mapper.MapperConfigTest.testfindObjectConverterConverterForObject()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.SerializerTest.nullValuesInEnumList()": "JOHNZON-186 fix NPE in EnumConverter\n", "org.apache.johnzon.jsonb.serializer.DeserializationContextTest.deserialize(JsonParser,DeserializationContext,Type)": "Fixed [JOHNZON-277]\n\nCustom deserializer fails with inner empty JSON block {} / [] at START_OBJECT /\nSTART_ARRAY.\n\nSigned-off-by: Markus KARG <markus@headcrashing.eu>\n", "org.apache.fleece.mapper.MapperTest.setLongnumber(long)": "initial import\n", "org.apache.johnzon.mapper.NumberClass.isBool()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.MapperEnhancedTest.getMap()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testBoolean()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.johnzon.mapper.RecordTest.toString()": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.jsonb.JsonbReadTest.testValidBase64()": "JOHNZON-164 add a unit test for JsonB throwing JsonbException on wrong data\n", "org.apache.johnzon.mapper.MapperTest.getNumShortA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.SimplePropertyNillable.setValue(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.SuppressConversionMappingParser.SuppressConversionMappingParser(MappingParserImpl,JsonObject)": "JOHNZON-72 removed unnecessary method from interface\n\nSuppress conversion for same instance via internal class\n", "org.apache.johnzon.core.JsonNumberImpl.longValueExact()": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.core.JsonGeneratorImplTest.prettyArray()": "JOHNZON-82 more prettification tests for arrays\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.nullArrayNonChaining()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonParserTest.arrayFollowedByGarbage2()": "Improved handling of trailing garbage\n", "org.apache.johnzon.mapper.access.SingleEntryFieldFilteringStrategy.select(Class)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.core.JsonProviderDelegate.createPatchBuilder(JsonArray)": "JOHNZON-95 fix PatchBuilder API and invocation\n", "org.apache.johnzon.jaxrs.WildcardConfigurableJohnzonProvider.setEnforceQuoteString(boolean)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.mapper.Mapper.readArray(Reader,Class)": "initial import\n", "org.apache.johnzon.jsonb.extension.JsonValueReader.getInput()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.mapper.converter.ByteConverter.toString(Byte)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.LiteralTest.getIntNumber()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getObjectStream()": "completing previous commit, some missed case\n", "org.apache.fleece.jaxrs.JsrMessageBodyWriter.writeTo(JsonStructure,Class,Type,Annotation,MediaType,MultivaluedMap,OutputStream)": "initial import\n", "org.apache.johnzon.jsonb.MyVisibility.isVisible(Field)": "adding a test for DefaultPropertyVisibilityStrategy\n", "org.apache.johnzon.core.JsonStreamParserImpl.JsonStreamParserImpl(Reader,int,BufferStrategy,BufferStrategy)": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.osgi.Activator.JsonbJaxrsProviderFactory(Config)": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.fleece.mapper.MapperException.MapperException(Throwable)": "initial import\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.set(int,JsonValue)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.mapper.reflection.CompositeWriter.isNillable()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.core.JsonParserTest.fail65()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(double)": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.core.JsonArrayBuilderImpl.add(int,long)": "some jsonp 1.1 impl - to check more once Mark will have fixed the build\n", "org.apache.johnzon.mapper.CompositeReader.isNillable()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.close()": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.reduce()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.Mappings.findConverter(boolean,AccessMode)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.mapper.NumberClass.setFloatNumber(float)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.SomeDocument.getContent()": "JOHNZON-179 improve writeArray performance\n\nArray.get is really slow, so I rewrote the array handling\nto render native types separately.\n", "org.apache.johnzon.core.JsonNumberImpl.hashCode()": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.core.JsonPatchDiffTest.testDiffReplaceObject()": "JOHNZON-103 added tests for REPLACE\n", "org.apache.johnzon.mapper.ObjectTypeTest.testGenericList()": "JOHNZON-138 add Collection support for @JsonbTypeSerializer\n\nand also for @JsonbTypeDeSerializer.\n\nThey will now be applied to all their children\n", "org.apache.johnzon.jsonb.JsonStringParserAdapter.getString()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.MyDataVisibility.put(String,String)": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.unbind()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.johnzon.core.AbstractJsonFactory.getString(String,String)": "JOHNZON-284 respect user charset when provided\n", "org.apache.johnzon.mapper.Mappings.handleVirtualObject(Collection,JohnzonVirtualObject,Map,Map,Map,Map,boolean,Class)": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.mapper.Mapper.toValue(JsonValue,Converter,Converter,Type)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.Mappings.ClassMapping(Class,AccessMode,Map,Map,Adapter,ObjectConverter,ObjectConverter)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.toStringFromZonedDateTime(Instant)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonb.JsonbTransientTest.getName()": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.jsonb.extras.polymorphism.DeSerializer.eatTypeKey(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jsonb.AdapterTest.testAdapterOnEnum()": "JOHNZON-184 fix TypeAwareAdapter support for other types than String\n", "org.apache.johnzon.jsonschema.spi.builtin.EnumValidation.apply(JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.write(OutputStream)": "JOHNZON-57 ensuring to use signature type to test using reference checks in our providers\n", "org.apache.fleece.mapper.TestClass.setString(String)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.JsonParserTest.fail41()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.numJsonValueArray()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.JsonPrettyGeneratorImpl(OutputStream,BufferStrategy,ConcurrentMap)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.IndirectAdapterTest.from(T)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,JsonValue)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperBuilder.getAdapters()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.core.JsonGeneratorImpl.toUnicode(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addJOBuilderNpeIfNull()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(BigInteger)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeStartObject()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.InterfaceMappingTest.mapInterface()": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.core.JsonProviderImpl.createValue(int)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.fleece.core.JsonGeneratorImpl.writeEnd(char)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonschema.spi.builtin.MinimumValidation.toError(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.User.getCustom()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.next()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.reflection.Mappings.Setter(AccessMode,boolean,boolean,Type,Adapter,int)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.Customer(String,String)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.core.JsonParserTest.fail49()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbTypesTest.readAndWriteWithDateFormats()": "complete support for DateFormat", "org.apache.johnzon.core.JsonGeneratorImplTest.notFluentGeneratorUsage()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonMergeBatchTest.testApplyValueOnObject()": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.setaLong(long)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.fleece.mapper.reflection.Mappings.isPrimitive(Type)": "initial import\n", "org.apache.johnzon.core.JsonProviderDelegate.createGenerator(OutputStream)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.ProvidedInstance.apply(Class)": "JOHNZON-163 small customizations on Alessandro fix to ensure we don't keep recreating jsonb instances and we log when a config is ignored\n", "org.apache.fleece.core.JsonReaderFactoryImpl.createReader(InputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.ObjectSerializationTest.numberBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.mapper.Mapper.read()": "JOHNZON-285 enable to support a fastpath for a reader implementing Supplier<JsonObject> and a writer implementing a Consumer<JsonValue>\n", "org.apache.johnzon.jsonb.MoreTests.getValue()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.Types.resolveArgumentTypes(Class,Class)": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.mapper.reflection.Mappings.getType()": "JOHNZON-40 virtual object support for our mapper\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getObject()": "completing previous commit, some missed case\n", "org.apache.johnzon.jsonb.MoreTests.serialize(UUID,JsonGenerator,SerializationContext)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonPointerUtilTest.testDecodeFirstTransformation()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.core.JsonPatchImpl.toString()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.johnzon.mapper.EnumTest.testSimpleField(Mapper)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.johnzon.mapper.access.Meta.findMeta(Annotation,Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,BigDecimal)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.Types.getSimpleTimeZone()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.internal.ConverterAdapter.getKey()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.fleece.jaxrs.xml.WadlDocumentToJson.convert(Document)": "Document to json @Provider mainly dedicated to wadls (not defined behavior in other cases)\n", "org.apache.johnzon.core.JsonParserTest.nested()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.LiteralTest.setShortNumber(short)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.SerializerTest.deserialize(JsonParser,DeserializationContext,Type)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonReaderImplTest.specialKeysWithStringAsByteArrayInputStream()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.JsonObjectGenerator.NamedBuilder(T,String)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonStreamParserImpl.handleStartArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.Dog.Dog(int,String,float,boolean,boolean)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.core.JsonParserTest.fail62()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.CycleRace(boolean,boolean,List)": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderAddJsonValueNull()": "JOHNZON-96 add test for JsonPatchBuilder with initialData\n", "org.apache.fleece.core.JsonProviderImpl.createObjectBuilder()": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.mapper.MapperBuilder.setReaderFactory(JsonReaderFactory)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.fail65()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.converter.JsonbZonedDateTimeConverter.toString(ZonedDateTime)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.setNestedId(Integer)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.Types.equals(Object)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.access.CompositeWriter.findObjectConverterReader()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.mapper.Mappings.getClassOrPackageAnnotation(Class)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.CalendarHolder.setInstance(Calendar)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.fleece.core.JsonBaseStreamParser.next()": "trying to avoid too much casts\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetIntWithDefaultShouldReturnDefault()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.core.JsonParserTest.fail15()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.setPretty(boolean)": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.mapper.MapperTest.getValue()": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.johnzon.core.SimpleStack.isEmpty()": "Performance improvement for JsonInMemoryParser (+30% for larger Json, 5-12% for smaller Json < 100kb)\n", "org.apache.fleece.mapper.NumberClass.getBg()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.DetailNameSerializer.serialize(DetailName,JsonGenerator,SerializationContext)": "JOHNZON-242 ensure serializer stack is not corrupted\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.roundTrip()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isGlobal()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.JsonProviderDelegate.createParserFactory(Map)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.MoreTests.adaptFromJson(String)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.mapper.LiteralTest.getLongNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jaxrs.JsrMessageBodyWriter.isWriteable(Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.getSerializationPredicate()": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.arrayObjectInArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.fleece.core.JsonParserTest.fail7()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.Bike.setManufacturer(String)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.superbiz.ModelSuperSuperBase.setChildB(B)": "JOHNZON-155 better support of TypeVariables\n", "org.apache.johnzon.jsonb.ConfigurableNamingStrategy.translateName(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.converter.StringerTest.testSerialize()": "JOHNZON-227 ensure converter output is mapped properly even when changing original type - this can need another commit to introspect converter types and fallback on dynamic mode instead of activating it upfront (for perfs)\n", "org.apache.johnzon.mapper.Setter.Setter(AccessMode,boolean,boolean,Type,Adapter,int)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.mapper.Mapper.readCollection(Reader,ParameterizedType)": "JOHNZON-71 Mapper cleanup, removed unused code\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.array()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.osgi.cdi.RegisterCdiExtension.getCdiExtensionProperties()": "JOHNZON-189 Add support for JAX RS Whiteboard\n", "org.apache.johnzon.mapper.reflection.Mappings.getClassOrPackageAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.johnzon.mapper.ReadPrimitiveTest.testInteger()": "JOHNZON-228 ensure all primitives are mapped in Mapper#readObject and not only JSON-P ones\n", "org.apache.fleece.core.JsonParserTest.fail18()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jaxrs.DelegateProvider.DelegateProvider(MessageBodyReader,MessageBodyWriter)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Bar.Bar(String,int)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonPatchDiff.diffJsonObjects(JsonPatchBuilder,String,JsonObject,JsonObject)": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.mapper.MetaMapperTest.getId()": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.core.SimplifiedTypeVariable.hashCode()": "Clarified Types.findParameterizedType()\n", "org.apache.johnzon.core.JsonPatchTest.testTestingArrayElementPlainArraySuccess()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.core.StringBuilderThreadLocalProvider.newInstance(int)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.access.BaseAccessMode.create(Object)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator,AccessMode,boolean)": "JOHNZON-23 field access support\n", "org.apache.johnzon.mapper.MapperConfig.isUseJsRange()": "JOHNZON-243 support of long as requested by jsonb (js range for serialization + BigDecimal on Number for deserialization)\n", "org.apache.johnzon.core.BufferStrategyFactory.newValue(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.fleece.mapper.NumberClass.getDoubleNumber()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.mergeImpl(JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.fleece.core.JsonPrettyGeneratorImpl.writeStartArray()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.ObjectSerializationTest.arrayString()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.core.HStack.size()": "fix pretty printing\n", "org.apache.johnzon.core.JsonObjectImpl.equals(Object)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.varObjectString()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.websocket.jsr.JsrArrayEncoder.doWrite(JsonWriter,JsonArray)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.copy(String,String)": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.core.ThreadLocalProvider.newBuffer()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findReader(Class)": "JOHNZON-81 better support of Object as mapping type - write side\n", "org.apache.johnzon.core.JsonLongImpl.toString()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.NillableTest.propertyWinsOverPackage()": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.TestClass.getString()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.converter.EnumConverter.EnumConverter(Class)": "initial import\n", "org.apache.johnzon.core.BufferStrategyFactory.release(StringBuilder)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.testClose()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.test.apache.johnzon.mojo.PrimaryMetric.set_950(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.mapper.LiteralTest.getBi()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.core.JsonProviderImpl.createValue(long)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.core.JsonProviderImpl.createPatchBuilder()": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.core.JsonProviderImpl.createArrayBuilder(Collection)": "JOHNZON-218 ensure to not allocate BufferStrategy.BufferProvider in JsonProviderImpl when not needed\n", "org.apache.johnzon.jsonb.CompositePOJO.getStringList()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.Types.getLocalDateTime()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.JsonbAccessMode.ReaderConverters(DecoratedType,BufferStrategy)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.jsonb.DefaultMappingTest.naming()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonschema.spi.builtin.MinItemsValidation.toString()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonBaseStreamParser.read()": "forgotten files from Hendrik Saly patch - sorry\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.MappingGeneratorImpl(MapperConfig,JsonGenerator,Mappings)": "JOHNZON-135 add MapperConfig switch to enable deduplication\n", "org.apache.johnzon.core.JsonReaderFactoryImpl.createReader(InputStream)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.fleece.mapper.converter.ByteConverter.fromString(String)": "initial import\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(OffsetDateTime)": "complete support for DateFormat", "org.apache.johnzon.core.RFC4627AwareInputStreamReader.RFC4627AwareInputStreamReader(PushbackInputStream,Charset)": "JOHNZON-284 respect user charset when provided\n", "org.apache.johnzon.core.JsonObjectImpl.remove(Object)": "basic validations: JsonObject should be immutable, JsonObjectBuilder#remove does not validate NPE for its input\n", "org.apache.fleece.core.JsonParserTest.fail52()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.TheObject.setMap(Map)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.BufferStrategyFactory.newCharProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.access.BaseAccessMode.getFieldsToRemove()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.FloatTest.setInstance(Float)": "JOHNZON-241 float can't be serialized as double\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodAccessMode(boolean,boolean,boolean)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.mapper.Mapper.findConverter(Class)": "using toString to write unknown types by default\n", "org.apache.johnzon.jsonschema.spi.builtin.MinLengthValidation.Impl(String,Function,int)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.core.JsonReaderImpl.JsonReaderImpl(JsonStreamParserImpl)": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jsonb.SerializerTest.setInstance(String)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.getAnnotation(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.fleece.core.JsonParserTest.fail48()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonschema.spi.builtin.MaximumValidation.isValid(double)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonProviderDelegate.mergePatch(JsonValue,JsonValue)": "JOHNZON-96 upgrade to last version of the JSON-P-1.1 spec\n\nWIP.\nMake it compile again.\nTests still broken.\nSome methods still missing.\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.getJsonb(Class)": "atomic jsonb supplier", "org.apache.johnzon.mapper.Mapper.mapCollection(Mappings,JsonArray)": "if raw type is Collection we have to handle it. Whatever type we use would be fnie, using ArrayList for now since it looks the most common. If we don't handle it then we can't ask for Collection<xxx> which would be a pain in a lot of cases\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.ifElsIfElseWithVarEval()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderTestJsonArray()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.mapper.Multiple.setDogs(List)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jsonschema.regex.JoniRegex.test(CharSequence)": "provide a Joni integration for jsonschema when nashorn will be completely dropped - todo: check if we shade it with minimal=true\n", "org.apache.johnzon.jsonschema.spi.builtin.MinItemsValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.JsonbVisitilityTest.testJsonPropertyInternalField()": "JOHNZON-99 JOHNZON-100 improve JSON-B private attribute support\n\n* evaluate the JsonVisibility\n* honor @JsonProperty fields\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.areEqualsWithCoercion(JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.Types.toString()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeEnd()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.jsonb.JohnzonBuilder.createJava8Converters(MapperBuilder)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.close()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteArray(Collection)": "JOHNZON-71 move writeArray to MappingGeneratorImpl\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getAnnotation(Parameter,Class)": "JOHNZON-87 meta annotation support\n", "org.apache.fleece.core.JsonInMemoryParser.addValueEvents(List,JsonValue)": "FLEECE-13 avoid to create object when no value is needed in in memory parser, thanks Hendrik again for this patch\n", "org.apache.johnzon.core.OverflowTest.ok()": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.jsonb.AnnotationOrderTest.getPersonName()": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.reflection.Generics.toResolvedTypes(Type)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.jsonb.TimezoneTest.valid()": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.FieldDecoratedType(Field)": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonb.ObjectSerializationTest.stringBoolean()": "JOHNZON-154 ensure we support Object as being dynamically evaluated\n", "org.apache.johnzon.core.JsonPatchTest.testReplacingObjectMember()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.jsonb.order.PerHierarchyAndLexicographicalOrderFieldComparator.distance(String)": "JOHNZON-240 ensure child attributes are serialized after parent ones by default\n", "org.apache.johnzon.core.JsonParserTest.fail42()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonMergeBatchTest.testApplyObjectOnValue()": "JOHNZON-96 implement JsonMergePatch\n", "org.apache.johnzon.mapper.converter.EnumConverter.toString()": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.core.JsonListenerFactory.subArray()": "initial import\n", "org.apache.johnzon.jsonb.extras.polymorphism.Polymorphic.serialize(T,JsonGenerator,SerializationContext)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.core.JsonGeneratorImpl.checkDoubleRange(double)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.DateConverter.initialValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerUtil.replace(String,String,String)": "JOHNZON-312 JsonPointer patch process shouldnt check subobjects/arrays not matching the pointer\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.array()": "initial import\n", "org.apache.johnzon.jaxrs.JsrMessageBodyReader.isReadable(Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonArrayBuilderImplTest.addJVNpeIfNull()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperBuilder.setEnforceQuoteString(boolean)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.emptyArrayInEmtyArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonschema.spi.ValidationContext.getPath()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeKey(String)": "JOHNZON-207 tolerate primitive in objects in serializers\n", "org.apache.johnzon.jsonb.JsonbWriteTest.getDate()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.reflection.Generics.resolveWildcardType(Type)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.mapper.converter.ClassConverter.toString(Class)": "renamed fleece to johnzon\n", "org.apache.fleece.core.BufferCache.release(T)": "initial import\n", "org.apache.johnzon.mapper.MapperConfig.MapperConfig(ConcurrentMap,Map,Map,int,boolean,boolean,boolean,boolean,boolean,boolean,AccessMode,Charset,Comparator,boolean,boolean,SerializeValueFilter,boolean,Boolean,Map,boolean,boolean)": "JOHNZON-255 JOHNZON-256 JOHNZON-257 JOHNZON-258 JOHNZON-259 disable enummap/enumset deserialization by default (jsonb tck) + support some container impl deserialization without falling back on the generic interface\n", "org.apache.fleece.mapper.Mapper.doCloseOrFlush(JsonGenerator)": "initial import\n", "org.apache.johnzon.jsonb.POJOWithNestedClass.setNestedClass(NestedClass)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.JsonbReadTest.boolFromString()": "JOHNZON-148 fixed Stream serializing for primitives\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.filterImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.LiteralTest.setByteNumber(byte)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.read(byte,int,int)": "JOHNZON-17 Thiago Veronezi: RFC4627AwareInputStreamReader - Make sure that we read all the bytes before throwing an exception\n", "org.apache.johnzon.mapper.Bool.isBool()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonParserTest.fail62()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonInMemoryParser.isInObject()": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.osgi.Activator.ExtendedJsonbJaxrsProvider(Config)": "JOHNZON-295 Only set JsonbJaxrsProvider configuration when non-default values are set\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>\n", "org.apache.fleece.core.JsonParserFactoryImpl.createInternalParser(InputStream)": "getting rid of some System properties configuring the factory\n", "org.apache.fleece.core.JsonParserTest.escaping()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.NullTest.setArray(Double)": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.jsonb.JohnzonBuilder.toString(ZoneId)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.access.MethodAccessMode.getClassOrPackageAnnotation(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.websocket.internal.mapper.MapperLocator.contextInitialized(ServletContextEvent)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.jsonb.JohnzonJsonbTest.longBounds()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.access.BaseAccessMode.select(Class)": "JOHNZON-176 adding a FieldFilteringStrategy for ignored fields\n", "org.apache.fleece.jaxrs.JsrMessageBodyWriter.JsrMessageBodyWriter(JsonWriterFactory,boolean)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail18()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.ClassDecoratedType(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.fleece.mapper.Mapper.toObject(JsonValue,Type)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getLocation()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jsonb.JohnsonJsonb.write(char,int,int)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.fleece.mapper.Mapper.buildArrayWithComponentType(JsonArray,Class)": "initial import\n", "org.apache.johnzon.core.JsonPatchTest.testCopyArrayMember()": "JOHNZON-97 implemented JsonPatch\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.nestedType()": "JOHNZON-191 ensure we validate the right value for meta validation (jsonschema): patternproperties and additionalProperties\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeJsonValue(String,JsonValue)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.streamOutput()": "JOHNZON-58 splitting provider in X and WidlcardX\n", "org.apache.johnzon.mapper.MapperTest.writeArrayOfArray()": "JOHNZON-36 nested list support\n", "org.apache.johnzon.mapper.converter.DateConverter.toString(Date)": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.SomeValue.get_990()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetBooleanMissingKeyShouldThrowNullPointerException()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String,long)": "renamed fleece to johnzon\n", "org.apache.fleece.core.ValueBuilder.next()": "initial import\n", "javax.json.bind.JsonbConfig.withStrictIJSON(Boolean)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.ObjectTypeTest.getJavaObject()": "JOHNZON-72 added ObjectConverter support for reading json\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.getVersion()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.CustomParameterizedTypeTest.getOwnerType()": "JOHNZON-132 handle custom ParameterizedType in buildObject\n", "org.apache.johnzon.jsonb.JsonbReadTest.date()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonschema.spi.builtin.ExclusiveMinimumValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.GetterSetterRespectTest.run()": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.core.DiffBase.isJsonArray(JsonValue)": "JOHNZON-103 add createMergeDiff handling\n", "org.apache.johnzon.mapper.Mappings.CompositeReader(AccessMode[])": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.model.packageformat.FormatFromPackageModel.setInstance(Double)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.jsonschema.spi.builtin.TypeValidation.toString()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.reflection.Records.isRecord(Class)": "JOHNZON-300 base to support java 14 records\n", "org.apache.johnzon.jsonb.DummyAdapter.adaptFrom(Dummy)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.mapper.internal.ConverterAdapter.getTo()": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.Bool.setBool(boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.ObjectTypeTest.writeJson(Dog,MappingGenerator)": "JOHNZON-71 improve Converter and MappingParser\n\npairprogramming together with rsandtner\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.doWriteObjectBody(Object)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.core.JsonParserTest.fail12()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.test.apache.johnzon.mojo.PrimaryMetric.getScore()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.MapperBuilder.setReadAttributeBeforeWrite(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.core.JsonPatchImpl.JsonPatchImpl(JsonProvider,List)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.jsonb.JsonValueParserAdapter.isIntegralNumber()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.core.JsonGeneratorFacade.write(String,BigInteger)": "JsonGenerator shouldn't force to use a fluent API. Thanks Hendrik again for this issue\n", "org.apache.fleece.core.JsonDoubleImpl.equals(Object)": "initial import\n", "org.apache.johnzon.mapper.AnEntity.getDate()": "JOHNZON-47 supporting openjpa java.util.date proxy\n", "org.apache.johnzon.jsonb.JohnzonBuilder.close()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.mapper.TestClass.getString()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.addDoubleNpeIfPosInfinite()": "FLEECE-1 thanks Hendrik Saly for this patch adding sanity checks in JsonArrayBuilder\n", "org.apache.johnzon.mapper.MapperTest.getNumShort()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.jsonb.serializer.JohnzonDeserializationContext.read(JsonParser)": "JOHNZON-170 adding polymorphic extension\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(InputStream,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.mapper.MapperBuilder.setBufferStrategy(String)": "JOHNZON-30 basic johnzon jsonp component config in our mapper/jaxrs provider\n", "org.apache.johnzon.jsonschema.spi.builtin.Impl.toNumber(JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.BufferStrategyFactory.newInstance(int)": "remove unused StringBuilder BufferProvider\n", "org.apache.johnzon.core.JsonProviderDelegate.createDiff(JsonStructure,JsonStructure)": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.fleece.mapper.TestClass.setMap(Map)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.Bike.getManufacturer()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setEncoding(String)": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.fleece.mapper.MapperTest.literal()": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.api.experimental.PolymorphicConfig.withDiscriminatorMapper(Function)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.mapper.StringHolder.getValue()": "JOHNZON-43 adding encoding as parameter to builder + using utf8 by default in mapper + adding johnzon.mapper.encoding system property for external config\n", "org.apache.fleece.core.JsonReaderImpl.JsonReaderImpl(InputStream)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonb.converter.JsonbLocalDateTimeConverter.fromString(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.core.JsonStreamParserImpl.cust(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.Types.ArgumentTypeResolver(Class)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.jsonb.DefaultMappingTest.toJsonAttributesOrdering()": "JOHNZON-240 ensure child attributes are serialized after parent ones by default\n", "org.apache.johnzon.jsonb.JohnzonBuilder.doCreateJsonb(boolean,boolean,Mapper)": "no functional change, just extracting the JohnzonJsonb instantiation (+cdi tracking) in a dedicated method to be able to easily drop it with graalvm like tools (or asm rewriting code)\n", "org.apache.johnzon.core.JsonPatchBuilderImpl.JsonPatchBuilderImpl(JsonProvider,JsonArray)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.JsonObjectGenerator.write(String,JsonValue)": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.johnzon.core.JsonPatchDiffTest.testAddDiffNewObjectWithEscaping()": "JOHNZON-103 add more tests for patches\n", "org.apache.johnzon.jsonb.StatusAdapter.adaptFromJson(Integer)": "JOHNZON-184 fix TypeAwareAdapter support for other types than String\n", "org.apache.johnzon.core.JsonPointerTest.testReplaceArrayElementWithInvalidIndex()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.MethodDecoratedType(Method)": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.multiplyImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.superbiz.MyMappings.findOrCreateClassMapping(Type)": "restoring previous ability to extend our mapping to add generation features to it\n", "org.apache.fleece.core.JsonReaderImplTest.getFactoryConfig()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.Mapper.readCollection(InputStream,ParameterizedType)": "JOHNZON-22 supporting private constructors in Mapper\n", "org.apache.johnzon.core.JsonObjectImplTest.testGetIntMissingKeyShouldThrowNullPointerException()": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*\n", "org.apache.fleece.core.JsonObjectImpl.getString(String,String)": "initial import\n", "org.apache.johnzon.core.JsonProviderImpl.createPointer(String)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.fleece.core.JsonReaderImplTest.parseMedium11KbJsonFile()": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.Types.getRawType()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.fleece.jaxrs.Fleece.getName()": "initial import\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(LocalDateTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.jsonb.JsonbTypesTest.setTimeZone(TimeZone)": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.core.JsonParserTest.objectFollowedByGarbage()": "Improved handling of trailing garbage\n", "org.apache.johnzon.mapper.MapperTest.shortAndByte()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,double)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.fleece.jaxrs.FleeceProviderTest.client()": "initial import\n", "org.apache.johnzon.mapper.NullTest.setList(List)": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.\n", "org.apache.johnzon.jsonb.converter.JsonbNumberConverter.JsonbNumberConverter(JsonbNumberFormat)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.AnySupportTest.roundTrip()": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.core.JsonPatchDiff.JsonPatchDiff(JsonProvider,JsonStructure,JsonStructure)": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.fleece.jaxrs.FleeceProviderTest.fleece()": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.inheritance()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.pattern()": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.jsonb.Types.getGregorianCalendar()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.util.ArrayUtil.size()": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.mapper.access.MethodDecoratedType.getClassOrPackageAnnotation(Class)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.JsonObjectGenerator.writeStartArray()": "JOHNZON-203 first round of impl for JsonValue <-> pojo binding bypassing IO steps\n", "org.apache.fleece.core.JsonObjectImpl.getString(String)": "initial import\n", "org.apache.johnzon.core.JsonParserTest.fail52()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.IndirectAdapterTest.testIndirectAdapter()": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.jsonb.OrderTest.getAnotherIntInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.add(String,String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.ParameterizedTypeImpl.getRawType()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.core.JsonStreamParserImpl.getInt()": "Remove unnecessary code for minor speed improvement, replace Integer (object) with int (primitive)\n", "org.apache.fleece.mapper.Mapper.writeItem(JsonGenerator,Object)": "initial import\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.filter()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jaxrs.IgnorableTypes.isIgnored(Class)": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonObjectBuilderImpl.putValue(String,JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.Customer.getFirstName()": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.mapper.ClassToWrite.setInteger(int)": "JOHNZON-76 close JsonGenerator in finally block\n", "org.apache.johnzon.core.JsonReaderImplTest.special()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MappingParserImpl.mapCollection(Mappings,JsonArray,Adapter,ObjectConverter,JsonPointerTracker)": "JOHNZON-143 add @JohnzonDeduplicateObjects support\n\nThis allows to enable deduplicateObjects via an annotation on the root object.\nSee JOHNZON-135 for the underlying functionality.\n", "org.apache.johnzon.mapper.GenericTimeAdapter.to(String)": "JOHNZON-275 ensure Adapter types can be extracted when inheritance is used\n", "org.apache.johnzon.mapper.TheObject.getList()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonProviderDelegate.createWriterFactory(Map)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.jsonb.OrderTest.serialize(StringHolder,JsonGenerator,SerializationContext)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.fleece.core.JsonLongImpl.doubleValue()": "initial import\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.getCyclists()": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.mapper.EnumTest.testAdvancedEnumAccessModeField()": "JOHNZON-150 add support for EnumSets\n", "org.apache.johnzon.jsonb.JohnsonJsonb.fromJson(String,Class)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPointerUtilTest.testEncodeEmptyString()": "Update geronimo-json-spec from 1.0 to 1.1, add JsonPointer encode and decode methods\n", "org.apache.johnzon.mapper.reflection.Mappings.isPrimitive(Type)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.jsonb.PartialModel.getFourth()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.mapper.MapperEnhancedTest.getDates()": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.JsonbTypesTest.newJsonb()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.jsonb.DefaultMappingTest.setNestedName(String)": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getString()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeStartObject()": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.fleece.core.JsonLongImpl.hashCode()": "initial import\n", "org.apache.johnzon.jsonb.serializer.JohnzonSerializationContext.JohnzonSerializationContext(MappingGenerator)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.TestDTOWithOC.getDto()": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.fleece.core.JsonArrayBuilderImplTest.arrayInArray()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.ObjectTypeTest.from(Dog)": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.util.ArrayUtil.asList(double)": "JOHNZON-178 support Mapper#writeArray for primitives\n", "org.apache.johnzon.core.JsonStreamParserImpl.readNumber(char)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.isNillable(boolean)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.jsonb.ArrayContainer.setBbyte(byte)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.access.BaseAccessMode.findAdapter(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonParserTest.fail48()": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.LiteralTest.setFloatNumber(float)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.FloatHolder.getInstance()": "JOHNZON-241 float can't be serialized as double\n", "org.apache.johnzon.mapper.MapperConfig.getNoGeneratorAdapterTypes()": "JOHNZON-309 more tolerance of adapters (string)\n", "org.apache.johnzon.mapper.access.MethodAccessMode.getAnnotation(Class)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.Person.setPersonName(String)": "JOHNZON-118 fixing JsonbPropertyOrder handling\n", "org.apache.johnzon.jsonb.converter.JsonbConverterFromString.JsonbConverterFromString(JsonbAdapter)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.mapper.NullTest.writeNullObjectAllowNull()": "JOHNZON-21 (renamed setter/getter to method), implemented basic null and empty array handling (allow to have nulls in the serialization, allow to have/skip empty arrays in the serialization)\n", "org.apache.johnzon.core.JsonParserTest.fail72()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.OrderTest.setStringInstance(String)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.core.JsonProviderImpl.createMergeDiff(JsonValue,JsonValue)": "JOHNZON-218 get rid of JsonProviderDelegate\n\nNot needed anymore as we expose the whole API now.\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.isReadable(Class,Type,Annotation,MediaType)": "JOHNZON-299 jsonb MessageBodyReader/Writer provider excludes jsonp\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getObjectStream()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jsonschema.spi.builtin.MaxPropertiesValidation.create(ValidationContext)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonNumberImpl.bigDecimalValue()": "initial import\n", "org.apache.johnzon.mapper.Mapper.toObject(JsonValue,Type,Adapter)": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.fleece.core.JsonParserTest.testUTF32BEStream()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.DateFormatting.setDate(LocalDate)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.fleece.mapper.LiteralTest.setLongNumber(long)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.mapper.CycleRace.isTour()": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.jsonb.InterfaceMappingTest.getValue()": "JOHNZON-197 Support johnzon.interfaceImplementationMapping jsonb property (and mapper option)\n", "org.apache.johnzon.jaxrs.JsrMessageBodyWriter.JsrMessageBodyWriter(JsonWriterFactory,boolean)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.unbind()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperGenericsTest.setValue(T)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.converter.JsonbLocalDateConverter.toString(LocalDate)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.converter.JsonbDateConverter.toIsoString(Instant)": "JOHNZON-245 JOHNZON-246 JOHNZON-247 JOHNZON-248 calendar, date, timezone serializations fixes for jsonb + fixing adapters on classes serialization - was broken using jsonbtypeadapter on a class\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(long)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.ByteConverter.fromString(String)": "renamed fleece to johnzon\n", "org.test.apache.johnzon.mojo.ScorePercentiles.get_9999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.mapper.TheObject.setLongnumber(long)": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DefaultMappingTest.getAge()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonMergePatchDiff.diff(JsonValue,JsonValue)": "JOHNZON-210 reworking JsonObject/JsonArray#toString to use JsonGenerator\n", "org.apache.johnzon.core.JsonPatchDiff.JsonPatchDiff(JsonStructure,JsonStructure)": "JOHNZON-103 add tests and basic impl for JsonPatch Diff handling\n", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.visit(JsonStructure,Visitor)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.core.JsonStreamParser.getInt()": "initial import\n", "org.apache.johnzon.jsonb.api.experimental.JsonbExtensionTest.Value(String,int)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.johnzon.core.JsonDoubleImpl.longValue()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Foo.setName(String)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.core.JsonStreamParserImpl.defaultHandling(char)": "explicit handling of EOF in error + better comment handling - ie fail when accurate/not a comment\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getString()": "completing previous commit, some missed case\n", "org.apache.fleece.core.JsonBuilderFactoryImpl.createObjectBuilder()": "initial import\n", "org.apache.johnzon.mapper.MapperConfigTest.fromJson(JsonObject,Type,MappingParser)": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.core.JsonPatchTest.testTestingArrayAsObjectMemberSuccess()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.fromJson(JsonObject,Type,MappingParser)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.MapperConfig.isSupportsComments()": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.jsonb.DefaultMappingTest.accessors()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.core.JsonParserTest.escapeStart2()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.mapper.access.MethodWriter.MethodWriter(Method)": "JOHNZON-23 field access support\n", "org.apache.johnzon.jsonb.JohnzonConverterInJsonbTest.testJohnzonConverter()": "JOHNZON-144 use @JohnzonConverter in Jsonb too\n", "org.apache.johnzon.mapper.JsonGeneratorCloseTest.getName()": "JOHNZON-76 close JsonGenerator in finally block\n", "org.test.apache.johnzon.mojo.SomeValue.set_990(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.mapper.Mapper.writeValue(JsonGenerator,Class,boolean,boolean,boolean,boolean,String,Object)": "if we convert type to String then we need to write a String\n", "org.apache.johnzon.mapper.MetaMapperTest.compare(String,String)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.jsonb.converter.JohnzonJsonbAdapter.getFrom()": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.fleece.mapper.converter.EnumConverter.toString(T)": "initial import\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(String,Type)": "JOHNZON-126 thanks James Carman to have renamed JohnsonJsonb JohnzonJsonb\n", "org.apache.johnzon.jsonb.DateTypes.getLocalDateTime()": "complete support for DateFormat", "org.apache.johnzon.jsonb.SerializersRoundTripTest.setbString(String)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.jsonschema.spi.ValidationContext.ValidationContext(String,JsonObject)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.fleece.core.JsonObjectImpl.immutable()": "initial import\n", "org.apache.johnzon.mapper.MapperConfig.findObjectConverter(Class,Map,Map)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.core.JsonReaderImplTest.unicodeFailAscii()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.getParameterConverter()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,boolean)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.SerializablePrimitives.writeReplace()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogicTest.in()": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.core.JsonGeneratorImpl.writeStartObject(String)": "Fixed some minor possible bugs reported by FindBugs\n", "org.apache.johnzon.mapper.TypeInstance.getType()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.mapper.MappingParserImpl.buildArrayWithComponentType(JsonArray,Class,Adapter)": "JOHNZON-135 deserialise JsonPointers back to previously mapped objects\n", "org.apache.fleece.core.JsonParserTest.nested()": "initial import\n", "org.apache.johnzon.mapper.access.MethodAccessMode.MethodReader(Method,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.FieldAndMethodAccessMode(boolean,boolean)": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.jaxrs.WadlDocumentMessageBodyWriter.isWriteable(Class,Type,Annotation,MediaType)": "renamed fleece to johnzon\n", "org.apache.fleece.mapper.reflection.Mappings.createCollectionMapping(ParameterizedType,Class)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.core.SerializablePrimitives.readResolve()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonb.ArrayContainer.getBchar()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.mapper.MapperBuilder.setUseBigDecimalForObjectNumbers(boolean)": "JOHNZON-254 ensure object are deserialized in bigdecimal\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderTestInt()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.MapperConfigTest.createConfig(Map)": "JOHNZON-254 ensure object are deserialized in bigdecimal\n", "org.apache.johnzon.mapper.Mapper.writePrimitives(JsonGenerator,Object)": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.johnzon.mapper.MapperTest.literal()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.johnzon.core.JsonDoubleImpl.longValueExact()": "JOHNZON-120 AritmeticException if no fractional part is there in JsonNumber\n", "org.apache.johnzon.jsonschema.spi.builtin.ContainsValidation.onArray(JsonArray)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.fleece.core.JsonArrayImpl.getValueType()": "initial import\n", "org.apache.fleece.core.JsonGeneratorImpl.noCheckWriteAndForceComma(String)": "initial import\n", "org.apache.johnzon.jsonb.WriterConverters.isGlobal()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.getBike()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.core.JsonArrayImpl.hashCode()": "Catching exceptions is not nice and does not perform very well\n", "org.apache.fleece.core.JsonParserTest.fail33()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.jsonb.DynamicBufferResizingTest.main()": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.test.apache.johnzon.mojo.SomeValue.set_500(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.fleece.core.JsonGeneratorImplTest.generate()": "initial import\n", "org.apache.johnzon.mapper.Command.setAction(Action)": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.johnzon.mapper.MappingParserImpl.convertTo(Type,String)": "JOHNZON-223 ensure converters fallback on raw type for parameterized types\n", "org.apache.johnzon.jsonb.JsonStringParserAdapter.JsonStringParserAdapter(JsonString)": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.mapper.Command.setName(String)": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections\n", "org.apache.fleece.core.JsonParserTest.fail23()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.ifImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.DynamicMappingGenerator.writeObject(String,Object,JsonGenerator)": "JOHNZON-211 ensure the serialization context uses the passed key if the related method is called\n", "org.apache.johnzon.jsonb.DefaultMappingTest.isValid()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.access.FieldWriter.FieldWriter(Field,Type)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.JsonbTransientTest.getId()": "JOHNZON-68 transient and visibility rules are not 100% the same, noe needs a AND between field and method and the other a OR\n", "org.apache.johnzon.jsonb.OrderTest.setYetAnotherIntInstance(int)": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.mapper.MappingGeneratorImpl.convert(T)": "reupdating jsonb api\n", "org.apache.johnzon.jsonb.factory.SimpleJohnzonAdapterFactory.create(Class)": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.jsonb.StillGeneric.getInstance()": "JOHNZON-262 resolved first generics level for parameterized types\n", "org.apache.johnzon.mapper.internal.Streams.noClose(Reader)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.fleece.core.JsonArrayImpl.remove(int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.test.apache.johnzon.mojo.ScorePercentiles.set_1000(Integer)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.mapper.MapperBuilder.setTreatByteArrayAsBase64URL(boolean)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.mapper.Pair.getI()": "initial import\n", "org.apache.fleece.core.JsonParserTest.fail1()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.core.JsonParserTest.testUTF16LEStream()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.test.JsonbRule.toJson(Object,Type)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.fleece.core.JsonParserTest.fail11()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.fleece.jaxrs.JsrProviderTest.client()": "initial import\n", "org.apache.fleece.mapper.MapperEnhancedTests.TestClass(TestClass)": "FLEECE-8 various enhancements from Hendrik Saly, thanks a lot.\n", "org.apache.johnzon.mapper.ObjectTypeTest.getValue()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.core.JsonPointerTest.testGetValue3()": "JOHNZON-173 ensure all patch 'operations' use the same JsonProvider\n", "org.apache.johnzon.mapper.TestWithTypeConverter.fromJson(JsonbParser,Type)": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.jsonb.CdiAdapterTest.run()": "JOHNZON-64 CDI support for @JsonbAdapter\n", "org.apache.johnzon.core.JsonParserTest.fail3()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.DateTypes.setGregorianCalendar(GregorianCalendar)": "complete support for DateFormat", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.destroy()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.mapper.reflection.Mappings.Mappings(Comparator,boolean)": "JOHNZON-22 supporting private constructors in Mapper\n", "org.apache.johnzon.mapper.MapperBuilder.setPretty(boolean)": "ensuring mapper stays the only piece - excepted adapters map - where config can change at runtime + removing a johnzon-core import which shouldn't have been there\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setTreatByteArrayAsBase64(boolean)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.core.JsonWriterImpl.JsonWriterImpl(JsonGenerator)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonGeneratorImplTest.fail2()": "renamed fleece to johnzon\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueWithJsonArray()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderTestJsonValue()": "JOHNZON-96 remove own PatchOperation in favour of the spec one.\n\nspec-patch from rsandtner got applied, so we can now remove\nour own JsonPatchOperation and use the one from the spec.\n", "org.apache.johnzon.mapper.Mapper.isDeduplicateObjects(Class)": "JOHNZON-143 make isDeduplicateObjects config a ternary flag.\n\nThe rule is now:\n* _explicit_ decuplicateObjects set via config? -> use this\n* otherwise -> check @JohnzonDeduplicateObjects annotation\n* otherwise -> false\n", "org.apache.johnzon.mapper.Mappings.read(Object)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonObjectBuilderImpl.addAll(JsonObjectBuilder)": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseValidation.onNumber(JsonNumber)": "JOHNZON-171 more jsonschema validations - still not yet complete\n", "org.apache.johnzon.mapper.access.FieldAccessMode.FieldDecoratedType(Field)": "JOHNZON-23 field access support\n", "org.apache.johnzon.mapper.QueueClass.setQueue(Queue)": "renamed fleece to johnzon\n", "org.apache.fleece.core.LocationTest.simpleLocationCrossingBufferBoundaries()": "FLEECE-9 patch from Hendrik Saly enhancing perfs and compliancy, thank you so much\n", "org.apache.johnzon.core.JsonProviderImpl.createObjectBuilder()": "Minor performance improvements for writer and reader factories and for provider impl\n", "org.apache.johnzon.mapper.MapBuilderReader.findConverter()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.core.JsonGeneratorImplTest.emptyArray()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.jsonp.RewindableJsonParser.getLocation()": "completing previous commit, some missed case\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.maxLength()": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonPointerTest.testEqualsTrue()": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.mapper.ObjectTypeTest.testReadWithObjectConverter()": "example of wrapping with type serialization of a list - we surely need to enhance ObjectConverter to support that\n", "org.apache.johnzon.jsonb.Aggregate.equals(Object)": "JOHNZON-290 PolumorphicConfig support\n", "org.apache.johnzon.core.JsonInMemoryParser.current()": "JOHNZON-139 improve skipArray and skipObject\n\nThey both need to also work within objects.\n", "org.apache.johnzon.jsonb.DummyAdapter.adaptTo(String)": "updating jsonb impl - adapter still in progress (see list)\n", "org.apache.johnzon.jsonb.TypeInstance.getValue()": "JOHNZON-69 support List item converters for jsonb\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setBufferSize(int)": "JOHNZON-30 basic johnzon jsonp component config in our mapper/jaxrs provider\n", "org.apache.johnzon.jsonb.JsonbAccessMode.isNillable(JsonbProperty,JsonbNillable)": "JOHNZON-236 ensure nillable conflicts are resolved properly\n", "org.apache.johnzon.mapper.internal.Streams.noClose(Writer)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.mapper.util.ArrayUtil.asList(float)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.test.apache.johnzon.mojo.SomeValue.get_99999()": "better to use double instead of integer when guessing the type\n", "org.apache.fleece.core.JsonObjectBuilderImpl.add(String,BigDecimal)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.map.LazyConverterMap.toString(ZonedDateTime)": "[JOHNZON-317] lazy lookup of implicit converters\n", "org.apache.johnzon.mapper.reflection.JohnzonCollectionType.JohnzonCollectionType()": "JOHNZON-19 fixing reflection for readCollection in Mapper\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.patternProperties()": "JOHNZON-191 ensure we validate the right value for meta validation (jsonschema): patternproperties and additionalProperties\n", "org.apache.johnzon.jsonb.serializer.JohnzonSerializationContext.convertDefault(T,JsonGenerator)": "reupdating jsonb api\n", "org.apache.johnzon.mapper.access.FieldAndMethodAccessMode.findObjectConverterWriter()": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.Foo.getValues()": "JOHNZON-314 support @JohnzonAny on a field\n", "org.apache.johnzon.mapper.Foo.Foo(Collection)": "JOHNZON-115 add SerializeValueFilter\n", "org.apache.johnzon.websocket.jsr.JsrArrayDecoder.doRead(JsonReader)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.mapper.NoSetterCollection.getTheCollection()": "JOHNZON-38 also use Collection getter as writer is flag is set\n", "org.apache.johnzon.jaxrs.xml.WadlDocumentToJsonTest.xmlToJson()": "Update checkstyle configuration (and fixed some check style errors), update contributorsrs, some minor pom.xml changes\n", "org.apache.fleece.mapper.MapperEnhancedTest.setDates(List)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.Bytes.setData(byte)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.core.SerializationTest.jsonPrimitives()": "JOHNZON-94 making JsonValue serializable\n", "org.apache.johnzon.jsonb.JohnzonBuilder.fromString(String)": "complete support for DateFormat", "org.apache.fleece.core.JsonNumberImpl.doubleValue()": "initial import\n", "org.apache.johnzon.jsonb.Option.equals(Object)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getArray()": "JOHNZON-110 improve long support impl\n", "org.apache.fleece.core.JsonLocationImpl.hashCode()": "initial import\n", "org.apache.fleece.mapper.MapperEnhancedTest.setString(String)": "byte/short handling + test from Hendrik Saly for our mapper\n", "org.apache.johnzon.jsonb.ArrayContainer.setBdouble(double)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.fleece.core.JsonReaderImpl.JsonReaderImpl(Reader)": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.reduceImpl(JohnzonJsonLogic,JsonValue,JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.jsonb.ArrayContainer.setBint(int)": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.websocket.mapper.JohnzonTextEncoder.init(EndpointConfig)": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.JsonLongImpl.hashCode()": "JOHNZON-123 align JsonNumber hash calculation with the spec\n\nTxs to Svetlin Zarev for the report!\n", "org.apache.johnzon.core.JsonLocationImpl.equals(Object)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.JohnzonResource.object()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.MapperTest.getByteWA()": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.fleece.core.JsonArrayImpl.add(JsonValue)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.mapper.ObjectTypeTest.getFather()": "JOHNZON-71 first draft of JsonbGenerator and ObjectConverter\n", "org.apache.johnzon.websocket.MapperCodecTest.codec()": "JOHNZON-41 jsr 356 integration, note: still some work to do on client annotation endpoint integration but didnt find a right api yet\n", "org.apache.johnzon.core.JsonBuilderFactoryImpl.createArrayBuilder(Collection)": "JOHNZON-96 add test + logic for ArrayBuilder ft of JSONP-1.1\n", "org.apache.johnzon.core.JohnzonJsonParserWrapper.getValue()": "JOHNZON-110 improve long support impl\n", "org.apache.johnzon.jsonb.StaticNestedClass.getNestedId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.core.JsonPatchBuilderTest.testPatchBuilderTestString()": "JOHNZON-98 implemented JsonPatchBuilder\n", "org.apache.fleece.jaxrs.FleeceMessageBodyReader.FleeceMessageBodyReader(Mapper)": "initial import\n", "org.apache.johnzon.jsonb.DefaultMappingTest.fromJsonCollections()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.jsonb.PartialModel.setFourth(String)": "JOHNZON-230 JOHNZON-231 JOHNZON-232 JOHNZON-233 JOHNZON-234 date/number format inheritance from class/package + JSON-B ijson support\n", "org.apache.johnzon.mapper.CycleRace.isMonument()": "JOHNZON-77 added test for collections\n", "org.apache.johnzon.core.OverflowTest.ko()": "JOHNZON-125 basic support of auto ajustment for the string sizes\n", "org.apache.johnzon.jsonb.JsonbAccessMode.findReader(Class)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.access.FieldAccessMode.fields(Class,boolean)": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "org.apache.fleece.core.JsonGeneratorImpl.write(String,int)": "FLEECE-10 FLEECE-11 performance enhancements from Hendrik Saly, thanks a lot!\n", "org.apache.johnzon.jsonb.PropertyNamingStrategyFactory.camelCaseStrategy()": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.POJOWithMixedFieldAccess.getActive()": "more of jsonb - missing plain value handling\n", "org.apache.fleece.mapper.TheObject.setMap(Map)": "initial import\n", "org.apache.fleece.core.ByInstanceProvider.newBuffer()": "supporting several buffer cache strategies\n", "org.apache.johnzon.mapper.reflection.MapUnwrapperWriter.getAnnotation(Class)": "adding class/package accessor for annotation in DecoratedType\n", "org.apache.fleece.mapper.CharClass.getCharArr()": "FLEECE-14 char handling in mapper\n", "org.apache.johnzon.jsonschema.JsonSchemaValidatorTest.enumValues()": "JOHNZON-191 ensure we validate the right value for meta validation (jsonschema): patternproperties and additionalProperties\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.testDeserializeObjectWithAnnotatedConsturctorParameter()": "JOHNZON-77/JOHNZON-142 implemented ObjectConverter support for constructors\n", "javax.json.bind.JsonbException.JsonbException(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.jsonb.Request.Request(String,String,byte)": "JOHNZON-158 ensure we resize correctly the buffer even when sizes of the internal buffers are not in the expected area + ensure we call close correctly in terms of scope to avoid surprises and leaking buffers\n", "org.apache.fleece.core.JsonStringImpl.getString()": "initial import\n", "org.apache.johnzon.mapper.Contact.equals(Object)": "JOHNZON-48 basic map support for nested converter\n", "org.apache.johnzon.jsonb.JsonbTypesTest.getOptionalInt()": "JOHNZON-62 JOHNZON-63 supporting jsonp integration in our mapper, better jsonb type handling (optional, dates) + supporting impl collection type sin our mapper\n", "org.apache.johnzon.mapper.MapperTest.setByteWA(Byte)": "Make byte[] de/serialization configurable (de/serialize to plain int array which is the default or to base64 encoded string)\n", "org.apache.johnzon.mapper.Mapper.stream(Reader)": "JOHNZON-73 there was a potential leak of our provider without an advanced stream close handling\n", "org.apache.johnzon.core.ManualTckTest.loadClass(String)": "JOHNZON-271 fix bugs in our JsonParser Stream handling\n\nproblems uncovered by running the JSON-P TCK which we now pass.\n", "org.apache.johnzon.mapper.ObjectConverter.isGlobal()": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.getContext(Class)": "JsonbConfig injectable by JAX-RS Provider", "org.apache.johnzon.mapper.MapperConfigTest.testFindObjectConverterConverterForMoreInterfaces()": "JOHNZON-72 implemented ObjectConverter lookup\n\nof course this is not done yet but a good starting point\n", "org.apache.johnzon.core.JsonInMemoryParser.isFitLong()": "JOHNZON-265 some protection to cast a Bignumber as a long\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProviderTest.asParam()": "JOHNZON-24 ConfigurableJohnzonProvider\n", "org.apache.fleece.core.JsonParserTest.hasNext()": "FLEECE-4 Thanks Hendrik Saly for this patch and work on parser\n", "org.apache.johnzon.mapper.access.FieldDecoratedType.getClassOrPackageAnnotation(Class)": "JOHNZON-87 meta annotation support\n", "org.apache.johnzon.mapper.GenericsTest.setInstance(List)": "JOHNZON-262 JOHNZON-263 JOHNZON-264 better support of generics for collections\n", "org.apache.johnzon.mapper.AdvancedGenericsTest.setId(T)": "JOHNZON-59 added parentclass lookup for generic declaration\n\nSigned-off-by: Mark Struberg <struberg@apache.org>\n", "org.apache.johnzon.jsonb.MySerializer.serialize(Whole2,JsonGenerator,SerializationContext)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.core.JsonParserTest.rfc7159MustFailForLiteral()": "Improved handling of trailing garbage\n", "org.apache.johnzon.core.JsonPointerTest.testGetValueJsonArrayElementNotExistentShouldThrowJsonException()": "Implemented JsonPointer\n", "org.apache.johnzon.mapper.NumberClass.setShortNumber(short)": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.ConfigurableJohnzonProvider.setIgnoreFieldsForType(Class,String[])": "JOHNZON-135 remove unused config options again\n", "org.test.apache.johnzon.mojo.PrimaryMetric.get_999999()": "better to use double instead of integer when guessing the type\n", "org.apache.johnzon.core.JsonPrettyGeneratorImpl.write(String)": "renamed fleece to johnzon\n", "org.apache.johnzon.core.BufferStrategyFactory.SingletonProvider(int)": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.fleece.core.JsonArrayListener.onBigDecimal(BigDecimal)": "initial import\n", "org.apache.johnzon.mapper.reflection.Converters.matches(Type,Converter)": "JOHNZON-65 adding Adapter<A, B> for more advanced serialization than Converter\n", "org.apache.johnzon.core.JsonArrayImpl.toString()": "JOHNZON-304 Json.createDiff does not handle properly arrays overflow (more elements in target than source) + minor toString/cache values enhancements (useful for debug purposes)\n", "org.apache.johnzon.jsonb.SerializersRoundTripTest.asBoolean()": "JOHNZON-226 get mostly rid of j.l.r.Arrays\n\njava.lang.reflect.Array operations are known to be expensive.\nSo it's best to avoid them alltogether.\nThis small hack improved performance for array handling for about 50%.\n", "org.apache.johnzon.core.JsonReaderImplTest.unicode4Bytes()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JohnzonJsonb.fromJson(String,Class)": "JOHNZON-222 enable to map JsonArray in jsonb impl\n", "org.apache.johnzon.jsonschema.regex.JavaRegex.test(CharSequence)": "JOHNZON-171 more properties handling and configurable regex impl\n", "org.apache.johnzon.jsonb.JsonbAccessMode.JsonbAccessMode(PropertyNamingStrategy,String,PropertyVisibilityStrategy,boolean,Map,JohnzonAdapterFactory,Supplier,AccessMode)": "JOHNZON-201 ensure we fail by default for @JsonbCreator if some arguments are missing\n", "org.apache.johnzon.jsonb.SeriaizersRoundTripTest.serialize(VATNumber,JsonGenerator,SerializationContext)": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.jsonb.AnimalDeserializer.deserialize(JsonParser,DeserializationContext,Type)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.jsonb.InstantiablePackageCons.InstantiablePackageCons(String)": "JOHNZON-287 JOHNZON-288 JOHNZON-289 add supportPrivateAccess for jsonbcreator in jsonbaccessmode + cleanup CDI property support\n", "org.apache.johnzon.jsonb.PartialOrder.getStringInstance()": "JOHNZON-238 JOHNZON-237 ensure to read class annotation on the superclass + respect deserialization order based on the json and not the class (spec requirement we can challenge later)\n", "org.apache.johnzon.core.JsonParserTest.fail21()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.POJOWithMixedFieldAccess.getId()": "more of jsonb - missing plain value handling\n", "org.apache.johnzon.mapper.MapperTest.aliases()": "JOHNZON-37 @JohnzonProperty\n", "org.apache.johnzon.core.JsonParserTest.maxStringStringOK()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.ClassConverterTest.serialize(Whole2,JsonGenerator,SerializationContext)": "class support for serializer/deserializer, partial support for adapters (only write side cause read one is quite challenging) + enforceQuoteString option in case we encounter a jsonb/need conflict\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.writeJson(Bike,MappingGenerator)": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.fleece.core.JsonProviderDelegate.createReader(Reader)": "getting rid of some System properties configuring the factory\n", "org.apache.johnzon.core.util.ClassUtil.getClassLoader()": "JOHNZON-217 allow custom BufferStrategy\n\nWe do now also allow a fully qualified class name of a\ncustom BufferStrategy implementation.\n", "org.apache.johnzon.mapper.MapperGenericsTest.setValue(Map)": "JOHNZON-56 basic one level support of generics\n", "org.apache.johnzon.jsonb.AdapterTest.getType()": "JOHNZON-70 ReadAttributeBeforeWrite option for mapper\n", "org.apache.johnzon.jsonb.serializer.JohnzonSerializationContext.serialize(String,T,JsonGenerator)": "JOHNZON-211 ensure the serialization context uses the passed key if the related method is called\n", "javax.json.bind.JsonbException.JsonbException(String,Throwable)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.MapperEnhancedTest.setMap(Map)": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.Mapped.getName()": "JOHNZON-89 JOHNZON-88 switching default access mode to field+method + fixing this mode + upgrading tomee for websocket tests\n", "org.apache.johnzon.core.ParameterizedTypeImpl.getOwnerType()": "Fixed deserialization of primitives\nSerializers, Deserializers and Adapters ParameterizedTypes can be\nretrieved on super-classes/interfaces", "org.apache.johnzon.maven.plugin.ExampleToModelMojo.toJavaFieldName(String)": "JOHNZON-60 sample to java plugin\n", "org.apache.johnzon.jsonb.Student.getName()": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.mapper.ObjectConverterWithAnnotationTest.getType()": "JOHNZON-77 implemented ObjectConverter support for @JohnzonConverter\n", "org.apache.johnzon.jsonlogic.JohnzonJsonLogic.isFalsy(JsonValue)": "[JOHNZON-313] implement json-logic based on JSON-P\n", "org.apache.johnzon.mapper.Mappings.findConverter()": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.jaxrs.JsonbJaxRsTest.out()": "simple jsonb jaxrs provider\n", "org.apache.johnzon.core.JsonPointerImpl.validateRemove(JsonValue)": "JOHNZON-95 make JsonPointer an internal class which implements the spec API interface\n\ntxs to Armin Hasler for providing the JsonPointer implementation\n", "org.apache.johnzon.core.JsonStringImpl.hashCode()": "renamed fleece to johnzon\n", "org.apache.johnzon.mapper.converter.TimestampAdapter.from(Date)": "JOHNZON-93 support primitive types for adapter 'to' side\n", "org.apache.johnzon.mapper.Mapper.readObject(JsonParser,Type)": "JOHNZON-302 enable from/to parser/generator in jsonb impl\n", "org.apache.johnzon.jaxrs.jsonb.jaxrs.JsonbJaxrsProvider.doRead(Jsonb,Type,InputStream)": "JOHNZON-281 ensure NoContentException can be thrown when an empty incoming stream arrives in JsonbJaxrsProvider and JsrProvider\n", "org.apache.johnzon.core.JsonReaderImplTest.unicode3Bytes()": "renamed fleece to johnzon\n", "org.apache.johnzon.jsonb.JsonbAccessMode.doFindWriters(Class)": "JOHNZON-85 @JohnzonAny\n", "org.apache.johnzon.core.JsonPointerTest.testRemoveJsonArrayWithEmptyJsonPointer()": "Implemented JsonPointer add, replace and remove methods\n", "org.apache.johnzon.jsonb.Simple.setValue(String)": "JOHNZON-61 bases for jsonb, still a lot of tests to add but allows to review more efficiently the early draft\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.writeNull()": "JOHNZON-207 some enhancement on Xavier's patch\n", "org.apache.johnzon.mapper.Setter.Setter(AccessMode,boolean,boolean,Type,MapperConverter,int)": "upgrading jsonb-api + filling some TODO but not complete + splitting ObjectConverter in two (read/write)\n", "org.apache.johnzon.jsonb.SerializerTest.testArrayParseWithDeserializer()": "JOHNZON-169 add unit test for @JsonbTypeDeserializer on list\n", "org.apache.johnzon.mapper.CompositeWriter.write(Object,Object)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.johnzon.jsonb.test.JsonbRule.fromJson(String,Class)": "JOHNZON-220 adding from/to JsonValue/Pojo mapping method over Jsonb implementation - experimental from the spec, see https://github.com/eclipse-ee4j/jsonb-api/issues/111\n", "org.apache.fleece.mapper.TheObject.isBool()": "initial import\n", "org.apache.johnzon.jsonschema.spi.builtin.BaseNumberValidationImpl.BaseNumberValidationImpl(String,Function,double,JsonValue)": "JOHNZON-171 basic jsonschema validation module - not yet complete\n", "org.apache.johnzon.core.JsonReaderImplTest.testGrowingStringWithDifferentBufferSizes()": "JOHNZON-96 new JsonObjectBuilder features from JSON-P-1.1\n", "org.apache.johnzon.mapper.InObjectOrPrimitiveJsonGenerator.write(String,BigInteger)": "JOHNZON-242 ensure arrays of objects work with serializers\n", "org.apache.johnzon.core.JsonReaderImplTest.parseHuge1MbJsonFile()": "renamed fleece to johnzon\n", "org.apache.johnzon.jaxrs.JohnzonProviderTest.johnzon()": "renamed fleece to johnzon\n", "org.apache.fleece.core.JsonParserFactoryImpl.getDefaultJsonParserImpl(InputStream,Charset)": "forgotten files in last commit\n", "org.apache.johnzon.mapper.MapperConfig.setEncoding(Charset)": "JOHNZON-71 introduce MapperConfig and improve ObjectConverter interface\n", "org.apache.fleece.mapper.TheObject.setName(String)": "initial import\n", "org.apache.johnzon.jsonb.JsonbTypesTest.readAndWriteWithDateFormat(DateTimeFormatter,String)": "complete support for DateFormat", "org.apache.johnzon.mapper.Mapper.writeObjectAsString(Object)": "JOHNZON-27 JOHNZON-26 writeObjectAsString and skipping Nan values when serializing\n", "org.apache.johnzon.mapper.Mapper.buildArrayWithComponentType(JsonArray,Class,Converter)": "JOHNZON-50 enhancing both mode to support merging of annotations, field still but method is read - and doesnt fully overwrite - if field doesnt have the information, JOHNZON-48 adding Karl Grosse tests for @Converter for item type of collections, enhancing his patch to support collections and eagerly enum converter caching\n", "org.apache.fleece.mapper.TheObject.setCollectionWrapper(List)": "initial import\n", "org.apache.johnzon.jsonb.JsonbAccessMode.mapItem(JsonValue,Type,MappingParser,JsonbDeserializer)": "JOHNZON-207 some enhancement on Xavier's patch\n"}