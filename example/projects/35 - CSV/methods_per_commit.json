{"cbce4da24bbf4e52a940a4b24bb0dec096a1d16e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()"], "bf3f34c8b5ff4beaae5da9f33620dad33ef07fa3": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()"], "5744ee8a1698687fe4acc0c269cbbbb1e234b06d": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()"], "f9633e8066dbea7f8d0b0778dbb10c764a9c817f": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testTrim()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()"], "3b938ba40d050c319be41a415daf5832e6097d72": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)"], "66c34da258f068046536d84e712a90a5f7f6e2a0": ["src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testDeserialisation()", "src/test/java/org/apache/commons/csv/issues/JiraCsv248Test.java@org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()", "src/test/java/org/apache/commons/csv/issues/JiraCsv248Test.java@org.apache.commons.csv.issues.JiraCsv248Test.getTestInput()"], "f6f02e52655a01222dc4e1036e52d33a187f01f7": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)"], "fcc0d15c7b541191f14b0861d945cbbeba770d10": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,ClassLoader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,ClassLoader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVResource()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVResource()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testGetHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testGetHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeader()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIterator()"], "cbcfb72912f41d1fac3f6d26ca27406cca94da9e": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.addField(CSVField)", "src/main/javorg/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.CSVConfig()", "src/main/javorg/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.addField(CSVField)"], "9e4e3dc37973bc1f46017af0477dc9d414a5203f": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getPosition()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)"], "03a6b5031938b652bcc0f12dfba6713eea954578": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()"], "9f6d3f541330670df684d01b8b6fae67f474bb90": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()"], "b372050f7f238b14953e609d3ec28dc755fca685": ["src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader)", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.readAll(BufferedReader)", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.println()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.getBufferedReader()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.println(String)", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFile()"], "7909a7c3860a6d5a15b60e2257daee795ce4127c": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)"], "37a261b385257f3988f22c4b602aa569a68bfddd": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "e28e28e1f27c554850dc0449f5f290e222121c62": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setNextCharacterPosition(long)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setNextRecordNumber(long)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getCharacterPosition()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long,long)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()"], "14182380d59abc9c5a18504833c5c93d27fd0f8e": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)"], "dd26201ac47f60cd9e18800726cc28660b81bdaf": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "e31980892ce9873047db98ab8ef1b3259607b988": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()"], "6f1db380588ea17c1f59dcf77c9e7dc6c53c1ab1": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)"], "e94085595f372cd27900ee462c93be0a43d63a22": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()"], "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": ["src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getUnicodeEscapeInterpretation()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getAllValues()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getLine()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader,char)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.unicodeEscapeLexer(int)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setDelimiter(char)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setExcelStrategy()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.parse(String)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getEncapsulator()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.isEndOfLine(int)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setEncapsulator(char)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setStrategy(char,char,char,boolean,boolean,boolean)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.Token.Token()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setIgnoreLeadingWhitespaces(boolean)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getDelimiter()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.isEndOfFile(int)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setCommentStart(char)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setCSVStrategy()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setUnicodeEscapeInterpretation(boolean)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.nextValue()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(InputStream)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getIgnoreLeadingWhitespaces()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.nextToken()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getCommentStart()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setIgnoreEmptyLines(boolean)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.Token()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.parseLine(String)", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getLineNumber()", "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.isWhitespace(int)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.print(String)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(OutputStream,char)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.getSeparatorChar()", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(Writer)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.setSeparatorChar(char)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(OutputStream)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.getCommentStart()", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.println()", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.printlnComment(String)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.escapeAndQuote(String)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.printLine(String)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.setCommentStart(char)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(Writer,char)", "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.println(String)", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readAgain()", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.skipUntil(char)", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.lookAhead()", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.skip(long)", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.getLineNumber()", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readLine()", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readUntil(char)", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.read(char,int,int)", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.read()", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.markSupported()", "src/java/ch/netcetera/wake/core/format/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)", "src/test/ch/netcetera/wake/core/format/FormatTests.java@ch.netcetera.wake.core.format.FormatTests.suite()", "src/test/ch/netcetera/wake/core/format/FormatTests.java@ch.netcetera.wake.core.format.FormatTests.main(String)", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken3()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testExcelStrategyTest2()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetAllValues()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testUnicodeEscape()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken6()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testLineTokenConsistency()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine1()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken5()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine4()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken2()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetLine()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testSetCSVStrategy()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextValue()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine3()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.suite()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetEncapsulator()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.TestCSVParser.TestCSVParser(Reader)", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testExcelStrategyTest()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.TestCSVParser(Reader)", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken4()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken1()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse7()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse4()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse6()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse1()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetCommentStart()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.TestCSVParser.testNextToken()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine5()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine6()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.CSVParserTest(String)", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse5()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetDelimiter()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse3()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine2()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse2()", "src/test/ch/netcetera/wake/core/format/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine7()", "src/test/ch/netcetera/wake/core/format/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/ch/netcetera/wake/core/format/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.CSVPrinterTest(String)", "src/test/ch/netcetera/wake/core/format/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter2()", "src/test/ch/netcetera/wake/core/format/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.suite()", "src/test/ch/netcetera/wake/core/format/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter1()", "src/test/ch/netcetera/wake/core/format/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter3()", "src/test/ch/netcetera/wake/core/format/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadUntil()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.suite()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testMarkSupported()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.getEBR(String)", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testConstructors()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testSkip0()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.ExtendedBufferedReaderTest(String)", "src/test/ch/netcetera/wake/core/format/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testSkipUntil()"], "6f94c8a3daa2c967542659f7026eda4a3aef6aaf": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()"], "79eb6e039273f706828a63c1821ccc993bba3902": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Object)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Iterable)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Iterable)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()"], "ecf59bef6e5bfcfe7dd048babd848bd7906a3a95": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()"], "5e9216d331d0c8c49d505370f90e3d29722df577": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()"], "4f61bd1aeefb2845cb3e7ead1975bad02735b406": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()"], "ad38b2d28b00017577ec56a8ffc65c9f0baa59ad": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()", "src/test/javorg/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()"], "1756e676235dcb78aa726615df2ae8e83c2e6d14": ["src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasContent(String)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasType(Token)", "src/test/javorg/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasContent(String)", "src/test/javorg/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasType(Token)"], "704e1679d217581f08b8e9bdddafcd20768e1867": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long)"], "33f662b219b439af5134de4553a1bb9485136999": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()"], "fba580930f091620159f8740bb441bb11290b27a": ["src/main/java/org/apache/commons/csv/Token.java@org.apache.commons.csv.Token.toString()"], "575c88d8a2dd9cc0a69331409322de9c2deebd0e": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()"], "21f4f584ba1e7ebaef08dc797d9f102a896dd715": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Headers.Headers(Map,List)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.Headers(Map,List)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createEmptyHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.Headers(Map,List)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Headers.Headers(Map,List)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(int)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(int)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(String)", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.isClosed()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLastChar()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.close()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getPosition()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.close()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.isClosed()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getPosition()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isClosed()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.mapNullToDisabled(Character)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCharacterPosition()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isDelimiter(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getFirstEol()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isQuoteChar(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.mapNullToDisabled(Character)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isClosed()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isDelimiter(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCharacterPosition()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getFirstEol()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isQuoteChar(int)"], "961cce294c5c1ad222965501e03c2f6bfe9d6935": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()"], "4033a0199e2d0086afeeb07870a687e3b0caf4bf": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(int)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsSetString()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsSetInt()"], "3362f9c9d8b1b36e16ba9528ed566f6a27f7ba5b": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.assertTokenEquals(Token,String,Token)", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.assertTokenEquals(Token,String,Token)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()"], "b55fb21d78e30748ae19f1c8d16902439643799a": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.readEscape(int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEscape(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()"], "d3b38ab190426b3bb32038faecc70835fc45c39a": ["src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)", "src/javorg/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)"], "485929e626e479079b408501f7253ac4daedd3fc": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()"], "db11c04d29dd50f4405c51043b40f0d47d15925d": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testHeaderReferenceCannotEscape()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.assertEqualFormats(CSVFormat,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()"], "9873b13df283ac65a37d56622bc1e01eca681611": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)"], "f7220c40b18193ffa4b02fb6645b1e14db38cc44": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()"], "316a51f5208bc95f22124d1579882131a4f441b2": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,ClassLoader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,ClassLoader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(Enum)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long)", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testTransactionFile()", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()"], "3cb5801a985c0d6a9ca3dc794b4e89a292b4a9c6": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.reset()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "312f5b033e7e9d532dd841eec3a179bf5659c85b": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.parse(Reader)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()"], "8b24cd1fb06c8ad86606cf2296892bbb21f90143": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.trim(CharSequence)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)"], "78d7055f7166e9899f613bc66d51b418a7860115": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)"], "3241e0c7b26dc7e493a3e22a086bbc6a712750df": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()"], "045dbbbe4ab84618cee8ba27d00b9283ce0a2715": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextLine()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()"], "5591444148679d77107f108d0a40ac044076ba0d": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)"], "9a705d8605583b9614bfd7ad8117e01dc8f3e13a": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.Stats(int,int)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.Stats.Stats(int,int)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.readAll(BufferedReader,boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show(String,Stats,long)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getReader()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.iterate(Iterable)"], "5daf49a1801071d95c762db561cf6b9970b018a1": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()"], "3320c53e279891f7ba71f382f24ed2e852fa530b": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testGetHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testGetHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()"], "5bdafc6ce594f19a8c74dd8b9df8ef2e170be3b5": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "f6c0433b65a97745b9a3044cebe3ddc6e28c1836": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(String,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()"], "6532c22438eef343f2903aeee7451e75a3ded176": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()"], "b042bd8522e2bbccfa25a6c3281cdddce5b65c72": ["src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getComment()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getLong(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getBoolean(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getInt(String)"], "c0d91d205d5494dc402dab13edcc89679aecd547": ["src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.copy(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()"], "f7328ef02c1825a60b8a81f7583cf8ef948c2d92": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Path,Charset)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Path,Charset)"], "f51f43d18421d02fab7b39b55e6b55c32b5622d2": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()"], "e650b9d6995e99a7b6520e3096c1f84d9244e4ac": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)"], "f047581f9526aad1c9c9e624710a4e860f88ecaa": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setIgnoreLeadingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setCSVStrategy()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setUnicodeEscapeInterpretation(boolean)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setEncapsulator(char)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setDelimiter(char)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setExcelStrategy()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getIgnoreEmptyLines()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setIgnoreEmptyLines(boolean)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setCommentStart(char)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setStrategy(char,char,char,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setStrategy(char,char,char,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setIgnoreLeadingWhitespaces(boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setCommentStart(char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setUnicodeEscapeInterpretation(boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setCSVStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextValue()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.CSVParserTest(String)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategyTest2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategyTest()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextValue()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.CSVParserTest(String)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()"], "3e1d1629859c3209ae45cb9fa596628ef93717cb": ["src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetWithEnum()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToString()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.toString()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.EnumHeader(String)"], "f62fd132d0e83715364edab4de3d6308d8626a0d": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv236()"], "898b7f9629f8f9a02b9d4785d4c287b4549c3990": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()"], "d6de8062b53cf5d486230b68e8a497d9c1660140": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()"], "53fa8ad35692437c9995117d1e59fd6146997e30": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "fcdf1f2efa80d2f8777da5dd7689f0618ad92489": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()"], "d54b339caa945f35b4b2536b1455f314e57808dd": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()"], "5c9697c158e45ae8a964d561cc948e43fca8a76d": ["src/main/java/org/apache/commons/csv/Token.java@org.apache.commons.csv.Token.toString()", "src/main/javorg/apache/commons/csv/Token.java@org.apache.commons.csv.Token.toString()"], "103995083c1cf8f30c02c8589a4e800f9ed303fa": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingException()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissing()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissing()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingException()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()"], "523171ed4148757656b92771bc163dff924558a9": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)"], "ffdfffb8f2ac8fe36e6628622bba1a84a3828cbf": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()"], "c473d87f236ce5cba4c7e0b2f4c788c1cb91f013": ["src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)"], "a36bbffdd37b15c133914a0216a0359962c0e70e": ["src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseString(String)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()"], "c6212540dfa2fdb42ccd19d9737c8e341b9cab40": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()"], "eb6ffbb7f3d658b8b57258e706f30fc749db70d8": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()"], "a2fef00ab8950771735bc09793f05fc842a0cd97": ["src/main/java/org/apache/commons/csv/Assertions.java@org.apache.commons.csv.Assertions.notNull(T,String)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/AssertionsTest.java@org.apache.commons.csv.AssertionsTest.testNotNullNull()", "src/test/java/org/apache/commons/csv/AssertionsTest.java@org.apache.commons.csv.AssertionsTest.testNotNull()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()"], "b322e2f2db1f842da5b48d54ea9ca64f308fdeaa": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim()"], "6b3afdc93def2b60e7b3c6071b9d9e73dc1c2c62": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()"], "9ebd0d94254b468765f6c558bb10ca018a418444": ["src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "637ef14ee4aa842fe689b166e36d2e88363d5c20": ["src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)"], "1a7c6140825bd7b3abe73c5dd732b090acc84b61": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV135()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV135()"], "bf06bed9b8905ccf5409179263707074167ccfc4": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(String[])", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()"], "e6759b8c109cc7babd5b20b5982a3c423fccb4f7": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseFile(File,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseString(String,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseFile(File,CSVFormat)"], "7d51af94049daa66b9ed893c9eb282bc92bd3fbf": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "3a2034434cf29e241378f5f0cdbb9be6cf01eaba": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()"], "5e0f654e80cafdc9aae0e2aec98a018bab58b40c": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "ac03c2eaa7cd26c8038369a5d991d5775e15bb4c": ["src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByNullString()", "src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByMissingString()", "src/test/javorg/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByNullString()", "src/test/javorg/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByMissingString()"], "a6e69b2a5e5a8d8308c2e90b143fbf05d4d75bd3": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Statement)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()"], "c203896177b295c2f5319e8c34b9d8bb9f58564e": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testGetHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testGetHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()"], "c81ad0328eefb438cc875b9c9f081be93f9fdcc2": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()"], "93fc1f9363d911cb0a974f993d9266a89a63c41e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)"], "953a6de7224d0535f68f549cc1deefc7fa7d78c1": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV259()"], "69cdb8a227351341e9716b5329078eee6289a747": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.CSVFileParserTest(File)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.CSVFileParserTest(File)", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()"], "b033db6a210df04570475e252b835001e8517714": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)"], "fa3416da0351b33a5f15cc80b09b6603293cc8e2": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()"], "a5b76b6c20a5b9a1a6dc893e25f090b758f695e4": ["src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.simpleTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.CSVLexer1306663(CSVFormat,ExtendedBufferedReader)"], "5111efd46d868f5ce85479ffbbbab7882d09d767": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)"], "a0f10ed5495800b1df7a5e70fcc043ce05735bbf": ["src/test/AllTests.java@.AllTests.suite()", "src/test/org/apache/commons/csv/AllTests.java@org.apache.commons.csv.AllTests.suite()", "src/test/org/apache/commons/csv/writer/AllTests.java@org.apache.commons.csv.writer.AllTests.suite()"], "b01898391d29e8ff6fe622718a71e7190ca6014b": ["src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()"], "b53a171ab3f0ad4faaae37c62df1b6a0f438cb28": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)"], "c025d73d31ca9c9c467f3bad142ca62d7ebee76b": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV235()"], "dca99998f17a9755dfb40ed30bc1734e54ba0b04": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()"], "8867c0591f283746a91e9a9ed0c1459e2a3fd578": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()"], "3a90cfe249a1c3623aec65965ac59e1a8674163e": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)"], "e33bedefcec054f9813f6214cf0cd12d6553fb1e": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()"], "086f434320e68a82ce1adcac69668ffcd7f48e52": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.charAt(int)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.trimTrailingWhitespace()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.shrink()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()"], "787ab08db9230c67220ef453de211159e317d4e2": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getComment()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()"], "0e91beab001a405e2815d55db40d14052b4d78f0": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getOut()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.flush()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getOut()"], "65883aa4d9478161d7c526c1f6e1d5f2806da93b": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)"], "d7e94581d784067fccddd34e19ae46aea526f9fa": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.reset()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.unicodeEscapeLexer(int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.Token()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.Token()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.unicodeEscapeLexer(int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readUntil(char)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readUntil(char)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()"], "7bd9d1d970b04a8439fee0bd5224159f57cb2512": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)"], "3b10c8f8ac64b75c573e0352dbb3d7ff9279d121": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()"], "6e57364216b78bca031f764b8d0a46494ba27b46": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteChar()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEncapsulating()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEncapsulator()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEncapsulating()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)"], "f78b5a14ca34f6176890b00308868b664b696148": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.close()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.isClosed()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isClosed()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()"], "8eb36bd8a783b85f867451b8a0a5abbb79324e88": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()"], "666350b94a8393fbcefef39e38bf4fa1a149482a": ["src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByString()", "src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.createTestRecord()", "src/test/javorg/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.createTestRecord()", "src/test/javorg/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.setUp()", "src/test/javorg/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByString()"], "46c84341e6316767ff375739bf53b7229c807632": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()"], "b227c29978a2f3825812e0d5c04a6613b056c0e4": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)"], "030fb8e37c4024b24fac2b5404300449a6741699": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Headers.Headers(Map,List)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.Headers(Map,List)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderNames(Map)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()"], "ed6adc706e0c0b64314547b720cdab4a70d99b3f": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testPutInMap()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testPutInMap()"], "78e2b2463337ccb2e047f8b8888db7a39877314b": ["src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.read(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.split(Blackhole)"], "0f3b3367c3fd74a52618217bdce14d451c7aeed0": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()"], "59411494e069c8aae9123f182aa3a70136bd3dc3": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(Map)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(Map)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMap()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testPutInMap()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMap()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testPutInMap()", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testTransactionFile()", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()", "src/test/javorg/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()", "src/test/javorg/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testTransactionFile()"], "4a70de4b4471e2cf4ad6ea70719c0dd799246d80": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)"], "933a950c88c402752b189fe3890cd8aef1536fd1": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(Character,Character,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(Character,Character,Character,Character,boolean,boolean,String,String)"], "de1838ea067f3fbc4c7c21b9eeae077c739ecb73": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()"], "20fe471d408d08050d3a9f4618446a3e88fc5417": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)"], "51f226d0f882b2af656b97e7c38e581f615c77b9": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()"], "390800f28802a5c9e020e5aa901c67d5a9a618c2": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testGetHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeader()"], "8f436552ae8ee5713c1b5c78c58d4387edcccb31": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isConsistent()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()"], "32e1fb0ce075404e601bc049821534b95e389f9b": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "aeef773ed680701ead67c6a35016d35cb3edd72a": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEncapsulating()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEncapsulating()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()"], "605bc0154f080e7a98c70256830a7d1d620e1358": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHash()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)"], "059649167c5045dfd40ebf0f97def33a9235c3d1": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissing()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingException()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingException()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissing()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()", "src/test/java/org/apache/commons/csv/issues/JiraCsv247Test.java@org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()", "src/test/java/org/apache/commons/csv/issues/JiraCsv247Test.java@org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()", "src/test/javorg/apache/commons/csv/issues/JiraCsv247Test.java@org.apache.commons.csv.issues.JiraCsv247Test.testJiraDescription()", "src/test/javorg/apache/commons/csv/issues/JiraCsv247Test.java@org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumn()"], "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/java/org/apache/commons/csv/Token.java@org.apache.commons.csv.Token.toString()", "src/main/javorg/apache/commons/csv/Token.java@org.apache.commons.csv.Token.toString()"], "7b27106237ac6c224cb88a082b26c5fe76873335": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toList()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.iterator()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.iterator()"], "f7d7d63ee14e8040dad6f2ae7893daad25c2ee55": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)"], "fa5dca3be144dcfd855384471f1687fa2dc95aca": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)"], "6b069cf4435384675c6863486d13713b1721781d": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)"], "43987a7d781598d1f7896a07c78755a62698efbd": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()"], "a23b784c1c81c625fed587149e0c460366206fa4": ["src/test/java/org/apache/commons/csv/issues/JiraCvs249.java@org.apache.commons.csv.issues.JiraCvs249.testJiraCsv249()"], "722d696e1966d1e63a3994170ebff53c8543c4e0": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean)"], "8d6772a3209b124af7e2430f69cdf6a7c765fd44": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderMapRaw()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderMapRaw()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testDeserialisation()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testSerialization()"], "6870022916139c3fcacef9f57d053ccb03f0c3c3": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)"], "d0035e6c7a3f911a735485e0893e26950c15f098": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)"], "cdbb1cd1a673d7358adafd3c87b8656251e264a2": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)"], "15b4e3f539544bb09da2263bf195897e001714cd": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)"], "1fa12a6fc8dea3c74bd315b32122bac1f7b5800b": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)"], "9599bfe743d54174ca37441b454e1f6189b7c41d": ["src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()"], "16e12d213016d30376e2bcc5cabc299bcfa765f7": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()"], "ef51c1ecad91aad5527b8e1568e2a17748039be8": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createEmptyHeaderMap()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderMap()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderNames()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMapRaw()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isConsistent()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getCSVParser()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderMapRaw()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String,String,long,long)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(int)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getName(int)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getIndex(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderNames()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,List,String,long,long)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNames()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsConsistent()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsInconsistent()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetHeaderNames()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsConsistent()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePath()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseURL()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()"], "1b0ccbe4c7d5a183913063429198e8c51bb768f9": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(CharBuffer)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.CharBuffer(int)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.shrink()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(StringBuffer)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.getCharacters()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(String)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(StringBuffer)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(CharBuffer)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.CharBuffer(int)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.shrink()", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(String)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.getCharacters()"], "61b66220b5806ee5bdf60a9474f8aa1f6d4a27af": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()"], "c43e8fa5deb70d9676be28ae340cc37e5c64dd61": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()"], "d6e494b44d85540923b39eb4956a704ecee295b1": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()"], "05fdf22a6c0e142a985ebe0e2a295e9a46a43041": ["src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()"], "676a580c350874a27a357520e7ff309a66b2378f": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close(boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close(boolean)"], "67bbc35289bb3435eae0bd6f20cc6b15280e66e0": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isSurroundingSpacesIgnored()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEmptyLinesIgnored()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader)"], "17139b840fc076b36f7e15be40495faefee08ad4": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)"], "bf1d01d79dd7e178899921bba34b66ab8d0515e5": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)"], "07a73d28244ae51a2703f67b82d6f02aa5d81c5c": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "911433707587a42727da375e1ec0e53dc909ac8d": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape(int)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)"], "0fee01aa2d4ad8347641698fb178c77b6fc95517": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)"], "3eededce883695b2035cc69e0014d7d2de7ad234": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()"], "a3260ed930ad6c51925cb41b85ed230d8d872d3f": ["src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)"], "21ed5b135c8de3db3259962f0296bb98f2aa8afb": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()"], "e922bf949aa055fe1da03056f202b80d17506791": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "49c9a67b2675ea19f2fa4f8b56d98a6269fcbae1": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "dcc44cdcd1419c65cc0b51a7368f3a63a06e9872": ["src/test/java/org/apache/commons/csv/issues/JiraCsv247Test.java@org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumn()", "src/test/java/org/apache/commons/csv/issues/JiraCsv247Test.java@org.apache.commons.csv.issues.JiraCsv247Test.testJiraDescription()", "src/test/java/org/apache/commons/csv/issues/JiraCsv249Test.java@org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()"], "a53c76b43ac003cb7f741d59d2f705f562d28008": ["src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(StringBuffer)", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(String)", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.toStringBuffer()", "src/test/javorg/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendNull()", "src/test/javorg/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendStringBuffer()"], "2afbbfbdc03864cc5c8fe8bbfd91e96eee313383": ["src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.CSVParserTest(String)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.suite()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.suite()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.CSVPrinterTest(String)", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.suite()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.CSVStrategyTest(String)", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testSkipUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testConstructors()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testSkip0()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.ExtendedBufferedReaderTest(String)", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.suite()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testSkipUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testConstructors()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testSkip0()"], "4901f1ccdc8aba020b70ee4830897c99d2682aa8": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "93089b260cd2030d69b3f7113ed643b9af1adcaa": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "3fd45b544159e19165ecd3e4a8f5517ac2dd5c50": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()"], "dfd58d8a9442440ae4d3ed3cb491bddeba9ad60b": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.accept(File,String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePath()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseURL()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.createParser()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePath()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseURL()"], "d047f83c283757e4848cd38332d822c378bb9774": ["src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsSetString()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsSetInt()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsSetString()"], "a9daab6992bc800e510de180aa3e49522a0db462": ["src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomOracle()"], "04cee2bb1449d5d99446d7b7dc35a67169dbe01f": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()"], "af2863555785a860bfba6889d31fb32a35e07b46": ["src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)", "src/test/javorg/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)"], "51049fd117ae5d0cdfaec7fbf0a6de940502346b": ["src/test/java/org/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()", "src/test/javorg/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()"], "2ea171f2edda2568b5347b1bfcdb78032a521890": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfLine(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show()"], "61fdb7a03a22065de4c63525a4b836ba616aa1f1": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()"], "67390ea3046a451e54607d071af2300d4b3afe6d": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()"], "8a683f009d10150c3bcff6c92455cadd7f7f0a88": ["src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()"], "adaccbcef4b94de8a445cd6af608e829605563e9": ["src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.toStringBuffer()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.clear()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(CharBuffer)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.capacity()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.CharBuffer(int)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.shrink()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.toString()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(StringBuffer)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.getCharacters()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.CharBuffer()", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(char)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(String)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.length()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendStringBuffer()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharArray()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharBuffer()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testShrink()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendSingleChar()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testCreate()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendNull()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testProvideCapacity()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testSimpleAppend()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendChar()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharArrayBuffer()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendString()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendString2()"], "957295aceb5c0018d6f6e2cf2278f38a86245034": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()"], "aa0762d538c52f4384f629bb799769f5f85c1c9e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isAllowMissingColumnNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isIgnoringEmptyHeaders()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyHeaders(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()"], "9acd5cd4d32f3f14440a6fbea766f90c71f49b10": ["src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.equals(Object)", "src/main/javorg/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.equals(Object)"], "0383fd51df6ef72e41338d37748959639b788871": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatWithChanges()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.assertEqualFormats(CSVFormat,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()"], "8fdcb3da115d1dcfe27f702b90195aa44beb1834": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineCustomCollection()"], "df7b7d39cc1719f2a20b6bba60af9692835bdf19": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()"], "d6278c817a1b0b89222bc58c12bbebf9a07ca82f": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)"], "f074aeedfe62c388b57c0e8f490897d444d59b30": ["src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()"], "dca481f79c2d04e4e1ea438845f485af5c7f4ad1": ["src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatWithChanges()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testHeaderReferenceCannotEscape()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithCommentStartCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testRecoardSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithDelimiterLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithEscapeCRThrowsExceptions()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithQuoteLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatWithChanges()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testHeaderReferenceCannotEscape()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testRecoardSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithDelimiterLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicy()"], "fa07dea5850eb11bb7b4dc06823802156b89baaf": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "c683594f59030e5515b95ff7d8d0b9fa66eaac42": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)"], "8a526c0ab5e18db4816cbd21fcb2468716dc7d2c": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)"], "8608520aa13bec03cdcb8d4273116e81004321ba": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "18ed616214ed3a9d52c9a1d1fb856e7b58d1ca89": ["src/test/java/org/apache/commons/csv/bugs/JiraCsv198Test.java@org.apache.commons.csv.bugs.JiraCsv198Test.test()", "src/test/javorg/apache/commons/csv/bugs/JiraCsv198Test.java@org.apache.commons.csv.bugs.JiraCsv198Test.test()"], "9ce0716a4397d07b041aca2f4f319da09dce4c0a": ["src/test/java/org/apache/commons/csv/CSVLexer130663.java@org.apache.commons.csv.CSVLexer130663.CSVLexer130663(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVLexer130663.java@org.apache.commons.csv.CSVLexer130663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer130663.java@org.apache.commons.csv.CSVLexer130663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer130663.java@org.apache.commons.csv.CSVLexer130663.simpleTokenLexer(Token,int)"], "8a5efdeb7e085ec77acff147493216e8fd0bcd02": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)"], "b7c38a1a69a21925a3efa4189e7b1e4ab3631bf2": ["src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMongoDbCsv()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomMySql()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomOracle()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlText()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomMongoDbCsv()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomTdf()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultCsv()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultText()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlCsv()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomDefault()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlCsv()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomDefault()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSQLNullStringDefaultText()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomExcel()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlText()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomMySql()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomOracle()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSQLNullStringDefaultCsv()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomTdf()"], "0d63758e095d2a671d0ba10fc8cae141add29a45": ["src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)"], "024f98e0392d1acf5d900a15c314799c6df56b6d": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNames()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()"], "516b82b4712da79bcefbeeb06b8a59f17aa99976": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()"], "f342cb2caf9ab9d9d74625a5244b29cfce181e67": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()"], "3eff7042455220b6e0b67117beebb65fa8cf44ae": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()"], "7faf4509000e4c4d32af15b0c81b5ec9bcfd928e": ["src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guess()", "src/javorg/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guess()"], "883a0e91cf5dfb1e5af5b4c8640b5d97f573729e": ["src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFile()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader)"], "449e9a8cf64738dde865d775f982e797e74d52fa": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()"], "1533facb1986631465467af2475ae9df1ed5a8be": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()"], "31896b6d4326ad1a76fed349781c5e641e9fa014": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()"], "c9dedff12e98a34ab4225bc65f810c0954207f11": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isUnicodeEscapesInterpreted()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "562b277bee032eb21ab578a6093317ee4ba21bcf": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)"], "010c81e8b474255bebaba58ba9729e426e012f35": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()"], "2414250b697e606d23e6055a5c72a11b5b28c2ee": ["src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testPutInMap()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()"], "0fabee5f24ce90eb1b2cb772f16c5c3355b459f1": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()"], "6dc69934d24743593ec92f8cd2047775f67cd176": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()"], "323b7aedaea1c57dc225fa2ca64613a3672156d0": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()"], "e2f0a4d8a83a41eaa984086636a3712c682307ea": ["src/test/java/org/apache/commons/csv/AssertionsTest.java@org.apache.commons.csv.AssertionsTest.testNotNullNull()", "src/test/javorg/apache/commons/csv/AssertionsTest.java@org.apache.commons.csv.AssertionsTest.testNotNullNull()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.readTestData(BufferedReader)", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.CSVFileParserTest(File)", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.readTestData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)", "src/test/javorg/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullPathFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV235()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingException()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNames()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullPathFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingException()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderNames()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV235()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterNullAppendableFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterNullAppendableFormat()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapingAtEOF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapingAtEOF()", "src/test/java/org/apache/commons/csv/Utils.java@org.apache.commons.csv.Utils.compare(String,String,List)", "src/test/javorg/apache/commons/csv/Utils.java@org.apache.commons.csv.Utils.compare(String,String,List)", "src/test/java/org/apache/commons/csv/issues/JiraCsv164Test.java@org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/issues/JiraCsv164Test.java@org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()", "src/test/javorg/apache/commons/csv/issues/JiraCsv164Test.java@org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()", "src/test/javorg/apache/commons/csv/issues/JiraCsv164Test.java@org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()", "src/test/java/org/apache/commons/csv/issues/JiraCsv167Test.java@org.apache.commons.csv.issues.JiraCsv167Test.parse()", "src/test/javorg/apache/commons/csv/issues/JiraCsv167Test.java@org.apache.commons.csv.issues.JiraCsv167Test.parse()", "src/test/java/org/apache/commons/csv/issues/JiraCsv198Test.java@org.apache.commons.csv.issues.JiraCsv198Test.test()", "src/test/javorg/apache/commons/csv/issues/JiraCsv198Test.java@org.apache.commons.csv.issues.JiraCsv198Test.test()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()", "src/test/java/org/apache/commons/csv/issues/JiraCvs249Test.java@org.apache.commons.csv.issues.JiraCvs249Test.testJiraCsv249()", "src/test/javorg/apache/commons/csv/issues/JiraCvs249Test.java@org.apache.commons.csv.issues.JiraCvs249Test.testJiraCsv249()"], "366598c77c097855b4b2e790ab6c4353031747e9": ["src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setDelimiter(char)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getFillChar()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFill(int)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.addField(CSVField)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getField(String)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFields(CSVField)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.equals(Object)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getValueDelimiter()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isValueDelimiterIgnored()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFixedWidth(boolean)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isFieldHeader()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setValueDelimiter(char)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setIgnoreDelimiter(boolean)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getFill()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.CSVConfig()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getFields()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isDelimiterIgnored()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setIgnoreValueDelimiter(boolean)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.guessConfig(InputStream)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFieldHeader(boolean)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFields(Collection)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setEndTrimmed(boolean)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getDelimiter()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isFixedWidth()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFillChar(char)", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isEndTrimmed()", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.setInputStream(InputStream)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFieldSeperator(String)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.getInputStream()", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidthSeperator(String)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.analyseLines(String)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.CSVConfigGuesser()", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.CSVConfigGuesser(InputStream)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidth(String)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guess()", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.hasFieldHeader()", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.setHasFieldHeader(boolean)", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.overrideFill()", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.CSVField(String)", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.setFill(int)", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.getName()", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.getFill()", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.CSVField(String,int)", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.getSize()", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.setName(String)", "src/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.setSize(int)", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.setConfig(CSVConfig)", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.setWriter(Writer)", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeValue(CSVField,String)", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.getConfig()", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.CSVWriter(CSVConfig)"], "a0624779468261996e7e6e5c7a63ba1ce1a3a553": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseSimpleToken(Token,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isQuoteChar(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isDelimiter(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isDelimiter(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isQuoteChar(int)"], "c7f90f93c6251809428bae0585c4dd56b8a4dd3c": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()"], "ecea0c35993b2428e0a938933896329c413de40e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()"], "72e830c08c39665a64da9e295cbe4b99e5c1b5e6": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)"], "4829ec961eb9db365b01428740b65ebf77e0803d": ["src/test/java/org/apache/commons/csv/issues/JiraCvs247Test.java@org.apache.commons.csv.issues.JiraCvs247Test.testJiraDescription()", "src/test/java/org/apache/commons/csv/issues/JiraCvs247Test.java@org.apache.commons.csv.issues.JiraCvs247Test.testHeadersMissingOneColumn()"], "3c08f7a5c47f9d19bc2e473b33d2fbe6c9f047f1": ["src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()"], "72f78cc9d9024802872b95651e9ac7d29c2a9a46": ["src/test/java/org/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()", "src/test/javorg/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()"], "9ab47dc56b43066be740488948d38032df636502": ["src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/bugs/JiraCsv164Test.java@org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/bugs/JiraCsv164Test.java@org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withHeaderComments()", "src/test/java/org/apache/commons/csv/bugs/JiraCsv167Test.java@org.apache.commons.csv.bugs.JiraCsv167Test.parse()"], "ab751011e6da0c81ca29b818b125721541db01cc": ["src/test/java/org/apache/commons/csv/issues/JiraCsv154Test.java@org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/issues/JiraCsv154Test.java@org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()"], "b30da4450fdaec0e542755f4a8a283c3cbe50d8d": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()"], "8033a710b00d911882385ed604a7ad423716758b": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.read(char,int,int)"], "152d50c4f7204c5620277e18c9ab032aac03416d": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,Charset,ClassLoader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,ClassLoader,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVResource()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVResource()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testTransactionFile()", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()", "src/test/javorg/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()", "src/test/javorg/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testTransactionFile()"], "564e8244b6f89c9a0d9c43a940e87963bab142bc": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)"], "a07c9f72fcb5624c43cc90da19dd2216dffde90c": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()"], "f368f64fa7f9acdcc01084f676e8b9c2b86f946e": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.remove()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()"], "43560d92ec38efc52a563fc2d519385951ccd2f2": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorIllegal()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()"], "5e0e7703a13d7022c070197fa9624dd67c2a257e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)"], "f881372d92d4bf07848f0b9ccae99488d30ab8eb": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()"], "a6a92598de5983c7278b0daba1a839e5a3db463b": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "0c3bf8266db0826f4830cb560273f8abbaa58b0a": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()"], "bb3bb0d65b121fef2919027556d990cba65ede18": ["src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testDefaultQuotePolicy()"], "3a3b4836e30bfc1a3735a4f651917e93fbb89a0a": ["src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeader()"], "66a56ee1a47645c4d91076858e00ab9977d1a399": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)"], "d2c8f90800f45a0bf99e539180147e5157951428": ["src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.isUnicodeSequence(char)", "src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.read(char,int,int)", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testTrim()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()"], "5e9d2240adbf8f08e34971ed77b9b313270dc3a2": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)"], "34262e8c5e0d6746b914468d9e8f739b9f3cfa13": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Path,Charset)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printer()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAutoFlush()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,CharSequence,int,int,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAutoFlush()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Path,Charset)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(File,Charset)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printer()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getTrim()"], "4c530ac40dcd17e70abb0a2b28c6a557d2520117": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)"], "0ec08e400b334d95313bef33e3da17c4d416ca74": ["src/test/java/org/apache/commons/csv/bugs/JiraCsv198Test.java@org.apache.commons.csv.bugs.JiraCsv198Test.test()"], "040c2606eb7e2cfe60e4bbcbf2928f1e971ce4b4": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testComments()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testComments()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()"], "c6bdecabd82eebc9efce450aa4057b668984479e": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)"], "ba26844c7bca3e42036f626cd61de9d40550b76f": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)"], "788f2aaa7aff361416e11fba5df7cfc31060cbb1": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getFirstEndOfLine()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecordNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderNames(Map)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.remove()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getFirstEndOfLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.getNextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.remove()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecordNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.next()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.hasNext()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isConsistent()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getIndex(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getName(int)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toMap()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderNames()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.hasComment()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,List,String,long,long)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toMap()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long,long)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isConsistent()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.hasComment()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetHeaderNames()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsConsistent()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsConsistent()"], "60709c20402533f86bb2374241cdac3b4f0fcba2": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(int)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()"], "96b8485176fab410d6ff829e7e9b6b5f817671ab": ["src/test/java/org/apache/commons/csv/issues/JiraCsv149Test.java@org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEolAtEof(boolean)", "src/test/java/org/apache/commons/csv/issues/JiraCsv149Test.java@org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()", "src/test/java/org/apache/commons/csv/issues/JiraCsv149Test.java@org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()"], "c26c858b2ec5a12a9d5067e1aae3ae967fef9c7c": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()"], "9daee9042c931382219ba268c2ed79e8c6a740da": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrint()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrint()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedBackspace()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackspace()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testFF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedControlCharacter()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedCharacter()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithEscaping()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testLF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCR()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken4()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedCR()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testTab()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testComments()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedFF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapingAtEOF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedTab()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCR()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedTab()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedFF()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedControlCharacter()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testComments()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedBackspace()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedCharacter()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithEscaping()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testFF()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedCR()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testTab()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackspace()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testLF()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken5()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapedLF()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testEscapingAtEOF()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)", "src/test/java/org/apache/commons/csv/bugs/JiraCsv164Test.java@org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/bugs/JiraCsv164Test.java@org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withHeaderComments()", "src/test/javorg/apache/commons/csv/bugs/JiraCsv164Test.java@org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withHeaderComments()", "src/test/javorg/apache/commons/csv/bugs/JiraCsv164Test.java@org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/bugs/JiraCsv167Test.java@org.apache.commons.csv.bugs.JiraCsv167Test.parse()", "src/test/javorg/apache/commons/csv/bugs/JiraCsv167Test.java@org.apache.commons.csv.bugs.JiraCsv167Test.parse()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.setUpClass()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.setUpClass()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)"], "16b9e2c79122f5a76863854cc4b33939da63710d": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getTrim()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getTrailingDelimiter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.geH2Connection()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrint()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrint()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomTdf()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.geH2Connection()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()"], "e6ba150743d6bdd3d89867d106f1848a25149140": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)"], "5a30b37043f6ca88fc3ca93b2c5f81744995e663": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)"], "aede94a857bc6d600db0a59514b64246c8bdd0e7": ["src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)"], "e6e80741d86f4f28a6645394dce3244966e6615e": ["src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testConstructors()"], "a5e21efe8ff06f6ddf69e73dcbde2c335ed8bbe7": ["src/test/java/org/apache/commons/csv/issues/JiraCsv149Test.java@org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEolAtEof(boolean)", "src/test/javorg/apache/commons/csv/issues/JiraCsv149Test.java@org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEolAtEof(boolean)"], "6b2a5045644104c831dc6380829502fd6c90d8c7": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toBuilder()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatWithChanges()"], "e80b8112a719b6b213e833bd0d1ee27f55bfe5f4": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()"], "65ab9db952daebf62fc092c90f7f74cbb25b8c0f": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.readEscape(int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isEndOfLine(int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.getLineNumber()", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getLineNumber()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)"], "40948cdcec66b8dd213efe96f1251abc3f412581": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()"], "03550ab565e55f509def8995c3c852b8686e80b2": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()"], "1933f8abaf844b402a07bbcd90361d4ee1dca0e3": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)"], "22af43218a497e6205d921c336db71e9e6959170": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()"], "68c74f627495b2c60d3b0ff6a1ddc0cad8b7d49e": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJIraCsv154()"], "6640e8597c16ecee01ef06555f7aa12cfa8c0c2d": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printDelimiter()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printDelimiter()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)"], "8b3de71fd99d0fa07cb6a3a35b583bbb170aab66": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRfc4180QuoteSingleChar()"], "b73040f2bccdee43261d9f34229040630b70179c": ["src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.clone()"], "83e4a903b18c43a10caa551c50ece4e251a0f674": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "bc2419915d5619317c833372d9b7f9af036c7f53": ["src/test/java/org/apache/commons/csv/issues/JiraCsv211Test.java@org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()", "src/test/javorg/apache/commons/csv/issues/JiraCsv211Test.java@org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()"], "dc7a71979d2a7686b21482a9067cfe306c6c738b": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()"], "574ed87b269a89d56a941616f77dfcd38f7b3804": ["src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)", "src/test/javorg/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)"], "69997467d419487cb4098ff116188091907b5ff1": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseURL(URL,Charset,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseResource(String,Charset,ClassLoader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseString(String,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseString(String)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecordNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseFile(File,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecordNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(String,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVResource()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)"], "1d767ad94601d8034f8c6556eede28847dd1adff": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getRecordNumber()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.values()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getComment()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getRecordNumber()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getComment()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.values()"], "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseEncapsulatedToken(Token)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseEncapsulatedToken(Token)"], "350d34d5cfe45c4e7036422e0e2e0f6039eb6f98": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isQuoteChar(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEncapsulator(int)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.classify(int)", "src/test/javorg/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.classify(int)"], "60cc83af7f22fe903edb7d43f4617e779c10909a": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteChar()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.parse(Reader)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuotePolicy()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isQuoting()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentStart()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.parse(Reader)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEscape()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getDelimiter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getRecordSeparator()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentStart()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getDelimiter()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEscape()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isQuoting()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuotePolicy(Quote)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteChar()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.parse(Reader)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getRecordSeparator()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.parse(Reader)"], "ac6e85792f3ca00a11a85426901f9b61f7366374": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)"], "554af4bc5c1014644dfca83ce6577f7882a9dc04": ["src/test/java/org/apache/commons/csv/bugs/JiraCsv167Test.java@org.apache.commons.csv.bugs.JiraCsv167Test.parse()", "src/test/java/org/apache/commons/csv/bugs/JiraCsv167Test.java@org.apache.commons.csv.bugs.JiraCsv167Test.getTestInput()", "src/test/javorg/apache/commons/csv/bugs/JiraCsv167Test.java@org.apache.commons.csv.bugs.JiraCsv167Test.parse()"], "d5cc0d8a7c7141c792395f3a0b4a29819320e500": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()"], "fc4ccb426eb3934ee1656db9b18c7d797ac6bd1d": ["src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextValue()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextValue()"], "50e2719bb646870dc08dd71f2bc2314ce46def76": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEncapsulating()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEncapsulating()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEncapsulator(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEncapsulator(int)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()"], "e3ffcc5cd7ca987f7010f27982e40660c5eaf294": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getOut()"], "8bba58d1ed87da343da51e239d094dcd06745015": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()"], "e2bbfcc6d3290ba69710e936bc88d13f1add76a6": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Path,Charset)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()"], "ef9018bb1ef6a541ad3e2225559b145e8f90fa14": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nullMeansDisabled(Character)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEncapsulator(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEncapsulator(int)"], "75f39a81a77b3680c21cd3f810da62ebbe9944b8": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.copy(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toBuilder()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuotePolicy(Quote)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.parse(Reader)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.setUp()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.setUp()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)"], "c52b1f0a9d85b06ce906b055a7e8b0d51dc06d90": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()"], "88a7e755e61ea5129f0f50b3ec04605cc492b457": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "3567ad0acc911354a066532bf444d983a4fa76ee": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()"], "8cd4024e6dd24e0a4deda6a44bcb85abb81727e3": ["src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.classify(int)", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.CSVLexer3(CSVFormat,ExtendedBufferedReader)"], "33bfaeef8a0a0343abc45313d1669df19dfc5e21": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()"], "ef202e7429f46fbdc16800d14b59d7dc7625fd91": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "97d59f8704cb409902b732755293dd72549bd9fb": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(String[])"], "e5d7b214561e45d803dd70d88031172a4ed9f201": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)"], "f9a3162037f7e82ce6927bbe944b7d61349f8c11": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEscapeCharacter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentStartCharacterSet()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentStartCharacter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteCharacter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentStart()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEscape()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isQuoting()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteChar()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPlainPlain()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithEscaping()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithEscaping()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()"], "fe5bd51f8adf11116f0cea83bd7cbe55b7488269": ["src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.skip(long)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.markSupported()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readUntil(char)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.skip(long)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.markSupported()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.skipUntil(char)", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testMarkSupported()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testSkipUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testSkip0()"], "5b2e5f809be63d301b04eaae9c72cae05e7da35c": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printDelimiter()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)"], "b6f0655a7107b9c817f10a215cea4da90b27281f": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()"], "4bb75e3edbbd325ac5bc2acbd00437d2d3123a3d": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getLong(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getComment()", "src/test/java/org/apache/commons/csv/CSVRecordLongTest.java@org.apache.commons.csv.CSVRecordLongTest.testGetLongByNullString()", "src/test/java/org/apache/commons/csv/CSVRecordLongTest.java@org.apache.commons.csv.CSVRecordLongTest.testGetLongByString()", "src/test/java/org/apache/commons/csv/CSVRecordLongTest.java@org.apache.commons.csv.CSVRecordLongTest.createTestRecord()", "src/test/java/org/apache/commons/csv/CSVRecordLongTest.java@org.apache.commons.csv.CSVRecordLongTest.testGetLongByMissingString()", "src/test/java/org/apache/commons/csv/CSVRecordLongTest.java@org.apache.commons.csv.CSVRecordLongTest.setUp()"], "a708256b65819eb39fb401516e12b59818fffffd": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()"], "68f4892138925acd635a11aa01b9b3b80bd21973": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)"], "4c8024fb76806726b4652a738e7540260b428473": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreSurroundingSpacesAreDeleted()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreSurroundingSpacesAreDeleted()"], "efdcb376e814d6e1b9a6b3e2cdb6914ccdf70dfe": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseURL(URL,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseURL(URL,Charset,CSVFormat)"], "83b1072703023411900b5eaefe9b8e99bc6b9414": ["src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()"], "7addc8f6889d3d1f4e5fe3bcb1c0f8161a6fefb9": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "a7bd28c496457aa7c32db4ea529c4f3df7e78fe9": ["src/main/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/main/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()"], "8e18054f3b6cd6fa619853354678d4d528345315": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isClosed()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isClosed()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCurrentLineNumber()"], "3ea8118ff3793cc32fcf6d2c93d4f5eda73b374e": ["src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.reset()", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.Token.reset()"], "00d0def6953d414af6ecf36a9584c5453ee39c29": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.readEscape(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.readEscape(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.unicodeEscapeLexer(int)", "src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.UnicodeUnescapeReader(Reader)", "src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.close()", "src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.read(char,int,int)", "src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java@org.apache.commons.csv.UnicodeUnescapeReader.isHexadecimal(char)"], "02a36dd41dc1bb80eb567feb39dc86b36afcc0ff": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "74afb17d34e9f9a880bfe898633609068fc338e1": ["src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlText()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSQLNullStringDefaultCsv()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlCsv()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPostgreSQLNullStringDefaultText()"], "65ce9e99ea6a1236576c24de9d01e00518d276a5": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "c2ed3be44d0c03d8d64fc7065dfbb081295f5488": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineCustomCollection()"], "1d5dfcb8f65e25e0bc5c38628138435c3c756b98": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withHeaderComments()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withCommentMarker()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJIraCsv154()"], "d49e99119649354e97cbae3a61865c7b110e794d": ["src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testReadEscapeBackspace()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testReadEscapeTab()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testReadEscapeFF()", "src/test/java/org/apache/commons/csv/TokenMatchersTest.java@org.apache.commons.csv.TokenMatchersTest.testToString()"], "f29956907096b9a1d5e7a8e7ebb6f13b1b1028ed": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "625bafab76ca7053920364045905abc05f3e31fa": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()"], "d994897420ca5935d489821847897abf2138f46e": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "c4e120bbf42cf3981a629582ea722dacea9db19e": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()"], "70b782d6df8c1a2ecbafda76c34a976d2511d1e4": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()"], "afc831bcb837030d83f58c7cd6bd41588bfa194c": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.skip(long)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.markSupported()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"], "9fb2b4f2b100c8d5a769532ee26973832c2a61c0": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingEnabled()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingDisabled()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)"], "0dbb499888e5e17322d08802222f2453bf5621a6": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)"], "35d101c2adecd51730f88e43941d85d16034886f": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)"], "a4c1a85d9db8ae782af49a26196d4e3ec4b68011": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toStringArray(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.valueOf(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toStringArray(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"], "0833f45bffd40f44ba6f294d84e9bac8a9ba0a37": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()"], "2018c0c41f569f8eb7f694ac9e3868675b307c1b": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)"], "fa437cb924ff6591faab05f7dc42dd5556676abd": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRfc4180QuoteSingleChar()"], "29c80daa3c3feecc99643ceef6da4ded9f3133be": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()"], "4fd494d59042a08e7defae5c7e93937360113514": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()"], "71c69df6dda034e9aa18ad07782ba88643423f58": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseEncapsulatedToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseEncapsulatedToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCurrentLineNumber()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getLineNumber()", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()"], "c8630e103ac0838978a867de46fc81c260eba542": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()"], "7ac5dd3ec633d64603bb836d0576f34a51f93f08": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)"], "bad80610435572242897f030ad69023c526eff04": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(Class)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(Class)"], "4e8c781b23645d5b8c125411f7e00680881b4b5b": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)"], "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(String[])", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String[])", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String[])", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.iterate(Iterable)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.iterate(Iterable)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)"], "d01e6b5421ea3b389d858a233530a47b8c7e7353": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toMap()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.size()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(Map)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMap()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.validateMap(Map,boolean)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testPutInMap()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()"], "a72c71f5cc6431890f82707a2782325be6747dd1": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteMode()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuotePolicy()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()"], "b58168683d01149a568734df21568ffcc41105fe": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(int)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(int)"], "b9b3b58cbdcfd419549b0ccee89da75c7045ef43": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()"], "d422c1a8b5a7f4567ae138ae7c1fd68077f94776": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()"], "aae6f90442ca09e2461e766a987b33316d9fa6be": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getFirstEndOfLine()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getFirstEol()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()"], "1ae3639d2ca9c31ef07b3edcd2a946e6b60d94b1": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEncapsulator(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isDelimiter(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)"], "5a925ff1fffefd0d2ee11f4c8dfe860791f09965": ["src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.simpleTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.CSVLexer1306667(CSVFormat,ExtendedBufferedReader)"], "61a879bf681402a7986165c32c9e1c4e3fb94b18": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.assertTokenEquals(Token,String,Token)", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()"], "a4dd5eb5039ff3fea5bc19348db72823a8fc9fbe": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()"], "7592782eee5e1744f032fa7ffe2924c2eb9f577e": ["src/main/java/org/apache/commons/csv/Token.java@org.apache.commons.csv.Token.reset()"], "33cf28990720e1c5a4ba92e4363a0fe1cf80a6c9": ["src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,Charset,ClassLoader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVResource()", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testTransactionFile()", "src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()", "src/test/javorg/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()", "src/test/javorg/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testTransactionFile()"], "d99244287c8b974e118f0ee4330ba20aef9621a3": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getReader()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getReader()"], "cee5cc3d7442efffab84192b93ed92ad940d892c": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,List)"], "c6c762ad9dba65a2d158b8f6d56616782a786ff7": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)"], "7af334d7d52ea245d71b9f17749360a4db0debf0": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)"], "f4cc9a928f394d815162d443ebc894287c4d3c2c": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()"], "38741a48c692ae2fc13cd2445e77ace6ecea1156": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isSurroundingSpacesIgnored()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLeadingSpacesIgnored()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isTrailingSpacesIgnored()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()"], "3a1806ba26c3088de58ed5898f278dcd075b0552": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscaping()"], "04b36452dd589fe0a090243a9092753f92a24885": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getFormat()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getFormat()"], "f51f89828df4d763148362e312e310435864ba96": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()"], "9e3f3cccb25ee2eeb91f5a7ef77a0ed7dfcc4014": ["src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()"], "06dda31f5218c138c2eafbe27f154d2faa79b507": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHash()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHash()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)"], "c8527b3d532dffa4aa0137c9e6d36bfebe0d9d95": ["src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()"], "637426c50d753bcbfd46577172dbdd9e8d8ca6a1": ["src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(CharBuffer)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(String)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.ensureCapacity(int)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(char)", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.charAt(int)", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(char)", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(String)", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.trimTrailingWhitespace()", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.shrink()", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(CharBuffer)", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.getCharacters()", "src/main/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testSimpleAppend()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testProvideCapacity()", "src/test/javorg/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testShrink()", "src/test/javorg/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testSimpleAppend()", "src/test/javorg/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testProvideCapacity()"], "38670dbe9232dc9b56d6464c42293e745974cf60": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.getLineNumber()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isWhitespace(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.Token.reset()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.readEscape(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isEndOfLine(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.readEscape(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.isEndOfFile(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.isEndOfLine(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.getLineNumber()"], "7b8cc87fd84126ac74b0928aabda15b19ad1d7dc": ["src/test/java/org/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()", "src/test/javorg/apache/commons/csv/FercGovTest.java@org.apache.commons.csv.FercGovTest.testContractFile()"], "9dcad06c005a29085d9d26e4e54bc7c9bdb9bd5a": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()"], "71a657004e090a86c47593f624cdcc3bb2ea710e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatWithChanges()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testHeaderReferenceCannotEscape()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatWithChanges()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testHeaderReferenceCannotEscape()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsEscape()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEquals()"], "ad11cd14d0e407e351d7de71018cbc25ccb4352f": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)"], "2c6120826245f89fedf2f936ab4a0c3edd8717f3": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseEncapsulatedToken(Token)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseSimpleToken(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.parseEncapsulatedToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()"], "1c7a9910be857a4f33ed216701407806e1d20670": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()"], "33c004f5258f7bba447d1ecec96ce468d081c686": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()"], "473727be265240adf6d15a1d7abad2f0f31967fd": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()"], "2480dffa6d8343b189c6fb57b88b325c45f0b83f": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()"], "18d706032ac850979833165b66439c2c764c3b33": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.isWhitespace(int)"], "86d488407b40d12212810e890cf337cfda361be2": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testInvalidFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()"], "2ec4c994c0458ef893af9bd518849bec21b2dec4": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()"], "70485e44f2411ee462db50ef78ed729a8674299d": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getInt(String)", "src/test/java/org/apache/commons/csv/CSVRecordIntTest.java@org.apache.commons.csv.CSVRecordIntTest.testGetIntegerByNullString()", "src/test/java/org/apache/commons/csv/CSVRecordIntTest.java@org.apache.commons.csv.CSVRecordIntTest.testGetIntegerByMissingString()", "src/test/java/org/apache/commons/csv/CSVRecordIntTest.java@org.apache.commons.csv.CSVRecordIntTest.createTestRecord()", "src/test/java/org/apache/commons/csv/CSVRecordIntTest.java@org.apache.commons.csv.CSVRecordIntTest.setUp()", "src/test/java/org/apache/commons/csv/CSVRecordIntTest.java@org.apache.commons.csv.CSVRecordIntTest.testGetIntegerByString()"], "2a6bcc1f73fc85ec2476ef35cd02f1989d8cc759": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()"], "67d150adc88b806e52470d110a438d9107e72ed5": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentMarkerSet()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentMarker()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentStartCharacterSet()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentStartCharacter()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStart()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "bfc40dede6ddf4988d966b1d4b8aa711518fa7b5": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.CSVFileParserTest(File)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.generateData()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.readTestData()", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.accept(File,String)"], "99be47eb9b0f2312f19848afa7e9745db02b50c6": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)"], "1b78bc150215f2867c4b971253b672ad8c72be0e": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)"], "740a1b699338923098486fc16d8df967be388160": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.clone()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "65f110ec14b9e7f202bb1a696c4c58560cfca48c": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Appendable)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrint()"], "9f03b06a1ec8cb2cb64aec6068d2a6c1f663fbc9": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()"], "f7c2ca216608457071ab45d05223952a69f76d58": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV135()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)"], "a019caec3f685f864c98ce9af94c5171de4a51bc": ["src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()"], "2305e0e80c9ceaba6736bea4dbf07c0979279280": ["src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)", "src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.test()"], "275a8431e06946987ab84f9282e892489d510389": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)"], "530b0382691b6af6340f194956f6e79ae3249662": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "c510c7222f7cd773708d672726b873fefb3f0dc7": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "2a318dcf33150f0a799443710b48dcc45ef72b83": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()"], "09a6e887b891152ebebb3c2df9e0d8a8dcfa3a52": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeFF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeBackspace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()"], "25f4b3e9985684ed07bfbf8238d9148960001e7e": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()"], "2f2d9aa7807b22a7f21b025969eb533b118e0b54": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(CharSequence,int,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinterQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()"], "c4f74756ff768b341782bb60c6df89acf30e67f9": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()"], "9542a399b8fe5eafa87c22fb29590a923f0786d1": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()"], "3cb24cbdfbbe5568e08eb9cebcd14711b708c11d": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()"], "b05af3c0491fed11d11a8a2cd83df2605d3843b3": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreSurroundingSpacesAreDeleted()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()"], "e7434e5cb57088ee4d5a06e846cab7c4bed7cd10": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.flush()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.flush()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)"], "0e8084ab27bdd1e183b243b6c4cef97d603d23ad": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()"], "229b3b7691f06577c473a287b29b18c8a9398ce8": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()"], "3c5d7e07e02e769043d084bf906bbc4c6932ab1c": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()"], "8e9fb0e9896da664f28efe5d32c225ecfc473f70": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "6eddaf8b0c0cb4fe1ece10fc7da6f3b2835dd9df": ["src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getRowDelimiter()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setRowDelimiter(String)", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)", "src/javorg/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)"], "19ba389fe8194bb6c22102b32e021d8487e1e307": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)"], "f80c5bd0ad8ed0739f43a2ed6392d94bbceae1c9": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)"], "c4014b6b38c9f661a12557db7ee464e158f386f7": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "04a2e9ebe4933d41c84b95074d57aa1da52cc520": ["src/test/javorg/apache/commons/csv/Utils.java@org.apache.commons.csv.Utils.compare(String,String,String)"], "4a6af4590838e8804290464a8d88a837acb2fa08": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.println(Appendable)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndEscape(CharSequence,int,int,Appendable)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toStringArray(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,CharSequence,int,int,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Object[])", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Object[])", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.trim(CharSequence)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)"], "4dfc8ed0747f5d7cd10ba35621add0fe4891a545": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultStrategy()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,String)"], "e24dc316d471c7ad29384a976f8f2ba10375150a": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()"], "eac54a225bc974157e914cf66cfa598171022018": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setStrategy(CSVStrategy)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getStrategy()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getUnicodeEscapeInterpretation()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setStrategy(char,char,char,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setIgnoreLeadingWhitespaces(boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getDelimiter()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getIgnoreEmptyLines()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setCommentStart(char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setDelimiter(char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setEncapsulator(char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCommentStart()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setIgnoreEmptyLines(boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getIgnoreLeadingWhitespaces()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setUnicodeEscapeInterpretation(boolean)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setExcelStrategy()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getEncapsulator()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setCSVStrategy()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setDelimiter(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEncapsulator(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setCommentStart(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreEmptyLines(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetSetDelimiter()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetSetCommentStart()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetSetEncapsulator()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.suite()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.CSVStrategyTest(String)"], "cacb79dab96cc98209cf14bf1b1fc6eb6f357c88": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()"], "1e70eaaaf47059ed91ef9ac855990f1d37c03692": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)"], "35b954ed36494f64b27b495ded6e66b409d0ed79": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)"], "939a8a04eb9391fb29f5e22594a4fd988c89fd57": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)"], "8f068b60ed69a61ab5e68938e4b04776fa9dd3ba": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)"], "9acb622adf15a97c58f26da62a23f9d2278faa4a": ["src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)"], "0a0f3bbd365c470c2ae86b1cf383838bfaab77e1": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()"], "58149e21ad7452ed45ce77b8095c0c2c7414d55b": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)"], "ed8602db296a29bb7e2cf3c3c0f2a19d5b9fc60d": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)"], "ce34196827e6ac834b4c566e1e6fbe863c8e8d1c": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isWhitespace(int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isWhitespace(int)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()"], "3c0a73b30f1969136987f25227383ae9d233e4c1": ["src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()"], "58233665d03a751cbe49778b797ffd70b0eb2016": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Iterable)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Object[])", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Iterable)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Object[])", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Iterable)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Iterable)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)"], "d9d6a8fe04b029e094c65c1f6c82c974f98f3789": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)"], "73ec29f75f1dd6f0c52e9c310dc4f8414346f49a": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getRecordSeparator()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getLineSeparator()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()"], "282f21139408d10253b4a9c32a681c05a8d5ef17": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderNames(Map)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderNames()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderNames()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderNames(Map)"], "97d34575a1074197b8a1b5832d3b2cd3e7656d8f": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getRecordSeparator()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()"], "fcfb6dc7c5262e54995dd70939f614f02a7f7cb6": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "df9da1056b47ad450902c1caf97124a2e4d2a9b8": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHash()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHash()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV135()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV135()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testSerialization()", "src/test/java/org/apache/commons/csv/issues/JiraCsv248Test.java@org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()", "src/test/javorg/apache/commons/csv/issues/JiraCsv248Test.java@org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()"], "88d6162cdefdf94b55e018b10c26cd4d4dc2192e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)"], "6fd5179244556bc80a51720de15fe13d143d1717": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderMapRaw()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderMapRaw()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsConsistent()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsConsistent()"], "b67524da7fd146634c7112b23e95d1d45c398b82": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()"], "cdef24d9182acef747aa03b8cb6ff5865c843f14": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()"], "83d6f8117a5634a36e56a2cf6795e4b604c2ee4c": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatToString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()"], "4117bb493f436b450a7e7bea7a1fba91cf844be7": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()"], "375b273ceda746cd1742dffd2daa7681a9d8ebcc": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()"], "3cd5c85e8a9e1cdcaad4059d5aa3eb4c15228ecf": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(String,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()"], "68352ee98fdb3d07be160357514abe2558a90c0d": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Object)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Iterable)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Object)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Iterable)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testRoundtrip()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)"], "9b37b1eb1f53e107c83e60232ec39d6174591f24": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(InputStream,String,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)"], "a4f737108b806d987ac4d2be686c35196d42bc6e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeaderComments()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toStringArray(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)"], "2b14b16d4b79c84cf67728b51e4dc222fef57880": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"], "ea5b3e0ba6e1cbdcf4a483e87edab5dceef73021": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)"], "e454d6847ea3623c98b7c48d851b00ac659f61e5": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()"], "7e669566dfb9b6adb4746f1d709b802b075b6796": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()"], "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.unicodeEscapeLexer(int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextValue()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isWhitespace(int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVStrategy)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.readEscape(int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getStrategy()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(InputStream)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.reset()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfLine(int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVStrategy)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.flush()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreEmptyLines()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreTrailingWhitespaces()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.clone()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getCommentStart()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.isCommentingDisabled()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setPrinterNewline(String)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEscape()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEscape(char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getPrinterNewline()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getUnicodeEscapeInterpretation()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getDelimiter()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEncapsulator()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreLeadingWhitespaces()", "src/main/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parseLine(String)", "src/main/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/main/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String,CSVStrategy)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.charAt(int)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(StringBuffer)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.CharBuffer(int)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.shrink()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(CharBuffer)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.capacity()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.length()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.getCharacters()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.clear()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(String)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.toStringBuffer()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.append(char)", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.CharBuffer()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.toString()", "src/main/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.trimTrailingWhitespace()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.markSupported()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.skip(long)", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readAgain()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setDelimiter(char)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.equals(Object)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isDelimiterIgnored()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isFieldHeader()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setValueDelimiter(char)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getFill()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getValueDelimiter()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFields(Collection)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.guessConfig(InputStream)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getRowDelimiter()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.CSVConfig()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setIgnoreValueDelimiter(boolean)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.addField(CSVField)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFill(int)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getField(String)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isEndTrimmed()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFixedWidth(boolean)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getDelimiter()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getFields()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFields(CSVField)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setIgnoreDelimiter(boolean)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getFillChar()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isFixedWidth()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFieldHeader(boolean)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.isValueDelimiterIgnored()", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setRowDelimiter(String)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setFillChar(char)", "src/main/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.setEndTrimmed(boolean)", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.getInputStream()", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guess()", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.analyseLines(String)", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidth(String)", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFieldSeperator(String)", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.setInputStream(InputStream)", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.CSVConfigGuesser(InputStream)", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.hasFieldHeader()", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidthSeperator(String)", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.CSVConfigGuesser()", "src/main/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.setHasFieldHeader(boolean)", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.overrideFill()", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.getName()", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.setSize(int)", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.setName(String)", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.CSVField(String)", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.setFill(int)", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.getSize()", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.CSVField(String,int)", "src/main/java/org/apache/commons/csv/writer/CSVField.java@org.apache.commons.csv.writer.CSVField.getFill()", "src/main/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.setConfig(CSVConfig)", "src/main/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)", "src/main/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.setWriter(Writer)", "src/main/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.getConfig()", "src/main/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.CSVWriter(CSVConfig)", "src/main/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeValue(CSVField,String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultStrategy()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextValue()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVStrategy)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVStrategy)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()", "src/test/java/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/java/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()", "src/test/java/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()", "src/test/java/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse4()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse6()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine7()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine5()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse1()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse3()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine3()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine1()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse2()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine2()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse5()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse7()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine6()", "src/test/java/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine4()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendNull()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharArrayBuffer()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testCreate()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendSingleChar()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharBuffer()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendStringBuffer()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testShrink()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendChar()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendString()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testSimpleAppend()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testProvideCapacity()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendString2()", "src/test/java/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharArray()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.getEBR(String)", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testConstructors()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/java/org/apache/commons/csv/writer/CSVConfigGuesserTest.java@org.apache.commons.csv.writer.CSVConfigGuesserTest.testConfigGuess1()", "src/test/java/org/apache/commons/csv/writer/CSVConfigGuesserTest.java@org.apache.commons.csv.writer.CSVConfigGuesserTest.testConfigGuess2()", "src/test/java/org/apache/commons/csv/writer/CSVConfigGuesserTest.java@org.apache.commons.csv.writer.CSVConfigGuesserTest.testSetters()", "src/test/java/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFill()", "src/test/java/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFixedWith()", "src/test/java/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFieldHeader()", "src/test/java/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFields()", "src/test/java/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testDelimiter()", "src/test/java/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testTrimEnd()", "src/test/java/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testValueDelimiter()", "src/test/java/org/apache/commons/csv/writer/CSVFieldTest.java@org.apache.commons.csv.writer.CSVFieldTest.testFill()", "src/test/java/org/apache/commons/csv/writer/CSVFieldTest.java@org.apache.commons.csv.writer.CSVFieldTest.testCSVField()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterIgnoringValueDelimiter()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitRowDelimiterLF()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.todoTestWriterWithHeader()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithoutHeader()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.setUp()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterIgnoringDelimiter()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterDefaults()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitValueDelimiter()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testCSVConfig()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.getConfig()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitRowDelimiterCRLF()", "src/test/java/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitDelimiter()"], "8f0d0e03d684c34229e1d64a163b4835cded1891": ["src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testRFC4180()"], "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": ["src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getLine()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getCommentStart()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.parse(String)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getLineNumber()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getIgnoreLeadingWhitespaces()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.isEndOfFile(int)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setUnicodeEscapeInterpretation(boolean)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setExcelStrategy()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setCommentStart(char)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.isEndOfLine(int)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.nextValue()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader,char)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.Token.Token()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.parseLine(String)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getEncapsulator()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.nextToken()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.Token()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setEncapsulator(char)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getAllValues()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setIgnoreEmptyLines(boolean)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setStrategy(char,char,char,boolean,boolean,boolean)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.isWhitespace(int)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setDelimiter(char)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getUnicodeEscapeInterpretation()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.unicodeEscapeLexer(int)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setCSVStrategy()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.getDelimiter()", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.setIgnoreLeadingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVParser.java@ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(InputStream)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(Writer)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.getCommentStart()", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(Writer,char)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(OutputStream)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.setCommentStart(char)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.printlnComment(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.print(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.printLine(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.getSeparatorChar()", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(OutputStream,char)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.setSeparatorChar(char)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.println()", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.println(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@ch.netcetera.wake.core.format.csv.CSVPrinter.escapeAndQuote(String)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readUntil(char)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.lookAhead()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.skip(long)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readLine()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.skipUntil(char)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.markSupported()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readAgain()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.getLineNumber()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.read()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.read(char,int,int)", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextValue()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse7()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetAllValues()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine2()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testLineTokenConsistency()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine3()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.TestCSVParser(Reader)", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse2()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine4()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine5()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine1()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.suite()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.TestCSVParser.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetEncapsulator()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine6()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse5()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testExcelStrategyTest2()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetCommentStart()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine7()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse4()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testExcelStrategyTest()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse1()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse6()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetDelimiter()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.CSVParserTest(String)", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testParse3()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.TestCSVParser.TestCSVParser(Reader)", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@ch.netcetera.wake.core.format.csv.CSVParserTest.testGetLine()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter3()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.CSVPrinterTest(String)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@ch.netcetera.wake.core.format.csv.CSVPrinterTest.suite()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.ExtendedBufferedReaderTest(String)", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.suite()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testSkip0()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testMarkSupported()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testConstructors()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testSkipUntil()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.getEBR(String)"], "12a2ff42d3c39cf3a33cb07bb57ede81656a02a4": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()"], "7e471527915cb0c73316c598fd02b71a56f2cf43": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getTrim()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAutoFlush()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close(boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()"], "2e543f41f3f76649524707337bfaf2731dc735d0": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()"], "0c216e783cbff346c820cabb83486e4401b2c0a2": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()", "src/test/java/org/apache/commons/csv/issues/JiraCsv198Test.java@org.apache.commons.csv.issues.JiraCsv198Test.test()", "src/test/javorg/apache/commons/csv/issues/JiraCsv198Test.java@org.apache.commons.csv.issues.JiraCsv198Test.test()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()", "src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)", "src/test/javorg/apache/commons/csv/issues/JiraCsv213Test.java@org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)"], "c7576ccdedbf82cbe4bda1ae699eccf90b70bbb9": ["src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)"], "4695d73e3b1974454d55a30be2b1c3a4bddbf3db": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()"], "4698a563dc66905fd52dd421d4854d30608305c6": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()"], "914f2c41557bdd3dcde8d10d6f128fa3bb307b11": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV259()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCSV259()", "src/test/java/org/apache/commons/csv/issues/JiraCsv167Test.java@org.apache.commons.csv.issues.JiraCsv167Test.getTestInput()", "src/test/javorg/apache/commons/csv/issues/JiraCsv167Test.java@org.apache.commons.csv.issues.JiraCsv167Test.getTestInput()", "src/test/java/org/apache/commons/csv/issues/JiraCsv198Test.java@org.apache.commons.csv.issues.JiraCsv198Test.test()", "src/test/javorg/apache/commons/csv/issues/JiraCsv198Test.java@org.apache.commons.csv.issues.JiraCsv198Test.test()", "src/test/java/org/apache/commons/csv/issues/JiraCsv248Test.java@org.apache.commons.csv.issues.JiraCsv248Test.getTestInput()", "src/test/javorg/apache/commons/csv/issues/JiraCsv248Test.java@org.apache.commons.csv.issues.JiraCsv248Test.getTestInput()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(File,Charset)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isNullStringSet()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getTrailingDelimiter()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean,boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(char)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.parse(Reader)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.println(Appendable)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getTrim()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(char)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentMarker()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.trim(CharSequence)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(char)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Appendable)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEscapeCharacter()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toStringArray(Object)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getRecordSeparator()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSet)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.valueOf(String)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getNullString()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getFormat()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentMarkerSet()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(Class)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAutoFlush()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.Predefined(CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeaderComments()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getDelimiter()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteCharacter()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Path,Charset)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuoteMode()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.equals(Object)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrim(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printer()", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)", "src/test/resources/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.getNextRecord()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaders()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createEmptyHeaderMap()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getFirstEndOfLine()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue(boolean)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getCurrentLineNumber()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMapRaw()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.next()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Headers.Headers(Map,List)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getNextRecord()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isClosed()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.hasNext()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.hasNext()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.Headers(Map,List)", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.remove()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.close()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderNames()", "src/test/resources/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecordNumber()", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.flush()", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close(boolean)", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getOut()", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Object[])", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.close()", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Iterable)", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecord(Iterable)", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printComment(String)", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Object[])", "src/test/resources/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getComment()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getRecordNumber()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(String)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.values()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.putIn(M)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(Enum)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isSet(int)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(int)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.hasComment()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getCharacterPosition()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.size()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toList()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String,String,long,long)", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toMap()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getHeaderMapRaw()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.iterator()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getParser()", "src/test/resources/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isConsistent()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.close()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getPosition()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLastChar()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/test/resources/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.isClosed()", "src/test/resources/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copy(Reader,Appendable)", "src/test/resources/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)", "src/test/resources/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer,char)", "src/test/resources/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copy(Reader,Appendable,CharBuffer)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.mapNullToDisabled(Character)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getFirstEol()", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isClosed()", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCurrentLineNumber()", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCharacterPosition()", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isDelimiter(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isQuoteChar(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nextToken(Token)", "src/test/resources/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/test/resources/org/apache/commons/csv/Token.java@org.apache.commons.csv.Token.toString()", "src/test/resources/org/apache/commons/csv/Token.java@org.apache.commons.csv.Token.reset()"], "c609fb39e6ad26c291fddba5f3b53a1eca66ef40": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCharacterPosition()"], "304f1917351b0ec39bb2b66aa326d64b6aa88150": ["src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.init()", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.getReader()", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.getReader()"], "9afec3ed39d954ae2ad927ee73445a9ee5163d07": ["src/test/java/org/apache/commons/csv/issues/JiraCsv164Test.java@org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/issues/JiraCsv164Test.java@org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()", "src/test/java/org/apache/commons/csv/issues/JiraCsv167Test.java@org.apache.commons.csv.issues.JiraCsv167Test.parse()", "src/test/java/org/apache/commons/csv/issues/JiraCsv167Test.java@org.apache.commons.csv.issues.JiraCsv167Test.getTestInput()", "src/test/java/org/apache/commons/csv/issues/JiraCsv198Test.java@org.apache.commons.csv.issues.JiraCsv198Test.test()"], "45d972fe5b7807db5f5bb6fed182f107993da5a4": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)"], "b1edd537c70143026ebb9eb2c9eca0d7417a398d": ["src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeValue(CSVField,String)", "src/javorg/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeValue(CSVField,String)", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitDelimiter()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitRowDelimiterLF()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.todoTestWriterWithHeader()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.setUp()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitValueDelimiter()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterDefaults()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.getConfig()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterIgnoringValueDelimiter()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitRowDelimiterCRLF()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterIgnoringDelimiter()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriterWithoutHeader()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriter()"], "5206b2a244e21070d149ee1e1f1efac8f2584d6e": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()"], "7c5c08921c35137b94fa8877f99d088eb13b3941": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(Enum)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(Enum)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetNullEnum()"], "1023690dc284afaf380b0cf3eb74c411e0663465": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash()"], "e0b79fe6917691257ee2aff5f22739217b969bf9": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.close()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.isClosed()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.close()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.isClosed()"], "190390bf5dd83d6137ca3045902fcecbeafa3227": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135All()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJira135_part2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()"], "9d00beb3525c135c1f5ef7f5b43c2481090c5763": ["src/test/java/org/apache/commons/csv/Utils.java@org.apache.commons.csv.Utils.compare(String,String,List)", "src/test/java/org/apache/commons/csv/Utils.java@org.apache.commons.csv.Utils.compare(String,String,String)"], "8462234502ff4c6543e54e3e7b542029182bdcd3": ["src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "22601f647f2ce9a05fa4ce20ea356492c670940c": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNoHeaderMap()"], "4f58df6d4a41ef489ed117fb58a93b68328ec5ed": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()"], "977824491d8d65b9952005573f2ebffe6ced671d": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()"], "3cd50672f71813a847054e5d6ba1894fda0e5dec": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()"], "70337bef8f5eacd4ecac22b2625a20224f77ff20": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.clone()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.clone()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)"], "b502c5a20d1c9d98f10cbe50ccb376b907f45172": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(Class)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(Class)"], "bf8f23c3104a137cb42e13bd69b10321cdf92135": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)"], "a2b9dfbd4ea1087fcb0e6b49c08361e2e8cd2c02": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasContent(String)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.isReady()", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasType(Token)"], "cb99634ab3d6143dffc90938fc68e15c7f9d25b8": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getDelimiter()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getLineSeparator()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingDisabled()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isUnicodeEscapesInterpreted()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isTrailingSpacesIgnored()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getCommentStart()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEncapsulator()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getEscape()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEmptyLinesIgnored()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.clone()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLeadingSpacesIgnored()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isWhitespace(int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getFormat()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVStrategy)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isWhitespace(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getStrategy()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVStrategy)", "src/main/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String,CSVStrategy)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultStrategy()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVStrategy)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVStrategy)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()"], "12b600c2520093d83d0b67ae9b3eacfae466455e": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()"], "5c9b878dfd2539e7e5d725d116763c241901ac12": ["src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()"], "822e653a0e8ff9f7d6a9e605193302123333ec59": ["src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()"], "ff41f78ef59a8d4699ee30a2faf8e6964ca434c7": ["src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.CSVLexer1(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)"], "99c3819bec33a0999b743b6827e6b48fcdd9c8ad": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyHeaders(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreEmptyHeaders()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()"], "20d3ec46fd2c07eba4bfbefacd9fe868849828ae": ["src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)"], "20eac694a070838bfe37df293007cf1babd127b4": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)"], "3655efcedbf804408a433cbbd25eef3fc91c675a": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.simpleTokenLexer(Token,int)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.nextToken(Token)"], "2a8ce4a11cf42683d7abf06c591b4c0f1e8928e1": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)"], "412d05d166540dc3dc97ac5c08958934ea7112b3": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testClose()"], "aee6c50e2830c007a572cc96a57bc105308acc49": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.iterator()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.next()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.iterator()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.size()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(int)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.values()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,List)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,String)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)"], "cd02e63c1fc9c8b2db5e56345c8abfda6c8b705e": ["src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.setUp()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedBackspace()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedFF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithoutEscaping()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.CSVLexerTest.getLexer(String,CSVFormat)"], "6aa17567501c94e2ed65dc0c2f2ff3c01e534bd5": ["src/test/java/org/apache/commons/csv/issues/JiraCvs249Test.java@org.apache.commons.csv.issues.JiraCvs249Test.testJiraCsv249()"], "339c2a689c0c02264ec633bae12c089806b13423": ["src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()"], "446eaf8c2a7f35eb65f3d03b6b2d1e57f6171d49": ["src/test/java/org/apache/commons/csv/Utils.java@org.apache.commons.csv.Utils.compare(String,String,List)", "src/test/javorg/apache/commons/csv/Utils.java@org.apache.commons.csv.Utils.compare(String,String,List)"], "64de57a0bc5517dd1dbcc4c1033c673e5661abf8": ["src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()"], "df08acad745aef61a44c7f392abbee4ef9e201f8": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.parse(Reader)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.parse(Reader)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()"], "7c2cfeaf5884b9dd698309f5a10e80a1ba6705b0": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "adc4faa7841f3ae7ce95cbdc4480de9d2e736317": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissing()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullPathFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullPathFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrim()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissing()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterNullAppendableFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterNullAppendableFormat()"], "795fe61858b9be86acade30f82e5acc87628c75d": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()"], "2598862d94b7f6f3dfae057193b4f0cb5be8dee8": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()"], "cf1460b21e23a6681aa5222736fbfcd7481b1a0d": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "8ecd4657efe32f37f6b2524f3b76444b22750a37": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()"], "713e9c5382476d5e309ac4e18b1dba8f060f3837": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)"], "f6f9fc1d480e85839c80d0890fa5ebed74971dc7": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.Token()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.Token()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parseLine(String)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.setStrategy(CSVStrategy)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getStrategy()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getCommentStart()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.setSeparatorChar(char)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(OutputStream,char)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,char)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printLine(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.setCommentStart(char)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getSeparatorChar()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getCommentStart()", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parseLine(String)", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseLine7()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse7()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseLine5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseLine6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseLine4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseLine2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseLine1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseLine3()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine3()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse7()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine7()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine4()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine5()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine6()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse2()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine2()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse5()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine1()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse1()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse3()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse4()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse6()"], "7b168ebbbe06468b380e6f3e25c3448df9f748b3": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.readEscape()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isClosed()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.readEndOfLine(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.mapNullToDisabled(Character)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isWhitespace(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isStartOfLine(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isQuoteChar(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isMetaChar(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.close()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isDelimiter(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.isEscape(int)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithoutEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedBackspace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedFF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithoutEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)"], "aa0fbb01a04a02d251066e33da6a5301eceb819b": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.valueOf(String)", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"], "42476f4b08fe4b075aa36f688f0801857f3635d9": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.isEmptyLinesIgnored()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withEmptyLinesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withLeadingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withTrailingSpacesIgnored(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.clone()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getCommentStart()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getDelimiter()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEncapsulator()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.isUnicodeEscapesInterpreted()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.isLeadingSpacesIgnored()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEscape()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.isTrailingSpacesIgnored()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getLineSeparator()", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withUnicodeEscapesInterpreted(boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getDelimiter()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEncapsulator()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreEmptyLines()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getUnicodeEscapeInterpretation()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreLeadingWhitespaces()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getCommentStart()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getPrinterNewline()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreTrailingWhitespaces()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEscape(char)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEncapsulator(char)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEscape()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.clone()", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setCommentStart(char)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()", "src/test/javorg/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()", "src/test/javorg/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()", "src/test/javorg/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/javorg/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()"], "817561f4d78b0f8b967039e86c286d3faa175d13": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMultipleIterators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()"], "6b67a34b87e59e72bffd7e3b9dff31c07aa4bb65": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)"], "e331df694cfb3279cf4e5e4aea7fffa7ade099a8": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()"], "16b175b01aaa27efd796628755b48e48b6866e4d": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)"], "a50d473a3bd44b84281a5d94432bf7e812472b68": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()"], "56ca5858db4765112dca44e5deeda0ac181a6766": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.classify(int)", "src/test/javorg/apache/commons/csv/CSVLexer3.java@org.apache.commons.csv.CSVLexer3.classify(int)", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()"], "7fd16f353a89e7360f060432bf7f9773284b1883": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)"], "daf984983bc695591965f2126e0ef641005fe347": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecordNumber()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getRecordNumber()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()"], "6ca0f78156086304cbdeff9a930dd58dffd3bbd6": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)"], "1d7ebab2118a4bb4ed542dd67380c3ab8abc485b": ["src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.escapeAndQuote(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.escapeAndQuote(String)"], "19fbc19294e18eaf36c44dbf00605721626cb8e1": ["src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseSuperCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseSkifeCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.baseline(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.getReader()", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.onRow(String)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseOpenCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CountingReaderCallback.onRow(String)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseGenJavaCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseJavaCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseCommonsCSV(Blackhole)"], "94b9f8dc957d3a2276232c8e6f3acc6fe633b00a": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "186e9f98047b2c8b298709a59a40df3e049ae8fa": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testSerialization()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.assertTokenEquals(Token,String,Token)", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.assertTokenEquals(Token,String,Token)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testForEach()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelFormat2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDisabledComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()"], "a65806a126d71477b3538b571c45f27de054ff84": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()"], "978e5796e24f44cbe4e48527811d4f461b1e9e59": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEOLPlain()"], "4d2616b7a550c2ce855b612829eb34dea9ce09dc": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createEmptyHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createEmptyHeaderMap()"], "50b7f793381ca6d8fd74a01d55d214c1c3e5762d": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.getBoolean(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByNullString()", "src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByMissingString()", "src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByString()", "src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.createTestRecord()", "src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java@org.apache.commons.csv.CSVRecordBooleanTest.setUp()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()"], "1166ca605bcc035654771f1ddc1092d86f2ec1e8": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextValue()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.reset()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.unicodeEscapeLexer(int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfLine(int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVStrategy)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfFile(int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isWhitespace(int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.readEscape(int)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getStrategy()", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(InputStream)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(InputStream)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextValue()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.reset()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isWhitespace(int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVStrategy)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getStrategy()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.unicodeEscapeLexer(int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getAllValues()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfFile(int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfLine(int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.readEscape(int)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.flush()", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVStrategy)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.flush()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVStrategy)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEscape(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreTrailingWhitespaces()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.clone()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getCommentStart()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEncapsulator()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreLeadingWhitespaces()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getUnicodeEscapeInterpretation()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.isCommentingDisabled()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getDelimiter()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getEscape()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getPrinterNewline()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setDelimiter(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEncapsulator(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setCommentStart(char)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreEmptyLines(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreEmptyLines()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setPrinterNewline(String)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setPrinterNewline(String)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.clone()", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setDelimiter(char)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEscape(char)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreEmptyLines(boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setCommentStart(char)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getPrinterNewline()", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setEncapsulator(char)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)", "src/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getCommentStart()", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String,CSVStrategy)", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parseLine(String)", "src/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parseLine(String)", "src/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String,CSVStrategy)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.charAt(int)", "src/java/org/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.trimTrailingWhitespace()", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.trimTrailingWhitespace()", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.charAt(int)", "src/javorg/apache/commons/csv/CharBuffer.java@org.apache.commons.csv.CharBuffer.provideCapacity(int)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readAgain()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.skip(long)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.markSupported()", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readAgain()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.skip(long)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.lookAhead()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.markSupported()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)", "src/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()", "src/java/org/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getField(String)", "src/javorg/apache/commons/csv/writer/CSVConfig.java@org.apache.commons.csv.writer.CSVConfig.getField(String)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidthSeperator(String)", "src/java/org/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guess()", "src/javorg/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidthSeperator(String)", "src/javorg/apache/commons/csv/writer/CSVConfigGuesser.java@org.apache.commons.csv.writer.CSVConfigGuesser.guess()", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeValue(CSVField,String)", "src/java/org/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)", "src/javorg/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeValue(CSVField,String)", "src/javorg/apache/commons/csv/writer/CSVWriter.java@org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextValue()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVStrategy)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVStrategy)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextValue()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVStrategy)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVStrategy)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,String)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(int)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,String)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(int)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine3()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse7()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine7()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine4()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine5()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine6()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse2()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine2()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse5()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine1()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse1()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse3()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse4()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse6()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine3()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse7()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine7()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine4()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine5()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine6()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse2()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine2()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse5()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParseLine1()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse1()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse3()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse4()", "src/test/org/apache/commons/csv/CSVUtilsTest.java@org.apache.commons.csv.CSVUtilsTest.testParse6()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendStringBuffer()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharArray()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharBuffer()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testCreate()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendNull()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testSimpleAppend()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendString()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendStringBuffer()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharArray()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendCharBuffer()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testCreate()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendNull()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testSimpleAppend()", "src/test/org/apache/commons/csv/CharBufferTest.java@org.apache.commons.csv.CharBufferTest.testAppendString()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.getEBR(String)", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testConstructors()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.getEBR(String)", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testConstructors()", "src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFields()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFields()"], "aef71309b6d84d2806b7aadd117d06bb6a845f06": ["src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.matchesSafely(Token,Description)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasContent(String)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.matches(Token,String)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.isReady()", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasType(Token)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.describeTo(Description)", "src/test/java/org/apache/commons/csv/TokenMatchersTest.java@org.apache.commons.csv.TokenMatchersTest.testHasContent()", "src/test/java/org/apache/commons/csv/TokenMatchersTest.java@org.apache.commons.csv.TokenMatchersTest.testMatches()", "src/test/java/org/apache/commons/csv/TokenMatchersTest.java@org.apache.commons.csv.TokenMatchersTest.testHasType()", "src/test/java/org/apache/commons/csv/TokenMatchersTest.java@org.apache.commons.csv.TokenMatchersTest.testIsReady()", "src/test/java/org/apache/commons/csv/TokenMatchersTest.java@org.apache.commons.csv.TokenMatchersTest.setUp()"], "7c770e0b53235e90a216ae3b214048b765cda0c0": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isLineBreak(Character)"], "3fd92ec4a4d74541d012114d21196348ae4169e0": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()"], "992c0645e0b4d9436593f39c3bcff77328adb37c": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/test/java/org/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306663.java@org.apache.commons.csv.CSVLexer1306663.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1306667.java@org.apache.commons.csv.CSVLexer1306667.nextToken(Token)"], "5d15c38eed08d4fef85602dd6e29eab0f5295267": ["src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.setUp()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.setUp()"], "480b90febb39d7a3dd6f55d6082434ef09eb0b5f": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)"], "e235b2a63cf9654eedc2a33dbe33e16989f0b91d": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()"], "ddda2af0666e199e0e6e267833449223b9e738e1": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVStrategy)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)"], "9cb66ca7fb213f8936f32749d23294b154fe5964": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEncapsulating()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingDisabled()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isEscaping()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isCommentingDisabled()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()"], "53fd86dfbc75633b9820868c6119a75952da9bde": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(char)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()"], "5a0894f9e0ee9f4703b8db3f200ff4a507bf043b": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getNullString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullToString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getNullToString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withNullToString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()"], "7694e8f99972f33b2e285ea2652a1b21a1c6b653": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Object[])", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(Object[])"], "0fb414b6f21d11ed61740e66c04aced832827577": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,List)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,List)"], "5e7945e1ceeb6cce60e3da5caf4d57f7bf531689": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()"], "f8294d2d225600e29720c7a1c5c33cda00591bf6": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()"], "3568bba22f6217a644c73fbf3485f1aa93804df3": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()"], "50a89da39fb3f2cf126c9ba7d41a099a3e576d6c": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyFile()"], "e41d4841ff196ec74e1e09f1eb85b7160099f22e": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsOne()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNewFormat()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testToString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()"], "016cc839d2e059e25217c7929a1dbbf41b0f2135": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long,long)"], "7d07c1915c7fbabb9deb83c3ecb0d04d7ba15b55": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)"], "ca7bbae40ef89e561f74d1a00776e3a9f697bd37": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLineNumber()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getFormat()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.reset()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.assertTokenEquals(Token,String,Token)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.getLexer(String,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()"], "4def868a8e2042aba1cea2e5509fbb1ce7f8aab2": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(Class)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()"], "f57afe607e2617c8e3283674bd1daf67426abd79": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()"], "fe514da465a36e8d7591a8427a0787c758ead87e": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsNullString()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsHeader()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissing()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()", "src/test/java/org/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/LexerTest.java@org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()"], "4e02db1272c2f47c4c4a3746f557d28646e77abc": ["src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()", "src/test/javorg/apache/commons/csv/issues/JiraCsv203Test.java@org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()"], "65f6f1dfe8c1fde8c122b5a074d1e3498eb048c0": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isClosed()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isCommentStart(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.mapNullToDisabled(Character)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfFile(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.getCurrentLineNumber()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isQuoteChar(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nextToken(Token)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isWhitespace(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.close()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEscape(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isMetaChar(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isDelimiter(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithoutEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.getLexer(String,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedBackspace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackspace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedFF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.getLexer(String,CSVFormat)", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testBackslashWithoutEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testFF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testComments()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testLF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)"], "7d2ec7a0536165eceaffb0c32912d5ef202772fe": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()"], "afc9de71bd8bb51dfc7ab12df2aeb7a38b709ef2": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)"], "20721c5a3dc429039e30e29723e3e917a7c40844": ["src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetUnmapped()"], "0030e1a9a23972e0c7dcc6caf21d753aa5dbf737": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getQuotePolicy()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEncapsulator(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withLineSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Character,Character,boolean,boolean,String,String)", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()"], "be3cb017eb7db3806a66afff05e32e75e2d56c84": ["src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(InputStream)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,char)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char)"], "e3eca25d1329a202db4e63fb623117b63c74aa71": ["src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testSerialization()"], "28520d57d8100665c4b96c01d0d2ca9de69cc7d6": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()"], "1337758f9f88b06d425007d3ad30508e3536e404": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken5()"], "f8b80e83417c3c7eeed1282118f64fa0e85c4787": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomMySql()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomTdf()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.generateLines(int,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomDefault()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandomExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()"], "7d8c7f17ff5ee965b7e1d47e667fcd878d59c6aa": ["src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()"], "dbbae1eccdf486c70204f99f1a938c26fc062e2f": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeBackspace()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeFF()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.setUp()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedLF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeFF()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapeBackspace()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCR()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedTab()"], "770628d292666a4b99949e97b75f485e3e240e0d": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setNextCharacterPosition(long)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setNextRecordNumber(long)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithHeaders()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Statement)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()"], "eb472cb82ab0b7d0b821b17af0417cca6c1c6b4f": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCSV57()"], "42b9fdb099a438886842795d8b0b325952d9f3e9": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()"], "bb54feb7cde6445d1e85fb9eb028a38823bbf0a7": ["src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorIllegal()"], "ae5e7898f584fd06b2b7f7d6f00d8a6c3001bea5": ["src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.println()"], "fa116dd46c5e42ca480e9331bf9ef71290a9db05": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)"], "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()"], "df592767fc0b0a4c4528256198ced0c4763e9e66": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(Character,Character,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(Character,Character,Character,Character,boolean,boolean,String,String)"], "f96adf26c182a9eabbca6aa70a9c77b4f07e5e26": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printer()"], "b3553addb7d7355cb339dc4c357ba31debb24013": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "2785c355aa53a5cc990b651a1c658aa3d2fd8541": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.toString()"], "9a27bb570df37e5e64282e66b9bae9540222f655": ["src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isEndOfLine(int)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.readEscape()", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.isStartOfLine(int)"], "17c26354dfe0f06b1b20d6142b92f55c932781fd": ["src/main/javorg/apache/commons/csv/Token.java@org.apache.commons.csv.Token.reset()", "src/test/java/org/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)", "src/test/javorg/apache/commons/csv/CSVLexer1.java@org.apache.commons.csv.CSVLexer1.nextToken(Token)"], "639e68e2533dbe65e4b33de380aa2bdb790068b3": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)"], "3be1057064c83bbebb9e1394f754b6bc21cd3d3e": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(Object[])", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String[])"], "f9871c5d359f61c04ba567df58af206b676ad9f3": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeadersMissingException()"], "a0d975933d6fe9eb5f359088de43508c1d3109bf": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.setUp()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetInt()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsMapped()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsConsistent()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIsSet()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetString()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIterator()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()"], "63ddb09152a4475f761e5825cd2887d67f0e246a": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)"], "03dbcf48c086db6b87a3f57e01fe0a9979fc79f0": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()"], "db374369aeeb1f3ace8efcbd7155fcff20354504": ["src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader)", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.getBufferedReader()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFile()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.setUpClass()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.testParseBigFile()", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.getBufferedReader()"], "f6c9a36ad6d14485e9020231f91e9046a957a76c": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()"], "70584f87f57ae7137e7b639f51728210f5e95365": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)"], "6a34b823c807325bc251ef43c66c307adcd947b8": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newFormat(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.defaults()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withEscape(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getHeader()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/javorg/apache/commons/csv/CSVFileParserTest.java@org.apache.commons.csv.CSVFileParserTest.testCSVFile()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testDelimiter()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testDelimiterSameAsEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteChar()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsDelimiterThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testCommentStart()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithQuoteLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicyNoneWithoutEscapeThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithEscapeCRThrowsExceptions()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testEscapeSameAsCommentStartThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testIgnoreSurroundingSpaces()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.setUp()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithCommentStartCRThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testIgnoreEmptyLines()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testRecoardSeparator()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicy()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testWithDelimiterLFThrowsException()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testEscape()", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testDelimiterSameAsCommentStartThrowsException()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testProvidedHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetHeaderMap()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetRecords()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderComment()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteAll()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)", "src/test/javorg/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)"], "02b21463e68e7b3d5f3d9980746d131a08a08eed": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.setStrategy(CSVStrategy)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVStrategy)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printSep()", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)", "src/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String,boolean)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.setStrategy(CSVStrategy)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.getStrategy()", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(OutputStream)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.escapeAndQuote(String)", "src/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printlnComment(String)", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getPrinterNewline()", "src/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setPrinterNewline(String)", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String,CSVStrategy)", "src/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(String)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultStrategy()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVStrategy)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVStrategy)", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doOneRandom()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.equals(String,String)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.randStr()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.doRandom(int)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testRandom()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.printable(String)", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()", "src/test/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()", "src/test/org/apache/commons/csv/CSVStrategyTest.java@org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()"], "4471e9d66a6fe249efb758ac7f2140ed5cd349e4": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSet)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toStringArray(Object)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentMarker(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuote(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toStringArray(Object)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.hashCode()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.geH2Connection()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Statement)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithHeaders()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()"], "75b9a4ba4ed34eed0afe0a6c3b8a79979685a379": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullToString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getNullToString()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.withNullToString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.build()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object)", "src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.setUp()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.setUp()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()"], "83b2b9cc2cc77315912ebbc81e64e36040c017a4": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testNotFlushable()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testCRComment()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()"], "c1049b549b5516e3e91c620acd03a557a2c83cdd": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()"], "85226d80e6ad77a959c8db145a86e0311b2e05c9": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isConsistent()", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isMapped(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isConsistent()"], "9141cb39e6659340574a96b41d7f463ebdc2610e": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecord()"], "ae47fb8432095e48b8e754c767bb9037dfa5c5fa": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()"], "7825b260f30074c869c18fbedba24c6d60bcf7e2": ["src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testRFC4180()", "src/test/javorg/apache/commons/csv/CSVFormatBuilderTest.java@org.apache.commons.csv.CSVFormatBuilderTest.testRFC4180()"], "0558a35d9198e0f076f86630c8dcab1e0b0868f2": ["src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parseLine(String)", "src/java/org/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parse(String)", "src/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.parseLine(String)"], "70f00f973ae41aeefaac66077916945a07012b1f": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.readLine()", "src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testNextToken2()"], "1282503fb97d621b4225bd031757adbfada66181": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testHeader()"], "512e446d284354e4945e03399843ac4426a2bcc5": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()"], "3eac15fc8d5a1da80119e7389f78b9795e8aa4db": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(Object[])", "src/test/java/org/apache/commons/csv/issues/JiraCsv211Test.java@org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()"], "453cfcbb593732bee980f4c83d06448152ac9887": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withHeaderComments()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withCommentMarker()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withHeaderComments()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withCommentMarker()", "src/test/java/org/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()", "src/test/javorg/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()"], "865872e0f1517796f4b203ff7682d922119514fa": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullPathFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParse()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParser(String,CSVParserFactory)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePath()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseURL()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.iterate(Iterable)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.createReader()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.Stats.Stats(int,int)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.createParser()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.readAll(BufferedReader,boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show(String,Stats,long)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show()", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.Stats(int,int)", "src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.readAll(BufferedReader,boolean)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show(String,Stats,long)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.iterate(Iterable)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.createReader()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.Stats.Stats(int,int)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.Stats(int,int)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.show()", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)"], "e1dc4f870ea244c744af2285b6d7dda8bfe4ac51": ["src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.print(Object,boolean)"], "ce4e72701b1ad4caabc3bd668bd058fff082f2b6": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDuplicateHeaderEntries()"], "e0f022ee94181b16a7c829d62b1533cfb9a035aa": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipSetHeader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()"], "32ffe82a5ff35a659b73ecd5bab3dda392cb8471": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.initializeHeader()"], "da55604794b31f84eaa1a04205fe4d9a6573749c": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderMap()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderNames(Map)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderNames(Map)"], "1299ddfe3fec5000f68c203a7f61e9af02955296": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"], "d8d5de6476ac411593bd34ca89492e74905372ab": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderMap()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.createHeaderMap()"], "322fad25ad96da607a3045a19702a55381a426e7": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.println(Appendable)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printer()", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(Object,CharSequence,int,int,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printer()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printAndEscape(CharSequence,int,int,Appendable)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.println(Appendable)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)", "src/main/java/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer,char)", "src/main/java/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copy(Reader,Appendable,CharBuffer)", "src/main/java/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copy(Reader,Appendable)", "src/main/java/org/apache/commons/csv/IOUtils.java@org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)"], "eb5c332a72365777bb1a9c408463d64ed558cb1f": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.print(File,Charset)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()"], "ac46f73b259412122680f217020ad473dc6e8781": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(InputStream,String,CSVFormat)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream()"], "9dd3dda09f09c6baa7e053b39043bc9e2ef47ee0": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfLine(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfLine(int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()"], "c694d060bdc95760b32c96b62a4b14c4e3d502f8": ["src/test/java/org/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()", "src/test/javorg/apache/commons/csv/CSVLexerTest.java@org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()"], "54597a8b8e1d299a6b66de840b5496af96b297d5": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.isComment()", "src/test/java/org/apache/commons/csv/JiraCsv167Test.java@org.apache.commons.csv.JiraCsv167Test.parse()"], "8685aa5ff91ee91a5449d71780997378917bd824": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable,boolean)"], "ddfe9df74f39bb0e3851fbc8fb6e9669cb60ca69": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.toString()"], "16bfec07ffd785e5abbabdc4145eeac5cccc2c79": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getLine()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.Token.reset()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()"], "7bba60a559b7fecd810fc5ec16d75c2223ce0555": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.main(String)", "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java@org.apache.commons.csv.perf.PerformanceTest.setUpClass()"], "6d5611f7939f342cd35c1df42c063601a993750d": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.getRecords()", "src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long,long)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long,long)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseSuperCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseSkifeCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.read(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseCommonsCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.onRow(String)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseOpenCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CountingReaderCallback.onRow(String)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseGenJavaCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.init()", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseJavaCSV(Blackhole)", "src/test/java/org/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.split(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CountingReaderCallback.onRow(String)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseGenJavaCSV(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.split(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseOpenCSV(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseSuperCSV(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseSkifeCSV(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.init()", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseJavaCSV(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.parseCommonsCSV(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.read(Blackhole)", "src/test/javorg/apache/commons/csv/CSVBenchmark.java@org.apache.commons.csv.CSVBenchmark.onRow(String)", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)"], "ab2e7eb504d45a3443b76f0462800f077cd807be": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)", "src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIterator()", "src/test/javorg/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testIterator()", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.matchesSafely(Token,Description)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasContent(String)", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.isReady()", "src/test/java/org/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasType(Token)", "src/test/javorg/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasContent(String)", "src/test/javorg/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.matchesSafely(Token,Description)", "src/test/javorg/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.isReady()", "src/test/javorg/apache/commons/csv/TokenMatchers.java@org.apache.commons.csv.TokenMatchers.hasType(Token)"], "5a9436d462a45a44501c31a328c9926fb3cc4b86": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testHeaderMissing()"], "467a504a2db258bdce8e00a87d67cb9af92958b4": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.isNullHandling()"], "ee95ad7a13b3d69096bac45ad344575e2cb54c1a": ["src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetLine()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testUnicodeEscape()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBackslashEscaping()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.TestCSVParser.testNextToken()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testGetAllValues()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextValue()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken6()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testExcelStrategy2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken1()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken3()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken2()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken4()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken5()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()", "src/test/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testNextToken()"], "483ba855f240d45698ba393e4691807cc9a93869": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.remove()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVRecordIterator.remove()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.remove()"], "bdb5842eefc24b52286fa9c1cfe1871a93d30f44": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.validate()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testValidation()"], "47d11b853fdd14d3923ed24dc8212a29266029dc": ["src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/java/org/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter1()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter3()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter5()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter7()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter4()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter2()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrinter6()", "src/test/javorg/apache/commons/csv/CSVPrinterTest.java@org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()"], "4b2a4caa305c2e309c199080d5710f6e1a935a7d": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyHeaders(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withDelimiter(char)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withCommentStart(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withIgnoreEmptyHeaders(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withHeader(String[])", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withNullString(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuoteChar(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withEscape(Character)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withRecordSeparator(String)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)"], "8ba293b934bac316ed6e528ad08d5f13fe2ce9c1": ["src/test/java/org/apache/commons/csv/CSVRecordTest.java@org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()"], "e5a7b27224f01c6a692c414cc3aa53fd7a98f268": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()", "src/main/javorg/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.newBuilder()"], "d8eaf1cd616a1e92c76ed6356790a907135c3d81": ["src/test/java/org/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)", "src/test/javorg/apache/commons/csv/PerformanceTest.java@org.apache.commons.csv.PerformanceTest.getLexerCtor(String)"], "73cc5246cf789db8f459e2f539831b6e91bedd26": ["src/main/java/org/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/main/javorg/apache/commons/csv/CSVPrinter.java@org.apache.commons.csv.CSVPrinter.println()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()"], "86ef75f808306d4dbbc63d900ec73dfa5ff74cad": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()", "src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testBOM()"], "05fc4d1018e95e7ceaaaf7676a1f499799daaf82": ["src/test/java/org/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()", "src/test/javorg/apache/commons/csv/CSVParserTest.java@org.apache.commons.csv.CSVParserTest.testDefaultFormat()"], "5d5458d7f60190df9c2c54e17e489218acd18783": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)"], "5c3e51363fe10ca03f832858fb69ccf80f490ebb": ["src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testImmutalibity()", "src/test/javorg/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testMutators()"], "43b777b9829141a3eb417ebf3ce49c8444884af0": ["src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/main/java/org/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setIgnoreEmptyLines(boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.setPrinterNewline(String)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)", "src/main/javorg/apache/commons/csv/CSVStrategy.java@org.apache.commons.csv.CSVStrategy.getIgnoreEmptyLines()"], "1a35541867c086cae9166a0b0dc9901ea0e12812": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.format(String[])", "src/main/javorg/apache/commons/csv/CSVUtils.java@org.apache.commons.csv.CSVUtils.printLine(CSVFormat,String[])", "src/test/java/org/apache/commons/csv/CSVFormatTest.java@org.apache.commons.csv.CSVFormatTest.testFormat()"], "ffb70548fe695752d2f14e16771cc7e82127bef3": ["src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/javorg/apache/commons/csv/ExtendedBufferedReader.java@org.apache.commons.csv.ExtendedBufferedReader.read()", "src/main/java/org/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/Lexer.java@org.apache.commons.csv.Lexer.nextToken(Token)"], "530c93392ca9113fcdf3acd1dd21b1c3348b9b38": ["src/main/java/org/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)", "src/main/javorg/apache/commons/csv/CSVRecord.java@org.apache.commons.csv.CSVRecord.get(String)"], "fd3a9862bd53c24e319655f968ea0f054453c839": ["src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.Predefined(CSVFormat)", "src/main/java/org/apache/commons/csv/CSVFormat.java@org.apache.commons.csv.CSVFormat.getFormat()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)", "src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java@org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()"], "6b422c82bdb39da4ca3ee4e0f8d2fbe0e8a28d46": ["src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextToken(Token)", "src/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfLine(int)", "src/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.isEndOfLine(int)"], "259812ec0af308b2ceec4687ffa52b873425bb5b": ["src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue(boolean)", "src/main/java/org/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.nextRecord()", "src/main/javorg/apache/commons/csv/CSVParser.java@org.apache.commons.csv.CSVParser.addRecordValue(boolean)"], "389fcd218eca6fd7e2826cafb08933fcb1ae8faa": ["src/test/org/apache/commons/csv/writer/CSVConfigGuesserTest.java@org.apache.commons.csv.writer.CSVConfigGuesserTest.testSetters()", "src/test/org/apache/commons/csv/writer/CSVConfigGuesserTest.java@org.apache.commons.csv.writer.CSVConfigGuesserTest.testConfigGuess1()", "src/test/org/apache/commons/csv/writer/CSVConfigGuesserTest.java@org.apache.commons.csv.writer.CSVConfigGuesserTest.testConfigGuess2()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFixedWith()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testTrimEnd()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFieldHeader()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFields()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testFill()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testDelimiter()", "src/test/org/apache/commons/csv/writer/CSVConfigTest.java@org.apache.commons.csv.writer.CSVConfigTest.testValueDelimiter()", "src/test/org/apache/commons/csv/writer/CSVFieldTest.java@org.apache.commons.csv.writer.CSVFieldTest.testCSVField()", "src/test/org/apache/commons/csv/writer/CSVFieldTest.java@org.apache.commons.csv.writer.CSVFieldTest.testFill()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testWriter()", "src/test/org/apache/commons/csv/writer/CSVWriterTest.java@org.apache.commons.csv.writer.CSVWriterTest.testCSVConfig()"], "462af644569da906920d75a87b2476b05b1214ae": ["src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()", "src/test/javorg/apache/commons/csv/ExtendedBufferedReaderTest.java@org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()"], "05b5c8ef488d5d230d665b9d488ca572bec5dc0c": ["src/main/java/org/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)", "src/main/javorg/apache/commons/csv/CSVLexer.java@org.apache.commons.csv.CSVLexer.nextToken(Token)"]}