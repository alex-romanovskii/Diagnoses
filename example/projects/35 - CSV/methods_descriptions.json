{"org.apache.commons.csv.CSVPrinter.escapeAndQuote(String)": "use strategy encapsulator in printer rather than assuming double-quote\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@558885 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.getReader()": "Load the data in memory before running the benchmarks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1658653 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.readEscape()": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()": "Use final.", "org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695178 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long)": "Format lines that are longer than 120 characters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458803 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.setInputStream(InputStream)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isIgnoringEmptyHeaders()": "Rename the IgnoreEmptyHeaders property to AllowMissingColumnNames\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612337 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()": "Use final.", "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.show()": "Remove extra parens.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397071 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriterIgnoringValueDelimiter()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.CSVPrinter(OutputStream)": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isNullStringSet()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testEscapeSameAsCommentStartThrowsException()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testJIraCsv154()": "Test CSV-154.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1700073 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1306667.encapsulatedTokenLexer(Token)": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()": "Use final.", "org.apache.commons.csv.CSVParserTest.testExcelStrategyTest2()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getName(int)": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.LexerTest.testEscapingAtEOF()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1410759 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.parseSkifeCSV(Blackhole)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()": "Change CSVFormat#Iterable<CSVRecord> parse(final Reader in) to return a CSVParser, which is compatible since CSVParser implements Iterable<CSVRecord>. This allows a caller to end the parsing by calling CSVParser#close() or to use CSVParser in a Java 7 try-with-resources, without tracking a reader or input stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508509 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.format(Object[])": "Add APIs to print arrays of records and iterables of records.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398019 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.AssertionsTest.testNotNullNull()": "Make methods that create parsers or printers fail early and provide an expressive error messages. Document new behavior in JavaDoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1518802 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParse7()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()": "Address compiler warnings.", "org.apache.commons.csv.CSVPrinter.print(String,boolean)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.getEBR(String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigTest.testFieldHeader()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)": "Add org.apache.commons.csv.CSVParser.CSVParser(Reader, CSVFormat, long, long) and remove new setters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1635129 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.putIn(Map)": "[CSV-105] Add Map conversion API to CSVRecord.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559905 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testDuplicateHeaderEntries()": "CSV-112: HeaderMap is inconsistent when it is parsed from an input with duplicate columns names. Reported by Romain Goss\u00e9\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1592371 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.FercGovTest.testContractFile()": "- Add some real world CSV files. \n- Add a record API to get column values using an Enum.\n- Throw a better exception when a resource is not found in a class loader for the parser.\n- Replace some tabs with spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509068 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()": "Better exception handling.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1638111 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setIgnoreValueDelimiter(boolean)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)": "[CSV-234] Add support for java.sql.Clob.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParse7()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.getAllValues()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()": "[CSV-106] CSVFormat.format always append null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1577011 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrinter5()": "Static imports in the unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301084 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.setCommentStart(char)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.close()": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getFormat()": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)": "Sort methods in alphabetic order\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742506 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()": "[CSV-149] Add disabled test.\n", "org.apache.commons.csv.CSVFormat.getDelimiter()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVFormatBuilderTest.setUp()": "Explicit boxing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1411923 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()": "Improve lexer and token coverage (#67)\n\n* Improve Lexer and Token coverage\r\n\r\n* fix the imports", "org.apache.commons.csv.writer.CSVWriterTest.testWriterIgnoringDelimiter()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.doOneRandom()": "Varargs for CSVPrinter.println()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297136 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withCommentStart(Character)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.println(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer3.classify(int)": "Add experimental state-driven lexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306519 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.setStrategy(char,char,char,boolean,boolean,boolean)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.Token()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.randStr()": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setEncapsulator(char)": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash()": "[CSV-168] CsvFormat.nullString should not be escaped. [CSV-170]\nCSVFormat.MYSQL nullString should be \"\\N\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1725407 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.setUpTable(Statement)": "[CSV-139] CSVPrinter.printRecord(ResultSet) with metadata.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1638101 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.mapNullToDisabled(Character)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVUtilsTest.testParseLine5()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printDelimiter()": "Standardise on record rather than line; fix incorrect Javadoc comments\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1468827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.UnicodeUnescapeReader.UnicodeUnescapeReader(Reader)": "Replaced the unicode escaping code from the parser with a class implementing java.io.Reader\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298001 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getEscape()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testExcelFormat2()": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1578187 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.getLineNumber()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setCSVStrategy()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parseURL(URL,Charset,CSVFormat)": "Don't split ternary expression over two lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509261 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchersTest.testIsReady()": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testWithQuoteLFThrowsException()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.UnicodeUnescapeReader.read(char,int,int)": "Rename local variables to make them easier to read\nl (ell) looks rather like 1 (one)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300540 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testExcelStrategyTest()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVFormat)": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()": "Prefix everything that is a pure getter with \"get\" as proposed by Gary Gregory\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612341 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.getDelimiter()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.getCommentStart()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getRecordNumber()": "Refactor to only have minimal CSVParser constructors in favor of CSVParser factory methods for String, resource path, URL, and File. Update some tests to use the APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508544 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.readEscape(int)": "CSV-70 Improve readability of CSVLexer\nRemove unnecessary parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306062 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.getPrinterNewline()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()": "improve CSVFormat test coverage (#63)\n\n* improve CSVFormat test coverage\r\n\r\n* remove print in test", "org.apache.commons.csv.CSVFormat.withLineSeparator(char)": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398009 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getCommentMarker()": "Restore commentMarker property which was overridden during refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612390 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrinter7()": "Test cases for the scenarios described in SANDBOX-161:\n* Double quotes (\") should be escaped using two double quotes (\"\"), rather than a backslash (\\\").\n* Embedded line breaks are allowed and don't need to be escaped... just enclose the field in double quotes.\n* Because backslashes are not used to escape double quotes or line breaks, the backslashes themselves do not need to be escaped.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065519 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.println(Appendable)": "[CSV-234] Add support for java.sql.Clob.", "org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()": "Sort members.", "org.apache.commons.csv.writer.CSVConfigGuesser.CSVConfigGuesser(InputStream)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.putIn(M)": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)": "Make it easy to provide an alternative lexer if required\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1303620 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVStrategy.getUnicodeEscapeInterpretation()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable,boolean)": "[CSV-234] Add support for java.sql.Clob.", "ch.netcetera.wake.core.format.csv.CSVParser.setIgnoreEmptyLines(boolean)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testLF()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.isEndOfFile(int)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapeFF()": "Split up escape testing into separate methods, add escaping tests that should work after CSV-58 is resolved (currently ignored)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460364 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testNextToken3BadEscaping()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token,int)": "CSV-70 Improve readability of CSVLexer\nRemove unnecessary parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306062 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withIgnoreEmptyHeaders(boolean)": "[CSV-121] Exception that the header contains duplicate names when the column names are empty. Added the setting ignoreEmptyHeaders, defaults to false to keep the IAE as the default behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1602206 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter2()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()": "Prepare for 1.8-RC2.\n\n- Remove package private code with Java 8 equivalent\njava.util.Objects.requirteNonNull().\n- Checkstyle fixes.\n- Use final.\n- Remove unused import.\n", "org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()": "[CSV-211] CSVFormat.format trims last delimiter if the delimiter is a white space (#71)\n\n* [CSV-211] fix CSVFormat.format trims last delimiter if the delimiter is a white space\r\n\r\n* [CSV-211] Add JiraCsv211Test", "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testExcelStrategyTest2()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.close()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithHeaders()": "[CSV-139] CSVPrinter.printRecord(ResultSet) with metadata.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1638101 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setNextRecordNumber(long)": "Add org.apache.commons.csv.CSVParser.CSVParser(Reader, CSVFormat, long, long) and remove new setters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1635129 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()": "[CSV-97] Allow the String value for null to be customized for the CSV printer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465768 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withCommentMarker(char)": "Rename withCommentStart to withCommentMarker to avoid confusion because there is no corresponding withCommentStop method\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1610494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.get(int)": "Move resources to component specific folder.\n", "ch.netcetera.wake.core.format.csv.CSVParser.unicodeEscapeLexer(int)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinterTest.testExcelPrinter2()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setRowDelimiter(String)": "Apply configurable row delimiter by Dmitry Drozdov (SANDBOX-329).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1003046 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategyTest.CSVStrategyTest(String)": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.addRecordValue(boolean)": "Better ivar name.", "org.apache.commons.csv.CSVLexerTest.testNextToken2()": "CSV-85 Allow comments to be returned in CSVRecord\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306947 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "ch.netcetera.wake.core.format.csv.CSVParser.getLine()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testComments()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testIterator()": "Update to JUnit 4.10 from 3.8.1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300977 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testCommentStart()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidth(String)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchers.matches(Token,String)": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFileParserTest.CSVFileParserTest(File)": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()": "[CSV-239] Add CSVRecord.getHeaderNames and allow duplicate headers (#41)\n\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* getHeaderNames returns all headers in column order including repeats which are allowed as per RFC 4180\r\n* add CSVFormat.withAllowDuplicateHeaderNames()\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* only wrap headerNames with unmodifiableList if non-empty\r\n* fix and enhance CSVRecord.toMap javadoc\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix exception messages\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix whitespace\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* simplify if statement\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix indentation\r\n* add javadoc to Headers class\r\n* rename method to createHeaders\r\n* use String.format to build error message\r\n* initialize header names List with appropriate size\r\n", "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlCsv()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParse1()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()": "Renamed CSVParser.getAllValues() to getRecords()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199997 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isCommentStart(int)": "Use ch instead of c as a character var name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508937 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559908 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testGetHeader()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParse6()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.append(String)": "Applying checkstyle changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631133 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorIllegal()": "Make sure only record separators we can handle are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1609548 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testReadEscapeFF()": "Improve lexer and token coverage (#67)\n\n* Improve Lexer and Token coverage\r\n\r\n* fix the imports", "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()": "[CSV-168] CsvFormat.nullString should not be escaped. [CSV-170]\nCSVFormat.MYSQL nullString should be \"\\N\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1725407 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.IOUtils.copy(Reader,Appendable,CharBuffer)": "[CSV-234] Add support for java.sql.Clob.", "org.apache.commons.csv.writer.CSVFieldTest.testCSVField()": "Testcases for CSVWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373943 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()": "Use final.", "org.apache.commons.csv.ExtendedBufferedReader.readLine()": "CSV-98  Line number counting is confusing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1479936 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.baseline(Blackhole)": "Added a JMH benchmark to compare the most commons CSV parsers\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1658276 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.TestCSVParser.TestCSVParser(Reader)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicy()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv213Test.test()": "[CSV-213] CSVParser#iterator()#hasNext() fails.", "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parseLine(String)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIntTest.testGetIntegerByString()": "Add CSVRecord#getInt(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509450 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.close()": "Sort methods in AB order.\n", "org.apache.commons.csv.CSVLexerTest.testLF()": "Use NotEscaped where character has not been escaped\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509966 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testDelimiterIsWhitespace()": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.CSVConfig()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.CSVParser(Reader,char)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.println()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testQuoteChar()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.isSet(String)": "Add CVSRecord.isSet(String) API.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397136 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVFormat)": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()": "Avoid resource leak warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1582813 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.toStringBuffer()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParse6()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()": "Add @Test testRemoveAndAddColumns.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1560389 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVRecord.values()": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withHeader(Class)": "CSV-180: Add withHeader(Class<? extends Enum>) to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742169 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()": "Use generics diamonds.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748079 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordLongTest.testGetLongByString()": "Add CSVRecord#getLong(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getTrim()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()": "Sort members.", "org.apache.commons.csv.CSVFormat.withEncapsulator(Character)": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398010 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testPutInMap()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559908 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withEscape(Character)": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testSkipUntil()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)": "Add org.apache.commons.csv.CSVParser.CSVParser(Reader, CSVFormat, long, long) and remove new setters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1635129 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testNextToken2EmptyLines()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()": "Improve test coverage in CSVFormatTest (#65)\n\n* Improve Format Coverage to 99percent\r\n\r\n* code format add space", "org.apache.commons.csv.CSVFileParserTest.testCSVFile()": "Checkstyle: trailing spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1485799 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEquals()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508613 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.TokenMatchers.matchesSafely(Token,Description)": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testNotFlushable()": "Improve record and printer Coverage (#66)\n\n* Improve CSVRecord and CSVPrinter coverage\r\n\r\n* remove useless test code and test throws\r\n\r\n* add space", "org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()": "improve CSVFormat test coverage (#63)\n\n* improve CSVFormat test coverage\r\n\r\n* remove print in test", "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinter.println(String[])": "Change the type of printer API to accept Object instead of String.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398005 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRandomMySql()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()": "Move resources to component specific folder.\n", "ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader,char,char,char)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()": "Remove unnecessary array creation for varargs.\n", "org.apache.commons.csv.CSVParser.getIgnoreEmptyLines()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", ".AllTests.suite()": "added test suites\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430326 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Token.Token()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testNewFormat()": "Use final.", "org.apache.commons.csv.CSVParser.parseFile(File,CSVFormat)": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508635 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseNullPathFormat()": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(String)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withEncapsulator(char)": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398010 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigTest.testValueDelimiter()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.CSVRecord(String,Map)": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()": "Address compiler warnings.", "org.apache.commons.csv.CSVRecord.iterator()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinterTest.testRandomTdf()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormat.toBuilder()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withEscape(char)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.print(CharSequence,int,int)": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398017 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.nextValue()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setNextCharacterPosition(long)": "[CSV-131] Save positions of records to enable random access. The floor is open for code review and further discussion based on the comments in the Jira.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1635052 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesserTest.testConfigGuess2()": "Testcases for CSVWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373943 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withLineSeparator(String)": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.isFieldHeader()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetNullEnum()": "Let a null input to CSVRecord#get(Enum) fail in CSVRecord#get(String).\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readLine()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.getDelimiter()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()": "Sort methods in AB order.\n", "org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)": "Sort methods.", "org.apache.commons.csv.CSVLexerTest.testNextToken1()": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testLineTokenConsistency()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()": "Sort methods.", "org.apache.commons.csv.writer.CSVWriter.writeValue(CSVField,String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()": "[CSV-171] Negative numeric values in the first column are always quoted\nin minimal mode.", "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()": "Sort method.", "org.apache.commons.csv.CSVParserTest.testParseLine3()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testEscapedTab()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.readEndOfLine(int)": "Sort methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460348 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testCSVConfig()": "Testcases for CSVWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373943 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508613 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParser.getIgnoreLeadingWhitespaces()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()": "Sort members.", "org.apache.commons.csv.CSVFormat.withEmptyLinesIgnored(boolean)": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscaping()": "Split up escape testing into separate methods, add escaping tests that should work after CSV-58 is resolved (currently ignored)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460364 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.encapsulatedTokenLexer(Token,int)": "Updated the Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297043 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)": "Rename ivar headerMapping -> headerMap.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383920 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withNullToString(String)": "[CSV-97] Allow the String value for null to be customized for the CSV printer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465768 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.guessFixedWidthSeperator(String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.parseLine(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739671 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testSimpleAppend()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParse1()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.getFill()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testIsSetString()": "[CSV-248] CSVRecord is not Serializable.\n\nSort members.\n", "org.apache.commons.csv.CSVRecordBooleanTest.createTestRecord()": "CSVRecord.get(String) throws IAE if the column is not mapped (does not exist). This is similar to what JDBC does in ResultSet. Add getBoolean(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509431 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.setCommentStart(char)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.print(String)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.parseJavaCSV(Blackhole)": "Added a JMH benchmark to compare the most commons CSV parsers\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1658276 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739687 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine7()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.close(boolean)": "Call flush instead of duplicating the logic\n", "org.apache.commons.csv.CharBufferTest.testAppendString()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVFieldTest.testFill()": "Testcases for CSVWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373943 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testHeader()": "<action issue=\"CSV-120\" type=\"add\" dev=\"ggregory\" due-to=\"Sergei Lebedev\">CSVFormat#withHeader doesn't work with CSVPrinter</action>\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1601517 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()": "Sort members.", "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)": "Fix PMDs: Unnecessary use of fully qualified name 'Constants.END_OF_STREAM' due to existing static import 'org.apache.commons.csv.Constants.END_OF_STREAM'.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1721770 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.getFirstEol()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVLexer1.simpleTokenLexer(Token,int)": "CSV-70 Improve readability of CSVLexer\nRemove unnecessary parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306062 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParse3()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapedCharacter()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parse(String,Charset,ClassLoader,CSVFormat)": "Remove factory methods for creating CSVParsers for classpath resources\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1513994 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()": "Add org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser(). See discussion in [CSV-110].\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1585491 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1306667.simpleTokenLexer(Token,int)": "Another baseline\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1307043 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)": "[CSV-189] CSVParser: Add factory method accepting InputStream.", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLookahead1()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParse3()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine1()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695178 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)": "CSV-135 - Char escape doesn't work\n\nEnsure escape chars are escaped when using quote mode", "org.apache.commons.csv.CSVRecord.get(String)": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,String,String)": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isNullHandling()": "Add method to check if null handling has been defined\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1522878 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormat.equals(Object)": "Fix { } formatting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460251 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.mapNullToDisabled(Character)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVParserTest.testNextToken3()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.setIgnoreLeadingWhitespaces(boolean)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.getUnicodeEscapeInterpretation()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.isUnicodeEscapesInterpreted()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormat.withQuotePolicy(Quote)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.toString()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean)": "Removed the volatile modifier on the fields in CSVFormat to improve the performances\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1299479 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()": "CSV-252: Clean up exception handling (#50)\n\n* CSV-252: Clean up assertions using assertThrows\r\n\r\nAs a followup to commit e2f0a4d8a83a41eaa984086636a3712c682307ea that\r\nintroduced JUnit Jupiter to the project, this patch leverages the new\r\nAssertions#assertThrows method to clean up tests for expected\r\nexceptions.\r\n\r\nInstead of the somewhat clunky structure common in JUnit 4 tests:\r\n\r\n```\r\ntry {\r\n    someMethod();\r\n    fail(\"SomeException should be thrown\");\r\n} catch (SomeException e) {\r\n    // Expected...\r\n\r\n    // Possibly some assertion on e\r\n}\r\n```\r\n\r\nJUnit Jupiter allows the following elegant syntax:\r\n\r\n```\r\nSomeException e = assertThrows(SomeException.class, () -> someMethod());\r\n// Possibly some assertions on e\r\n```\r\n\r\n* CSV-252: Remove redundant throws clauses from tests\r\n", "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()": "Change CSVFormat#Iterable<CSVRecord> parse(final Reader in) to return a CSVParser, which is compatible since CSVParser implements Iterable<CSVRecord>. This allows a caller to end the parsing by calling CSVParser#close() or to use CSVParser in a Java 7 try-with-resources, without tracking a reader or input stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508509 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.withDelimiter(char)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParse1()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setFields(CSVField)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer130663.nextToken(Token)": "Save current lexer for comparisons\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306664 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()": "[CSV-129] Add CSVFormat#with 0-arg methods matching boolean arg methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1621004 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testHeaderMissing()": "CSV-247: CSVParser to check an empty header before checking duplicates. (#47)\n\nThis updates the issues test for CSV-247 and adds tests to the\r\nCSVParserTest.", "org.apache.commons.csv.PerformanceTest.main(String)": "Use locally stored big file as per perf/PerformanceTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397851 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCvs249.testJiraCsv249()": "[CSV-249] ArrayIndexOutOfBoundsException when trying to read record\nwritten by CSVPrinter using CSVParser with same format.\n\nAdd passing test.", "org.apache.commons.csv.CSVUtilsTest.testParseLine7()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()": "[CSV-241] CSVFormat#valiadte() does not account for\nllowDuplicateHeaderNames.\n\nApplying a different version of the GitHub patch with adjustments to the\ntests. Also remove trailing whitespace from CSVRecord.\n\nCloses #43.\n", "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)": "[CSV-239] Add CSVRecord.getHeaderNames and allow duplicate headers (#41)\n\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* getHeaderNames returns all headers in column order including repeats which are allowed as per RFC 4180\r\n* add CSVFormat.withAllowDuplicateHeaderNames()\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* only wrap headerNames with unmodifiableList if non-empty\r\n* fix and enhance CSVRecord.toMap javadoc\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix exception messages\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix whitespace\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* simplify if statement\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix indentation\r\n* add javadoc to Headers class\r\n* rename method to createHeaders\r\n* use String.format to build error message\r\n* initialize header names List with appropriate size\r\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testIgnoreEmptyLines()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesserTest.testConfigGuess1()": "Testcases for CSVWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373943 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine5()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriterDefaults()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.setEncapsulator(char)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setStrategy(CSVStrategy)": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVParserTest.testLineTokenConsistency()": "Removed CSVParser.nextValue() (SANDBOX-220)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199780 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withCommentStart(Character)": "Rename \"line separator\" to \"record separator\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withHeader(String[])": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseLine2()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer130663.simpleTokenLexer(Token,int)": "Save current lexer for comparisons\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306664 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isUnicodeEscapesInterpreted()": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695178 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testNextToken1()": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.setUnicodeEscapeInterpretation(boolean)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.isEndOfLine(int)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Utils.compare(String,String,String)": "Remove unused method. It made no sense anyway, since Assert.assertArrayEquals is capable of comparing multi dimensional arrays.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1512617 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getParser()": "Move resources to component specific folder.\n", "org.apache.commons.csv.LexerTest.testReadEscapeBackspace()": "Improve lexer and token coverage (#67)\n\n* Improve Lexer and Token coverage\r\n\r\n* fix the imports", "org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterNullAppendableFormat()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.suite()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigTest.testFields()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter1()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testSkipUntil()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isEscape(int)": "Remove DISABLED character hack.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397783 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695178 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getDelimiter()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken5()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()": "Rename typo in issues file names from cvs to csv.", "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398135 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.flush()": "Sort 1 method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695166 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()": "Sort members.", "org.apache.commons.csv.CSVParserTest.testMongoDbCsv()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVFormat.isEscaping()": "Remove DISABLED character hack.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397783 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)": "[CSV-234] Add support for java.sql.Clob.", "org.apache.commons.csv.PerformanceTest.getReader()": "Use locally stored big file as per perf/PerformanceTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397851 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.UnicodeUnescapeReader.close()": "Replaced the unicode escaping code from the parser with a class implementing java.io.Reader\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298001 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testHeaderReferenceCannotEscape()": "Where possible:\n- Add final modifier to private fields\n- Add final modifier to method parameters\n- Add final modifier to local variables\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1429926 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendCharArray()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testValidation()": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398010 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.isFixedWidth()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testNextToken6()": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testDelimiterIsWhitespace()": "Turned the token types into an Enum\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199872 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer130663.CSVLexer130663(CSVFormat,ExtendedBufferedReader)": "Save current lexer for comparisons\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306664 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.length()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()": "Fix compiler warning.", "org.apache.commons.csv.CSVStrategy.withLineSeparator(String)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.getFillChar()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getStrategy()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testSurroundingTabsAreDeleted()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetSetEncapsulator()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategyTest.testImmutalibity()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.FormatTests.suite()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.UnicodeUnescapeReader.isUnicodeSequence(char)": "Improved test coverage\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300516 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.getLexer(String,CSVFormat)": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitDelimiter()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getQuoteChar()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecords()": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1578187 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testEscapedFF()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatIsEqualToOriginal()": "Where possible:\n- Add final modifier to private fields\n- Add final modifier to method parameters\n- Add final modifier to local variables\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1429926 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter3()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testExcelStrategy1()": "change excel strategy to use ',' as the separator: SANDBOX-182\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@489553 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.setCSVStrategy()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.setPrinterNewline(String)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendChar()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testExcelStrategyTest()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String)": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398009 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean,boolean)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVLexer1306663.encapsulatedTokenLexer(Token)": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,int,int,Appendable,boolean)": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.nextRecord()": "- Add some real world CSV files. \n- Add a record API to get column values using an Enum.\n- Throw a better exception when a resource is not found in a class loader for the parser.\n- Replace some tabs with spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509068 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.remove()": "Move resources to component specific folder.\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadUntil()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParse2()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFileParserTest.accept(File,String)": "More lambdas, less boilerplate.\n", "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVRecordTest.testIsSetInt()": "Add CSVRecord.isSet(int) method (#52)\n\n* Add CSVRecord.isSet(int) method\r\n\r\n* Remove unnecessary unboxing\r\n\r\n* Revert: Remove unnecessary unboxing\r\n", "org.apache.commons.csv.CSVStrategy.getEscape()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testHeaderComment()": "Rename methods that create a builder newBuilder().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409455 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.read()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()": "Update to JUnit 4.10 from 3.8.1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300977 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParserTest.testCSV235()": "CSV235 - WRONG Implementation for RFC4180\n\nShow that implementation is actually correct", "org.apache.commons.csv.writer.CSVConfig.isValueDelimiterIgnored()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParse2()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setFieldHeader(boolean)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.isWhitespace(int)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriter()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategyTest.testSetCSVStrategy()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetWithEnum()": "Add testcases for CSVRecord with get(Enum) and toString. (#54)\n\n", "org.apache.commons.csv.CSVStrategyTest.testSetExcelStrategy()": "SANDBOX-206: add escape to strategy, turn off backslash-style escaping by default\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@609155 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testConstructors()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)": "Allow performance test to traverse column values (optional).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397559 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.skip(long)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isMetaChar(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)": "Change back to DEFAULT format name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1461192 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.CSVParser(Reader,char,char,char)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isEncapsulating()": "Calculate the booleans once; prepares for CSV-78\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305700 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testCR()": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.bugs.JiraCsv198Test.test()": "Fix compiler warnings.", "org.apache.commons.csv.Assertions.notNull(T,String)": "Make methods that create parsers or printers fail early and provide an expressive error messages. Document new behavior in JavaDoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1518802 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withHeaderComments()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)": "Remove unnecessary array creation for varargs.\n", "org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()": "Sort members.", "org.apache.commons.csv.writer.CSVField.setSize(int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetSetCommentStart()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.copy(CSVFormat)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.newBuilder(CSVFormat)": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1410045 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testBackslashWithoutEscaping()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.getLineSeparator()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.getField(String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()": "Use final.", "org.apache.commons.csv.CSVParser.setDelimiter(char)": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printAndEncapsulate(char,int,int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextValue()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.getPosition()": "Sort methods in AB order.\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine4()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsOne()": "Sort methods.", "org.apache.commons.csv.CSVParser.parse(InputStream,String,CSVFormat)": "[CSV-189] CSVParser: Add factory method accepting InputStream.", "org.apache.commons.csv.AssertionsTest.testNotNull()": "Make methods that create parsers or printers fail early and provide an expressive error messages. Document new behavior in JavaDoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1518802 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isEndOfLine(int)": "Remove extra parens.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397071 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testEscapedCharacter()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.assertEqualFormats(CSVFormat,CSVFormat)": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1410045 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseLine5()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFileParserTest.testCSVResource()": "Refactor to only have minimal CSVParser constructors in favor of CSVParser factory methods for String, resource path, URL, and File. Update some tests to use the APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508544 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testNextToken6()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVLexer.parseEncapsulatedToken(Token)": "CSV-98  Line number counting is confusing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1479936 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv167Test.getTestInput()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVParserTest.testNoHeaderMap()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()": "Fix compilation issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383504 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(CSVFormat)": "Revert back to NOT skipping a record when withHeader is called with a non-empty array. Add skipHeaderRecord setting to CSVFormat and use when headers are initialized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508933 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()": "[CSV-208] Fix escape character for POSTGRESQL_TEXT and POSTGRESQL_CSV\nformats.", "org.apache.commons.csv.CSVFormatBuilder.build()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.iterate(Iterable)": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printAndQuote(CharSequence,int,int)": "Implement Quote.ALL. Bullet-proof a unit test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398133 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.toString()": "Add testcases for CSVRecord with get(Enum) and toString. (#54)\n\n", "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()": "[CSV-168] CsvFormat.nullString should not be escaped. [CSV-170]\nCSVFormat.MYSQL nullString should be \"\\N\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1725407 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isClosed()": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetAllValues()": "Renamed CSVParser.getAllValues() to getRecords()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199997 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.skipUntil(char)": "Applied patch contributed by Henri Yandell in SANDBOX-219: \"ExtendedBufferedReader does too much\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065948 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.readEscape(int)": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)": "Breaking lines that are > 120\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631131 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken6()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.clone()": "Removed the volatile modifier on the fields in CSVFormat to improve the performances\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1299479 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.analyseLines(String)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVParserTest.testNextToken()": "Removing System outs - SANDBOX-217\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631129 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getIndex(String)": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.CSVRecord.getInt(String)": "Remove primitive APIs in CSVRecord.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1510455 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormatTest.testSerialization()": "Use is prefix for getters that return booleans\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1610490 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.parse(Reader)": "Better performance tests. Provide a test CSV file to work with. Tests depends on Commons IO to help decompress the large-ish CSV test file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397119 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtils.parse(String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendCharBuffer()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()": "CSV-247: CSVParser to check an empty header before checking duplicates. (#47)\n\nThis updates the issues test for CSV-247 and adds tests to the\r\nCSVParserTest.", "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()": "When withHeader is set to any non-null value, the first record is the first <em>data</em> record, not the header record.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508612 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testMarkSupported()": "Applied patch contributed by Henri Yandell in SANDBOX-219: \"ExtendedBufferedReader does too much\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065948 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.EnumHeader(String)": "Add testcases for CSVRecord with get(Enum) and toString. (#54)\n\n", "org.apache.commons.csv.TokenMatchersTest.testHasContent()": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getHeaderMap()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()": "Change CSVFormat#Iterable<CSVRecord> parse(final Reader in) to return a CSVParser, which is compatible since CSVParser implements Iterable<CSVRecord>. This allows a caller to end the parsing by calling CSVParser#close() or to use CSVParser in a Java 7 try-with-resources, without tracking a reader or input stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508509 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordLongTest.createTestRecord()": "Add CSVRecord#getLong(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testSkip0()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinterTest.testPrinter2()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getCurrentLineNumber()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVLexer1.nextToken(Token)": "Rename readAgain() to getLastChar()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getFormat()": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695178 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVFormat)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\nRename CSVRecord.getCSVParser() -> getParser().", "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()": "Add APIs to print arrays of records and iterables of records.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398019 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,String,String)": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.provideCapacity(int)": "allocate extra space when expanding CharBuffer: SANDBOX-189\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@522920 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getNextRecord()": "Refactor to only have minimal CSVParser constructors in favor of CSVParser factory methods for String, resource path, URL, and File. Update some tests to use the APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508544 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()": "[CSV-139] CSVPrinter.printRecord(ResultSet) with metadata.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1638101 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean,boolean)": "Use final.", "org.apache.commons.csv.perf.PerformanceTest.readAll(BufferedReader)": "Fix compilation issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383504 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testParser(String,CSVParserFactory)": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean,String)": "Removed the volatile modifier on the fields in CSVFormat to improve the performances\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1299479 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Token.reset()": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isLeadingSpacesIgnored()": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getEncapsulator()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCSV259()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)": "[CSV-130] CSVFormat#withHeader doesn't work well with #printComment, add withHeaderComments(String...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1623984 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitRowDelimiterCRLF()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiiLineValues()": "Rename getRecord() to nextRecord()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397900 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFileParserTest.readTestData()": "Add CSV file parser test case runner\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305919 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testHeadersMissingException()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739687 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withSurroundingSpacesIgnored(boolean)": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739672 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()": "Use final.", "org.apache.commons.csv.CSVStrategy.clone()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.Token()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printLine(String)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.CSVParserTest(String)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()": "[CSV-220] Add API\norg.apache.commons.csv.CSVFormat.withSystemRecordSeparator().", "org.apache.commons.csv.CSVParserTest.testParse7()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.next()": "Better throw a NoSuchElementException if no more elements are available because parser has been closed\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509395 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(Writer,char)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVField.getSize()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testEscapedCR()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.print(Object,boolean)": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a 'not implemented yet' exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398137 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testDefaultQuotePolicy()": "Test default Quote policy\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1480498 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()": "[CSV-220] Add API\norg.apache.commons.csv.CSVFormat.withSystemRecordSeparator().", "org.apache.commons.csv.CSVPrinterTest.testPrint()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendCharArrayBuffer()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430324 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()": "Improve test coverage in CSVFormatTest (#65)\n\n* Improve Format Coverage to 99percent\r\n\r\n* code format add space", "org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.IOUtils.copy(Reader,Appendable)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CharBuffer.CharBuffer(int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testRecoardSeparator()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.append(char)": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430324 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()": "When withHeader is set to any non-null value, the first record is the first <em>data</em> record, not the header record.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508612 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setFixedWidth(boolean)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()": "Use is prefix for getters that return booleans\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1610490 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVStrategy.setEncapsulator(char)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()": "Improve test coverage in CSVFormatTest (#65)\n\n* Improve Format Coverage to 99percent\r\n\r\n* code format add space", "org.apache.commons.csv.CSVRecord.getLong(String)": "Remove primitive APIs in CSVRecord.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1510455 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.isConsistent()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVFormatTest.testWithNullString()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testEscape()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()": "Make sure only record separators we can handle are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1609548 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEOLPlain()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPostgreSQLNullStringDefaultCsv()": "[CSV-207]\n\n Provide a CSV Format for printing PostgreSQL CSV and Text formats.", "org.apache.commons.csv.CSVFormat.withTrailingDelimiter()": "Sort methods in alphabetic order\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742506 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readAgain()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1.encapsulatedTokenLexer(Token,int)": "CSV-70 Improve readability of CSVLexer\nRemove unnecessary parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306062 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testDefaultFormat()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748096 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIntTest.testGetIntegerByMissingString()": "Add CSVRecord#getInt(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509450 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()": "[CSV-209] Create CSVFormat.ORACLE preset. Also: Fix and complete\ndocumentation for other formats.", "org.apache.commons.csv.CSVPrinter.getStrategy()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapedControlCharacter()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withQuotePolicy(Quote)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testDuplicateHeaders()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739687 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile()": "Fix compilation issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383504 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVField.CSVField(String)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)": "Revert back to NOT skipping a record when withHeader is called with a non-empty array. Add skipHeaderRecord setting to CSVFormat and use when headers are initialized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508933 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIterator.next()": "[CSV-224] Some Multi Iterator Parsing Peek Sequences Incorrectly Consume\nElements.", "org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508613 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.setIgnoreEmptyLines(boolean)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.createParser()": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()": "Avoid resource leak warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1582813 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()": "[CSV-214] Adding a placeholder in the Lexer and CSV parser to store the\nend-of-line string. I applied the patch in spirit and made changes:\nthere is no need to use a boolean to track the state of the EOL String\n(set vs. not set). I also allowed for CR to be saved as an EOL string\nsince we allow that already.", "ch.netcetera.wake.core.format.csv.CSVPrinter.printlnComment(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(char)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testSetCSVStrategy()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.capacity()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.guessFieldSeperator(String)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739687 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.setDelimiter(char)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.parseSuperCSV(Blackhole)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testEscapedBackspace()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetSetDelimiter()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigTest.testDelimiter()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()": "Update to JUnit 4.10 from 3.8.1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300977 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategyTest.testGetSetEncapsulator()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()": "Use try-with-resources.", "org.apache.commons.csv.CSVFormat.getCommentStart()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char)": "Removed the deprecated constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199772 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testIgnoreEmptyLines()": "Separate testing empty line handling from comment recognition\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465722 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByMissingString()": "Simplify tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509446 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken1()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isEscape(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()": "Move resources to component specific folder.\n", "org.apache.commons.csv.writer.CSVConfig.guessConfig(InputStream)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testCopiedFormatWithChanges()": "Where possible:\n- Add final modifier to private fields\n- Add final modifier to method parameters\n- Add final modifier to local variables\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1429926 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadUntil()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.TestCSVParser.testNextToken()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIterator.hasNext()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormat.print(Appendable)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVRecord.toList()": "Internal refactoring. If we have a toMap, a toList makes sense (which is already needed internally).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1560003 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(CSVFormat)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.setStrategy(CSVStrategy)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testSurroundingSpacesAreDeleted()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)": "Sort static methods.", "org.apache.commons.csv.CSVPrinterTest.geH2Connection()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getCharacterPosition()": "[CSV-131] Save positions of records to enable random access. The floor is open for code review and further discussion based on the comments in the Jira.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1635052 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isTrailingSpacesIgnored()": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()": "Use final.", "org.apache.commons.csv.CSVPrinter.printlnComment(String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)": "Revert back to NOT skipping a record when withHeader is called with a non-empty array. Add skipHeaderRecord setting to CSVFormat and use when headers are initialized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508933 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.escapeAndQuote(String)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getRecords()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.read(char,int,int)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withQuote(char)": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)": "Removed an unused constructor in ExtendedBufferedReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199761 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchers.isReady()": "Add missing '@Override' annotations\nAdd missing '@Override' annotations to implementations of interface methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1635504 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.Predefined(CSVFormat)": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695178 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.trim(CharSequence)": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.nextToken(Token)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean)": "SANDBOX-206: add escape to strategy, turn off backslash-style escaping by default\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@609155 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVParser.parse(String)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printRecords(Object)": "Use the final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409464 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.CSVLexer(CSVFormat,ExtendedBufferedReader)": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()": "[CSV-129] Add CSVFormat#with 0-arg methods matching boolean arg methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1621004 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setValueDelimiter(char)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()": "Use final.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testGetAllValues()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setFill(int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.getIgnoreTrailingWhitespaces()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParser.setStrategy(char,char,char,boolean,boolean,boolean)": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(Character,Character,Character,Character,boolean,boolean,String,String)": "[CSV-88] Not possible to create a CSVFormat from scratch. Should the validate method be public?\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397877 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testProvideCapacity()": "Removed unused methods from CharBuffer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300491 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setExcelStrategy()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()": "Sort methods.", "org.apache.commons.csv.CSVStrategy.withUnicodeEscapesInterpreted(boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String)": "CSV-85 Allow comments to be returned in CSVRecord\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306947 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()": "[CSV-96] CSVRecord does not verify that the length of the header mapping matches the number of values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1462110 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isEndOfFile(int)": "Refactor constants from various classes into a package private Constants class and use static imports.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397541 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.isSet(int)": "Sort methods in AB order.\n", "org.apache.commons.csv.Lexer.readEscape()": "Refactor constants from various classes into a package private Constants class and use static imports.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397541 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)": "[CSV-234] Add support for java.sql.Clob.", "org.apache.commons.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getRecord()": "Rename ivar headerMapping -> headerMap.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383920 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testNextToken5()": "Change back to DEFAULT format name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1461192 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.isMapped(String)": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.CSVParser.CSVParser(String,CSVFormat)": "Refactor to only have minimal CSVParser constructors in favor of CSVParser factory methods for String, resource path, URL, and File. Update some tests to use the APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508544 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withEscape(char)": "Changed the return type of CSVFormat.clone()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1201060 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.print(Object)": "[CSV-93] Allow the handling of NULL values. Use a single property 'nullString' for both input and output processing. No substitutions occur if null. For reading, nullString is used to convert field values to null. For writing, nullString is used to output the given string instead of the empty string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getUnicodeEscapeInterpretation()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.ExtendedBufferedReaderTest(String)": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithCommentStart()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.encapsulatedTokenLexer(Token,int)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.getCommentStart()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739672 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapingAtEOF()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormatBuilder(CSVFormat)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withTrim(boolean)": "[CSV-217] Add autoFlush option for CsvPrinter. Applying modified patch\nThis closes #24.", "org.apache.commons.csv.CSVParser.initializeHeader(CSVFormat)": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategyTest.suite()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testUnicodeEscapeMySQL()": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIntTest.setUp()": "Add CSVRecord#getInt(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509450 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.nextToken()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testDelimiterSameAsCommentStartThrowsException()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setIgnoreDelimiter(boolean)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()": "Change JiraCsv164Test to JiraCsv154Test (#69)\n\n", "org.apache.commons.csv.CSVPrinter.trim(CharSequence)": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.newFormat(char)": "[CSV-130] CSVFormat#withHeader doesn't work well with #printComment, add withHeaderComments(String...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1623984 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriterWithoutHeader()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withDelimiter(char)": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1410759 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.getRowDelimiter()": "Apply configurable row delimiter by Dmitry Drozdov (SANDBOX-329).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1003046 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isWhitespace(int)": "Use isDelimiter method instead of != check. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1478655 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.isEndTrimmed()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinter.println(String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printAndQuote(Object,CharSequence,int,int)": "PMD: Remove useless parentheses\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742467 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testDelimiter()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testMarkSupported()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParseLine6()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.print(char,int,int)": "Changed CSVPrinter to print to any Appendable and optimized the internals to avoid string copies\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297309 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testMultipleIterators()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559908 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultText()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.getCommentStart()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.readEndOfLine(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testImmutalibity()": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398010 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testParsePath()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVUtils.printLine(String,CSVStrategy)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.parse(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setIgnoreEmptyLines(boolean)": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.setUpClass()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.getEncapsulator()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRandomDefault()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParser.setIgnoreLeadingWhitespaces(boolean)": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv198Test.test()": "Move resources to component specific folder.\n", "org.apache.commons.csv.writer.CSVConfig.getFields()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVField.CSVField(String,int)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)": "- Add final modifier to method parameters.\n- Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495203 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.read(Blackhole)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()": "Break up testEscapeBackslash() method into individual tests.", "org.apache.commons.csv.LexerTest.testReadEscapeTab()": "Improve lexer and token coverage (#67)\n\n* Improve Lexer and Token coverage\r\n\r\n* fix the imports", "org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.setSeparatorChar(char)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()": "[CSV-192] Add convenience API CSVParser.parse(Path, Charset, CSVFormat).\nAdjust API to be Charset-based instead of String (charset name), just\nlike it says in the Jira title.", "org.apache.commons.csv.UnicodeUnescapeReader.isHexadecimal(char)": "Replaced the unicode escaping code from the parser with a class implementing java.io.Reader\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298001 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,char)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.hasFieldHeader()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtils.printLine(CSVFormat,String[])": "Added a convenient format() method in CSVFormat replacing CSVUtils.printLine()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297091 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigTest.testTrimEnd()": "Testcases for CSVWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373943 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getQuoteMode()": "Consistently rename Quote/QuotePolicy to QuoteMode\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612344 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testBOM()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVStrategyTest.testGetSetDelimiter()": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)": "Remove copy method. It is not needed since every withXxx() method returns a copy\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508966 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseLine4()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testToString()": "Add testcases for CSVRecord with get(Enum) and toString. (#54)\n\n", "org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.newBuilder()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinterTest.printable(String)": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()": "When withHeader is set to any non-null value, the first record is the first <em>data</em> record, not the header record.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508612 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withIgnoreSurroundingSpaces(boolean)": "[CSV-97] Allow the String value for null to be customized for the CSV printer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465768 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean)": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1306663.simpleTokenLexer(Token,int)": "Rename ivar to ignoreSurroundingSpaces to match CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397784 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withDelimiter(char)": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char)": "Add ctor to create simplest possible CSV parser\nDoes not make sense to allow delim = EOL in ctor but disable it in withDelimiter()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398556 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.read()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormatBuilder.withEscape(Character)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.split(Blackhole)": "Added another baseline benchmark against StringUtils.split() from commons-lang\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1658392 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapeBackspace()": "Use hasContent matcher token type is not relevant (correct token type recognition is tested by other tests methods)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463210 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriter.getConfig()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigTest.testFill()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.suite()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testForEach()": "Add roundtrip test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398020 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtils.printLine(String,CSVFormat)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.hasComment()": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.bugs.JiraCsv167Test.getTestInput()": "Access test data using the classloader instead of defining a file handle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742426 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testTab()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getLine()": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.bugs.JiraCsv164Test.testJiraCsv154_withCommentMarker()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isAllowMissingColumnNames()": "Rename the IgnoreEmptyHeaders property to AllowMissingColumnNames\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612337 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()": "Improve test coverage in CSVFormatTest (#65)\n\n* Improve Format Coverage to 99percent\r\n\r\n* code format add space", "org.apache.commons.csv.CSVLexerTest.testNextToken4()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.createReader()": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.writer.CSVField.overrideFill()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()": "Address compiler warnings.", "org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByString()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509442 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()": "Sort methods.", "org.apache.commons.csv.CSVParser.isEndOfLine(int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testShrink()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430324 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv247Test.testJiraDescription()": "Rename typo in issues file names from cvs to csv.", "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVRecordTest.testDeserialisation()": "[CSV-248] Test the parser and map functionality after deserialization\n\nMethods with unexpected return values (null or exceptions) have been\ndocumented. All other methods will just fail as if the record came from\na parser without a header.\n", "org.apache.commons.csv.CSVLexerTest.testEscapedFF()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.onRow(String)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.markSupported()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Utils.compare(String,String,List)": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordLongTest.testGetLongByNullString()": "Add CSVRecord#getLong(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509449 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.print(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testCarriageReturnLineFeedEndings()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrinterQuoteAll()": "Implement Quote.ALL. Bullet-proof a unit test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398133 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)": "- Remove unused import.\n- Remove trailing white spaces on all lines.\n- Use final.\n- Use for-each (in test).\n- Use try-with-resources (in test).\n- Document empty blocks.", "org.apache.commons.csv.CharBuffer.charAt(int)": "Removed unused methods from CharBuffer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300491 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()": "[CSV-129] Add CSVFormat#with 0-arg methods matching boolean arg methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1621004 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testTrim()": "Improve test coverage in CSVFormatTest (#65)\n\n* Improve Format Coverage to 99percent\r\n\r\n* code format add space", "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739672 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.lookAhead()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapedBackspace()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordBooleanTest.setUp()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509442 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TestCSVParser.testNextToken()": "Removing System outs - SANDBOX-217\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631129 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()": "Sort members.", "org.apache.commons.csv.CSVParser.isClosed()": "Refactor to only have minimal CSVParser constructors in favor of CSVParser factory methods for String, resource path, URL, and File. Update some tests to use the APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508544 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withQuoteChar(char)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()": "[CSV-130] CSVFormat#withHeader doesn't work well with #printComment, add withHeaderComments(String...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1623984 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRandomOracle()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormat.getIgnoreEmptyHeaders()": "[CSV-121] Exception that the header contains duplicate names when the column names are empty. Added the setting ignoreEmptyHeaders, defaults to false to keep the IAE as the default behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1602206 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.simpleTokenLexer(Token,int)": "CSV-71 - Add convenience Methods to CSVLexer\nUse convenience methods from Lexer parent class\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1303904 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getNullToString()": "[CSV-93] Allow the handling of NULL values. Use a single property 'nullString' for both input and output processing. No substitutions occur if null. For reading, nullString is used to convert field values to null. For writing, nullString is used to output the given string instead of the empty string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testSerialization()": "[CSV-248] CSVRecord is not Serializable.\n\nMake field transient.\n", "org.apache.commons.csv.CharBuffer.trimTrailingWhitespace()": "Removed unused methods from CharBuffer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300491 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrinter3()": "Static imports in the unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301084 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.init()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)": "Sort methods.", "org.apache.commons.csv.CSVFormat.newBuilder(char)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.withTrailingSpacesIgnored(boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseLine7()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testTab()": "Use NotEscaped where character has not been escaped\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509966 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withQuote(Character)": "[CSV-159] Add IgnoreCase option for accessing header names\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1708685 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.parse(Reader)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCSV135()": "Sort members.", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean,boolean,boolean,boolean)": "Remove trailing white spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742145 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withQuoteChar(Character)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.equals(String,String)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.parseCommonsCSV(Blackhole)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.Stats(int,int)": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.CSVParser.parseString(String,CSVFormat)": "Refactor to only have minimal CSVParser constructors in favor of CSVParser factory methods for String, resource path, URL, and File. Update some tests to use the APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508544 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testEscapedLF()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParse6()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printRecord(Object[])": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1560382 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isEndOfFile(int)": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testNextToken3Escaping()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()": "Add tests for CSVFormat.equals for null quotes. Closes #12. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1747331 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParseLine4()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.initializeHeader()": "When withHeader is set to any non-null value, the first record is the first <em>data</em> record, not the header record.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508612 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.isDelimiterIgnored()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withCommentStart(char)": "Remove DISABLED character hack.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397783 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getHeaderComments()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVParserTest.testExcelFormat1()": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1578187 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParse3()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.println(Object[])": "Change the type of printer API to accept Object instead of String.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398005 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.generateLines(int,int)": "[CSV-168] CsvFormat.nullString should not be escaped. [CSV-170]\nCSVFormat.MYSQL nullString should be \"\\N\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1725407 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testNextToken4()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(OutputStream)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()": "Change JiraCsv164Test to JiraCsv154Test (#69)\n\n", "org.apache.commons.csv.CSVFormatTest.testEqualsHash()": "Prepare for 1.8-RC2.\n\n- Remove package private code with Java 8 equivalent\njava.util.Objects.requirteNonNull().\n- Checkstyle fixes.\n- Use final.\n- Remove unused import.\n", "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testConstructors()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testIgnoreSurroundingSpaces()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()": "Static imports in the unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301084 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()": "Improve test coverage in CSVFormatTest (#65)\n\n* Improve Format Coverage to 99percent\r\n\r\n* code format add space", "org.apache.commons.csv.ExtendedBufferedReader.markSupported()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchersTest.setUp()": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(InputStream)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.CSVParserTest(String)": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testMutators()": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398010 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPostgreSQLNullStringDefaultText()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParser.iterator()": "CSV-60 CSVParser.iterator().remove() should throw throw new UnsupportedOperationException()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300661 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.close()": "[CSV-217] Add autoFlush option for CsvPrinter. Applying modified patch\nThis closes #24.", "org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()": "Rename withCommentStart to withCommentMarker to avoid confusion because there is no corresponding withCommentStop method\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1610494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getEncapsulator()": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398009 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtils.parseLine(String)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testNextToken3()": "Change back to DEFAULT format name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1461192 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()": "[CSV-129] Add CSVFormat#with 0-arg methods matching boolean arg methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1621004 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)": "Rename getRecord() to nextRecord()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397900 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParseLine2()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withNullString(String)": "[CSV-130] CSVFormat#withHeader doesn't work well with #printComment, add withHeaderComments(String...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1623984 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testDefaultStrategy()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLookahead2()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.readAgain()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isDelimiter(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.setCommentStart(char)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken2()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withHeaderComments()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1725344 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()": "[CSV-207]\n\n Provide a CSV Format for printing PostgreSQL CSV and Text formats.", "org.apache.commons.csv.CSVFormatBuilderTest.testRFC4180()": "Avoid double boxing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460392 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testEmptyFile()": "Rename getRecord() to nextRecord()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397900 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.ExtendedBufferedReaderTest(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()": "Use final.", "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isStartOfLine(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()": "Change CSVFormat#Iterable<CSVRecord> parse(final Reader in) to return a CSVParser, which is compatible since CSVParser implements Iterable<CSVRecord>. This allows a caller to end the parsing by calling CSVParser#close() or to use CSVParser in a Java 7 try-with-resources, without tracking a reader or input stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508509 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testWithDelimiterLFThrowsException()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()": "Add APIs to print arrays of records and iterables of records.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398019 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,List,String,long,long)": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()": "[CSV-214] Adding a placeholder in the Lexer and CSV parser to store the\nend-of-line string. I applied the patch in spirit and made changes:\nthere is no need to use a boolean to track the state of the EOL String\n(set vs. not set). I also allowed for CR to be saved as an EOL string\nsince we allow that already.", "ch.netcetera.wake.core.format.FormatTests.main(String)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getRecordSeparator()": "Rename \"line separator\" to \"record separator\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398911 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.getIgnoreLeadingWhitespaces()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.getSeparatorChar()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testComments()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.reset()": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()": "Sort members.", "org.apache.commons.csv.CSVStrategy.setDelimiter(char)": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getHeader()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.withCommentStart(char)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParser.getHeaderNames()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo header names as an read-only list.", "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.getSeparatorChar()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.parse(Reader)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getAllValues()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testJiraCsv154_withCommentMarker()": "Test CSV-154.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1700391 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char)": "Removed the volatile modifier on the fields in CSVFormat to improve the performances\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1299479 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.isEndOfFile(int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()": "Oops, back out one of the previous changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1620896 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrinter2()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testNextToken6()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.unicodeEscapeLexer(int)": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.clear()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isCommentingEnabled()": "Calculate the booleans once; prepares for CSV-78\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305700 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testLineFeedEndings()": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.printLine(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.isCommentingDisabled()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testRoundtrip()": "Use the final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409464 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testTrim()": "Improved test coverage\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300516 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.equals(String,List)": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv167Test.parse()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.get(Enum)": "Let a null input to CSVRecord#get(Enum) fail in CSVRecord#get(String).\n", "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739672 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()": "[CSV-207]\n\n Provide a CSV Format for printing PostgreSQL CSV and Text formats.", "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parseResource(String,Charset,ClassLoader,CSVFormat)": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getCSVParser()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVFormat.validate()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.getInputStream()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParse5()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseLine1()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.CSVPrinterTest(String)": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.read(char,int,int)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testDisabledComment()": "Static imports in the unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301084 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)": "More info\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306046 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithHeader()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isClosed()": "Move resources to component specific folder.\n", "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.setUp()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumn()": "Rename typo in issues file names from cvs to csv.", "org.apache.commons.csv.CSVUtilsTest.testParseLine3()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVParserTest.testNextToken5()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParse2()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVPrinter.CSVPrinter(OutputStream,char)": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtils.printLine(String)": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testIterator()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559908 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.CSVRecord(String,Map,String,long,long)": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.CSVParserTest.testParseLine6()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()": "CSV-153: CSVPrinter doesn't skip creation of header record if skipHeaderRecord is set to true. Thanks to Wren. This also fixes #8 from github.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1706542 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)": "Sort methods.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetDelimiter()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()": "Improve lexer and token coverage (#67)\n\n* Improve Lexer and Token coverage\r\n\r\n* fix the imports", "org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsDelimiterThrowsException()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.toMap()": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.Lexer.close()": "Change CSVFormat#Iterable<CSVRecord> parse(final Reader in) to return a CSVParser, which is compatible since CSVParser implements Iterable<CSVRecord>. This allows a caller to end the parsing by calling CSVParser#close() or to use CSVParser in a Java 7 try-with-resources, without tracking a reader or input stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508509 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVPrinterTest.testPrinter4()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()": "Avoid resource leak warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1582813 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.trimTrailingSpaces(StringBuilder)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withNullString(String)": "[CSV-93] Allow the handling of NULL values. Use a single property 'nullString' for both input and output processing. No substitutions occur if null. For reading, nullString is used to convert field values to null. For writing, nullString is used to output the given string instead of the empty string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFileParserTest.generateData()": "FindBugs: Avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1725345 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withLeadingSpacesIgnored(boolean)": "CSV-67 UnicodeUnescapeReader should not be applied before parsing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301928 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.isLeadingSpacesIgnored()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparator()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.format(String[])": "Remove trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383577 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1306663.nextToken(Token)": "Rename ivar to ignoreSurroundingSpaces to match CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397784 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormatTest.testFormat()": "Update to JUnit 4.10 from 3.8.1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300977 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordLongTest.testGetLongByMissingString()": "Add CSVRecord#getLong(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setEndTrimmed(boolean)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVField.setName(String)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getQuoteCharacter()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.FercGovTest.testTransactionFile()": "- Add some real world CSV files. \n- Add a record API to get column values using an Enum.\n- Throw a better exception when a resource is not found in a class loader for the parser.\n- Replace some tabs with spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509068 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testParseURL()": "More lambdas, less boilerplate.\n", "org.apache.commons.csv.CSVUtilsTest.testParseLine1()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()": "Update to JUnit 4.10 from 3.8.1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300977 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.printer()": "[CSV-205] \n\nAdd convenience API CSVFormat#printer() to print to System.out.", "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVParser.parse(String,Charset,CSVFormat)": "Remove factory methods for creating CSVParsers for classpath resources\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1513994 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer)": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken3()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.show(String,Stats,long)": "Initial checkin of test harness\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301864 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CharBuffer.ensureCapacity(int)": "Removed unused methods from CharBuffer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300491 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getCommentStartCharacter()": "Restore commentMarker property which was overridden during refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612390 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()": "CSV-98  Line number counting is confusing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1479936 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testFF()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIntTest.createTestRecord()": "Add CSVRecord#getInt(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509450 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)": "Better ivar name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1585096 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1560382 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()": "Improve test coverage in CSVFormatTest (#65)\n\n* Improve Format Coverage to 99percent\r\n\r\n* code format add space", "org.apache.commons.csv.CharBuffer.append(StringBuffer)": "Applying checkstyle changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631133 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testSkip0()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.todoTestWriterWithHeader()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategyTest.testGetSetCommentStart()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.getConfig()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isStartOfLine(int)": "Refactor constants from various classes into a package private Constants class and use static imports.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397541 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testIsSet()": "[CSV-96] CSVRecord does not verify that the length of the header mapping matches the number of values - convert ArrayIndexOutOfBoundsException to IllegalArgumentException to give users a better feedback about what went wrong\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465738 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetHeaderNames()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVLexerTest.setUp()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testCR()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isCommentStartCharacterSet()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setFields(Collection)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testToString()": "Use final.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetEncapsulator()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(OutputStream,char)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withQuoteChar(Character)": "Revert back to NOT skipping a record when withHeader is called with a non-empty array. Add skipHeaderRecord setting to CSVFormat and use when headers are initialized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508933 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.reset()": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.getCurrentLineNumber()": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.getLineNumber()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isLineBreak(char)": "Validation of the format parameters (suggested by Bob Smith in SANDBOX-291)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298234 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.getLineNumber()": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.OLDtestBackslashEscaping()": "Removing System outs - SANDBOX-217\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631129 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchersTest.testToString()": "Improve lexer and token coverage (#67)\n\n* Improve Lexer and Token coverage\r\n\r\n* fix the imports", "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)": "fix isssue csv-259 (#61)\n\n* fix isssue csv-259\r\n\r\n* add testcase for CSV259\r\n\r\n* exclude csv259 test file\r\n\r\n* organize the imports", "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695179 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getLineNumber()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParse4()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRfc4180QuoteSingleChar()": "Add testRfc4180QuoteSingleChar().", "org.apache.commons.csv.CSVParserTest.testParse4()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetString()": "[CSV-96] CSVRecord does not verify that the length of the header mapping matches the number of values - convert ArrayIndexOutOfBoundsException to IllegalArgumentException to give users a better feedback about what went wrong\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465738 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.hasNext()": "- Add some real world CSV files. \n- Add a record API to get column values using an Enum.\n- Throw a better exception when a resource is not found in a class loader for the parser.\n- Replace some tabs with spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509068 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.JiraCsv167Test.parse()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1725344 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.nullMeansDisabled(Character)": "[CSV-94] Lexer should only use char fields.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397863 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitRowDelimiterLF()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.toString()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430324 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParse5()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getLineSeparator()": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testBackspace()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriter.CSVWriter(CSVConfig)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()": "CSV-247: CSVParser to check an empty header before checking duplicates. (#47)\n\nThis updates the issues test for CSV-247 and adds tests to the\r\nCSVParserTest.", "org.apache.commons.csv.CSVParser.parse(File,CSVFormat)": "org.apache.commons.csv.CSVParser.parse(File, Charset, CSVFormat) is now like org.apache.commons.csv.CSVParser.parse(URL, Charset, CSVFormat): You must pass in a Charset.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1602901 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.append(CharBuffer)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.Lexer.isEncapsulator(int)": "Remove DISABLED character hack.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397783 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setUnicodeEscapeInterpretation(boolean)": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.setCommentStart(char)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testSetCSVStrategy()": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CountingReaderCallback.onRow(String)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParse5()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.size()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinter.printRecords(Object[])": "Remove duplicated code by calling printRecords(Iterable)\n", "org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()": "Sort method.", "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.writer.CSVConfigGuesserTest.testSetters()": "Testcases for CSVWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373943 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIntTest.testGetIntegerByNullString()": "Add CSVRecord#getInt(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509450 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getHeaderNames()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVFormatTest.testJiraCsv236()": "[CSV-236] Allow duplicate headers in CSV File.\n\nAdd test.", "org.apache.commons.csv.ExtendedBufferedReader.skip(long)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isCommentingDisabled()": "Reduced the constants in CSVFormat for disabling the features to only one\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1200061 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()": "[CSV-239] Add CSVRecord.getHeaderNames and allow duplicate headers (#41)\n\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* getHeaderNames returns all headers in column order including repeats which are allowed as per RFC 4180\r\n* add CSVFormat.withAllowDuplicateHeaderNames()\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* only wrap headerNames with unmodifiableList if non-empty\r\n* fix and enhance CSVRecord.toMap javadoc\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix exception messages\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix whitespace\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* simplify if statement\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix indentation\r\n* add javadoc to Headers class\r\n* rename method to createHeaders\r\n* use String.format to build error message\r\n* initialize header names List with appropriate size\r\n", "org.apache.commons.csv.CSVPrinter.printAndEscape(char,int,int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printAndEncapsulate(CharSequence,int,int)": "Refactor magic strings into constants.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397534 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine3()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695178 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendSingleChar()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430324 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.addRecordValue()": "- Add some real world CSV files. \n- Add a record API to get column values using an Enum.\n- Throw a better exception when a resource is not found in a class loader for the parser.\n- Replace some tabs with spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509068 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withHeader(String[])": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testWithEscapeCRThrowsExceptions()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()": "Add some tests from PR\nhttps://patch-diff.githubusercontent.com/raw/apache/commons-csv/pull/19.\nCloses #19.", "org.apache.commons.csv.CSVFormatTest.testFormatToString()": "improve CSVFormat test coverage (#63)\n\n* improve CSVFormat test coverage\r\n\r\n* remove print in test", "org.apache.commons.csv.TokenMatchersTest.testHasType()": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isLineBreak(Character)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()": "Remove unnecessary array creation for varargs.\n", "ch.netcetera.wake.core.format.csv.CSVParser.simpleTokenLexer(Token,int)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinterTest.suite()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.withEmptyLinesIgnored(boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIterator.getNextRecord()": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()": "Validate that headers do not contain duplicates.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508618 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)": "Use final.", "org.apache.commons.csv.CSVParserTest.testNextValue()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isQuoteChar(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()": "Fix compiler warning.", "org.apache.commons.csv.perf.PerformanceTest.println()": "Unused\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398343 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetOneLine()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isDelimiter(int)": "Use ch instead of c as a character var name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508937 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVFormat.toStringArray(Object)": "[CSV-139] CSVPrinter.printRecord(ResultSet) with metadata.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1638101 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withRecordSeparator(char)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriter.setConfig(CSVConfig)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()": "Sort members.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testGetSetCommentStart()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.getCharacterPosition()": "Sort methods in AB order.\n", "org.apache.commons.csv.CSVFormatBuilder.withCommentStart(char)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()": "Rename ivars that were in the past tense to use the imperative style.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397087 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getEscapeCharacter()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testNextToken4()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testCSV57()": "Avoid resource leak warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1582813 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.setHasFieldHeader(boolean)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.println(String)": "Fix compilation issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383504 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testNextToken2()": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCvs247Test.testJiraDescription()": "[CSV-247]  A single empty header is allowed when not allowing empty\ncolumn headers.\n\nAdd test case.", "org.apache.commons.csv.Lexer.getCurrentLineNumber()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()": "Sort method.", "org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatLFThrowsException()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()": "Remove type names from static factory APIs in org.apache.commons.csv.CSVParser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511883 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.setSeparatorChar(char)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testInvalidFormat()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinterTest.doRandom(int)": "Added a predefined format for MySQL (SANDBOX-410)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297944 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRandomExcel()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1560382 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetUnmapped()": "Make sure an unmapped header returns null\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1498003 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testQuotePolicyNoneWithoutEscapeThrowsException()": "Rename methods that create a builder newBuilder().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409455 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1306667.nextToken(Token)": "Rename ivar to ignoreEmptyLines to match CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397785 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()": "Use final.", "org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()": "[CSV-149] Add disabled test.\n", "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)": "[CSV-159] Add IgnoreCase option for accessing header names\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1708685 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.getEBR(String)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.getEncapsulator()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.nextValue()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer3.nextToken(Token)": "Add experimental state-driven lexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306519 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getComment()": "Add CSVRecord#getLong(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.shrink()": "SANDBOX-206: fix whitespace handling w/ escaping, add an option to not remove trailing whitespace\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@609327 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.getLineNumber()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)": "Rename getRecord() to nextRecord()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397900 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isMetaChar(int)": "Allow a caller to close the parser before reading all records and free resources. The parser and lexer now implement java.io.Closeable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508475 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()": "Move resources to component specific folder.\n", "ch.netcetera.wake.core.format.csv.CSVPrinter.CSVPrinter(Writer)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.readAll(BufferedReader,boolean)": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.CSVPrinterTest.testJira135All()": "[CSV-171] Negative numeric values in the first column are always quoted\nin minimal mode.", "org.apache.commons.csv.CSVPrinterTest.testRandom()": "After discussion on ML (http://apache-commons.680414.n4.nabble.com/CSV-org-apache-commons-csv-CSVFormat-DEFAULT-td4647843.html) from 6 days ago, handle this TODO, and renamed DEFAULT to RFC4180_EMPTY_LINES.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1461134 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Headers.Headers(Map,List)": "Sort methods in AB order.\n", "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()": "CSV-247: CSVParser to check an empty header before checking duplicates. (#47)\n\nThis updates the issues test for CSV-247 and adds tests to the\r\nCSVParserTest.", "org.apache.commons.csv.CSVRecordTest.testIsConsistent()": "[CSV-96] CSVRecord does not verify that the length of the header mapping matches the number of values - convert ArrayIndexOutOfBoundsException to IllegalArgumentException to give users a better feedback about what went wrong\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465738 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.createHeaderNames(Map)": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()": "Change CSVFormat#Iterable<CSVRecord> parse(final Reader in) to return a CSVParser, which is compatible since CSVParser implements Iterable<CSVRecord>. This allows a caller to end the parsing by calling CSVParser#close() or to use CSVParser in a Java 7 try-with-resources, without tracking a reader or input stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508509 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVUtilsTest.testParse4()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()": "After discussion on ML (http://apache-commons.680414.n4.nabble.com/CSV-org-apache-commons-csv-CSVFormat-DEFAULT-td4647843.html) from 6 days ago, handle this TODO, and renamed DEFAULT to RFC4180_EMPTY_LINES.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1461134 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.testReadLine()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchers.hasContent(String)": "Simplify if statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1512399 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testFF()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriter.writeRecord(Map)": "Apply configurable row delimiter by Dmitry Drozdov (SANDBOX-329).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1003046 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReader.isClosed()": "Sort methods in AB order.\n", "org.apache.commons.csv.CSVFileParserTest.readTestData(BufferedReader)": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)": "Revert back to NOT skipping a record when withHeader is called with a non-empty array. Add skipHeaderRecord setting to CSVFormat and use when headers are initialized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508933 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendNull()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TestCSVParser.TestCSVParser(Reader,CSVStrategy)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.defaults()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()": "Static imports in the unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301084 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()": "Use final.", "org.apache.commons.csv.CSVFormat.isEmptyLinesIgnored()": "Rename ivars that were in the past tense to use the imperative style.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397087 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testBackslashWithEscaping()": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.isEmptyLinesIgnored()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printSep()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.setUp()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVPrinter.print(char,int,int,boolean)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testUnicodeEscape()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.getLineNumber()": "CSV-98  Line number counting is confusing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1479936 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVField.getFill()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "ch.netcetera.wake.core.format.csv.CSVParser.setExcelStrategy()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.getDelimiter()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testWithCommentStartCRThrowsException()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testCreate()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVLexerTest.testCommentsAndEmptyLines()": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine2()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testBOMInputStream()": "Testing [CSV-107] CSVFormat.EXCEL.parse should handle byte order marks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1578196 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testHeadersMissing()": "CSV-247: CSVParser to check an empty header before checking duplicates. (#47)\n\nThis updates the issues test for CSV-247 and adds tests to the\r\nCSVParserTest.", "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()": "Sort methods.", "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()": "Consistently rename Quote/QuotePolicy to QuoteMode\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612344 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRandomMongoDbCsv()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormat.hashCode()": "Consistently rename Quote/QuotePolicy to QuoteMode\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612344 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.simpleTokenLexer(Token,int)": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.ExtendedBufferedReader.readUntil(char)": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.getCharacters()": "Removed unused methods from CharBuffer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300491 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.parseOpenCSV(Blackhole)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testIgnoreSurroundingSpacesAreDeleted()": "Express intention of tokens in token content and give test more structure\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465705 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1306663.CSVLexer1306663(CSVFormat,ExtendedBufferedReader)": "Fix revision\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306789 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapedCR()": "Split up escape testing into separate methods, add escaping tests that should work after CSV-58 is resolved (currently ignored)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460364 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.CSVParser(Reader)": "Remove factory methods for creating CSVParsers for classpath resources\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1513994 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordIterator.remove()": "[CSV-224] Some Multi Iterator Parsing Peek Sequences Incorrectly Consume\nElements.", "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)": "Static imports in the unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301084 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrinter1()": "Add APIs to print arrays of records and iterables of records.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398019 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv248Test.getTestInput()": "[CSV-248] Test CSVRecord deserialization from binary format.\n\nThe serialised form was created using version 1.6.\n", "org.apache.commons.csv.LexerTest.testNextToken5()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVFormat.getQuotePolicy()": "Consistently rename Quote/QuotePolicy to QuoteMode\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612344 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendString2()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430324 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVLexerTest.testEscapedTab()": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testProvidedHeader()": "Add CVSRecord.isSet(String) API.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397136 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Lexer.isQuoteChar(int)": "Package private classes are not prefixed with \"CSV\": CSVLexer -> Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getNullString()": "[CSV-93] Allow the handling of NULL values. Use a single property 'nullString' for both input and output processing. No substitutions occur if null. For reading, nullString is used to convert field values to null. For writing, nullString is used to output the given string instead of the empty string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlText()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultCsv()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.CSVParser.getNextLine()": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testRFC4180()": "Use is prefix for getters that return booleans\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1610490 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBufferTest.testAppendStringBuffer()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchers.hasType(Token)": "Simplify if statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1512399 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.parseSimpleToken(Token,int)": "Better param name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495268 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.print(Path,Charset)": "org.apache.commons.csv.CSVFormat.print(Path, Charset) should use NIO and\nnot convert the Path to a File.", "org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.writer.CSVWriter.setWriter(Writer)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withHeader(ResultSet)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVFormat.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)": "[CSV-93] Allow the handling of NULL values. Use a single property 'nullString' for both input and output processing. No substitutions occur if null. For reading, nullString is used to convert field values to null. For writing, nullString is used to output the given string instead of the empty string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVStrategy)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isSurroundingSpacesIgnored()": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithDelimiter()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object,String,boolean,boolean)": "[CSV-130] CSVFormat#withHeader doesn't work well with #printComment, add withHeaderComments(String...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1623984 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.skipUntil(char)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()": "Use final.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testGetLine()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()": "[CSV-233] Add predefined CSVFormats for printing MongoDB CSV and TSV.", "org.apache.commons.csv.writer.CSVField.getName()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getFirstEndOfLine()": "[CSV-214] Adding a placeholder in the Lexer and CSV parser to store the\nend-of-line string. I applied the patch in spirit and made changes:\nthere is no need to use a boolean to track the state of the EOL String\n(set vs. not set). I also allowed for CR to be saved as an EOL string\nsince we allow that already.", "org.apache.commons.csv.CSVFormatBuilderTest.testDelimiterSameAsEscapeThrowsException()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVLexer1.CSVLexer1(CSVFormat,ExtendedBufferedReader)": "Temporary copy of original CSVLexer for performance comparison.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1303901 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testQuoteCharSameAsCommentStartThrowsException()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testUnicodeEscape()": "Update to JUnit 4.10 from 3.8.1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300977 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.testEscapedLF()": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.guess()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Token.toString()": "Provide toString method for IDE debugging\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306047 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigTest.testFixedWith()": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCvs247Test.testHeadersMissingOneColumn()": "[CSV-247]  A single empty header is allowed when not allowing empty\ncolumn headers.\n\nAdd test case.", "org.apache.commons.csv.CSVRecordTest.testGetInt()": "[CSV-96] CSVRecord does not verify that the length of the header mapping matches the number of values - convert ArrayIndexOutOfBoundsException to IllegalArgumentException to give users a better feedback about what went wrong\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465738 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinterTest.testExcelPrinter1()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testBackspace()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCvs249Test.testJiraCsv249()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVRecordTest.testToMap()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559908 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.AllTests.suite()": "added test suites\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430326 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getCommentStart()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isWhitespace(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.Stats.Stats(int,int)": "[CSV-225] Parse method should avoid creating a redundant BufferedReader.", "org.apache.commons.csv.CSVPrinter.getOut()": "Add accessor for out ivar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1560384 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()": "[CSV-68] Use the Builder pattern for CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchers.describeTo(Description)": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.build()": "[CSV-97] Allow the String value for null to be customized for the CSV printer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465768 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.PerformanceTest.getLexerCtor(String)": "Minor clean ups.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1461302 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testIsMapped()": "[CSV-96] CSVRecord does not verify that the length of the header mapping matches the number of values - convert ArrayIndexOutOfBoundsException to IllegalArgumentException to give users a better feedback about what went wrong\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465738 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withIgnoreEmptyLines(boolean)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.getIgnoreEmptyLines()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String,String,long,long)": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\n- Redo so that the record tracks its source parser where call sites can\nfind metadata. This avoids adding slots to the record class itself.", "org.apache.commons.csv.CSVStrategy.getIgnoreLeadingWhitespaces()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer,char)": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinterTest.expectNulls(T,CSVFormat)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739671 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetLine()": "[CSV-129] Add CSVFormat#with 0-arg methods matching boolean arg methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1621004 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordBooleanTest.testGetBooleanByNullString()": "Simplify tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509446 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.getValueDelimiter()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.toString()": "[CSV-239] Cannot get headers in column order from CSVRecord.", "org.apache.commons.csv.writer.AllTests.suite()": "added test suites\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430326 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)": "[CSV-217] Add autoFlush option for CsvPrinter. Applying modified patch\nThis closes #24.", "org.apache.commons.csv.CSVParserTest.testExcelStrategy2()": "change excel strategy to use ',' as the separator: SANDBOX-182\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@489553 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.withNullToString(String)": "[CSV-93] Allow the handling of NULL values. Use a single property 'nullString' for both input and output processing. No substitutions occur if null. For reading, nullString is used to convert field values to null. For writing, nullString is used to output the given string instead of the empty string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.readEscape(int)": "Replaced the unicode escaping code from the parser with a class implementing java.io.Reader\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298001 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.withEscape(char)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.println()": "Rename \"line separator\" to \"record separator\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398911 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()": "Rename test package org.apache.commons.csv.bugs to\norg.apache.commons.csv.issues.", "org.apache.commons.csv.CSVRecordLongTest.setUp()": "Add CSVRecord#getLong(String) API and tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509449 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)": "Prepare for 1.8-RC2.\n\n- Remove package private code with Java 8 equivalent\njava.util.Objects.requirteNonNull().\n- Checkstyle fixes.\n- Use final.\n- Remove unused import.\n", "org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char,Character,Quote,Character,Character,boolean,boolean,String,String,String)": "[CSV-99] Revert Builder implementation in CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508470 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.getCommentStart()": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn't use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)": "[CSV-171] Negative numeric values in the first column are always quoted\nin minimal mode.", "ch.netcetera.wake.core.format.csv.CSVParserTest.testParseLine6()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parseString(String)": "Refactor to only have minimal CSVParser constructors in favor of CSVParser factory methods for String, resource path, URL, and File. Update some tests to use the APIs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508544 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)": "Sort members.", "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()": "Make sure only record separators we can handle are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1609548 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.createHeaderMap()": "[CSV-239] Cannot get headers in column order from CSVRecord.\n\nSome NPE-proofing.", "org.apache.commons.csv.CSVFileParserTest.testCSVUrl()": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559908 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.setEscape(char)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer3.CSVLexer3(CSVFormat,ExtendedBufferedReader)": "Add experimental state-driven lexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306519 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.Lexer.nextToken(Token)": "Better ivar name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1585096 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)": "- Remove unused import.\n- Remove trailing white spaces on all lines.\n- Use final.\n- Use for-each (in test).\n- Use try-with-resources (in test).\n- Document empty blocks.", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String,boolean,boolean)": "Consistently rename Quote/QuotePolicy to QuoteMode\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612344 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setFillChar(char)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReaderTest.suite()": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isCommentStart(int)": "Merge Lexer with CSVLexer\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511006 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withUnicodeEscapesInterpreted(boolean)": "Changed the return type of CSVFormat.clone()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1201060 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.isWhitespace(int)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()": "Sort methods.", "org.apache.commons.csv.LexerTest.testNextToken4()": "[CSV-129] Add CSVFormat#with 0-arg methods matching boolean arg methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1621004 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testWithEscape()": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withTrailingSpacesIgnored(boolean)": "CSV-67 UnicodeUnescapeReader should not be applied before parsing\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301928 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])": "[CSV-159] Add IgnoreCase option for accessing header names\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1708685 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParserTest.TestCSVParser(Reader)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)": "Fix the old test case record.getComment() will never be null (#62)\n\n* The old test case record.getComment() will never be null and if record.getComment() be null the test code misplace the null test.\r\nAdd a new test file that record.getComment() will be null and test record.getComment() no null before using\r\n\r\n* keep the caching of \"record.getComment()\"", "org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()": "Improve record and printer Coverage (#66)\n\n* Improve CSVRecord and CSVPrinter coverage\r\n\r\n* remove useless test code and test throws\r\n\r\n* add space", "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()": "Static imports in the unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301084 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVField.setFill(int)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.CSVPrinter(Writer,CSVStrategy)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,char,char,char,boolean,boolean,boolean,boolean,String,String)": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.setCommentStart(char)": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()": "CSV-247: CSVParser to check an empty header before checking duplicates. (#47)\n\nThis updates the issues test for CSV-247 and adds tests to the\r\nCSVParserTest.", "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()": "Sort members.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398135 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)": "[CSV-238] Escape quotes in CLOBs.\n\nCloses #39.", "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVRecord.getBoolean(String)": "Remove primitive APIs in CSVRecord.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1510455 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withTrim()": "Sort methods in alphabetic order\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742506 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.createHeaders()": "- Remove unused import.\n- Remove trailing white spaces on all lines.\n- Use final.\n- Use for-each (in test).\n- Use try-with-resources (in test).\n- Document empty blocks.", "org.apache.commons.csv.CSVParserTest.testParse()": "Replace org.apache.commons.csv.Assertions.notNull() with\nObjects.requireNonNull().\n", "org.apache.commons.csv.CSVStrategy.isTrailingSpacesIgnored()": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testClose()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVFormatBuilderTest.testIgnoreEmptyLines()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.setDelimiter(char)": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo != null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.getBufferedReader()": "Better performance tests. Provide a test CSV file to work with. Tests depends on Commons IO to help decompress the large-ish CSV test file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397119 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.addField(CSVField)": "Upgrading to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199845 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.getAutoFlush()": "Sort methods.", "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()": "Use final.", "org.apache.commons.csv.CSVFormat.valueOf(String)": "[CSV-157] Add enum CSVFormat.Predefined that contains the default CSVFormat values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695179 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testTrim()": "[CSV-175] Support for ignoring trailing delimiter.\n[CSV-177] Support trimming leading and trailing blanks.\n[CSV-178] Create default formats for Informix UNLOAD and UNLOAD CSV.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1739694 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testPrinter6()": "Varargs for CSVPrinter.println()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297136 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.Token.Token()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1578187 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testGetOneLineCustomCollection()": "Add API org.apache.commons.csv.CSVParser.getRecords(T).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1584903 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.withDelimiter(Character)": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398009 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()": "CSV-117 Validate format parameters in constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1603967 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,String,boolean,boolean)": "Restore commentMarker property which was overridden during refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612390 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVWriterTest.testWriterWithExplicitValueDelimiter()": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1037647 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecord.getRecordNumber()": "[CSV-52] Keep track of record numbers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397895 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()": "Fixtypo in the PerformanceTest (#55)\n\n", "org.apache.commons.csv.CSVStrategy.withLeadingSpacesIgnored(boolean)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.nextToken(Token)": "Oops - fix bug introduced in r1303933 \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1303948 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer130663.encapsulatedTokenLexer(Token)": "Save current lexer for comparisons\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306664 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.isQuoting()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVPrinterTest.CSVPrinterTest(String)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEolAtEof(boolean)": "[CSV-149] Add disabled test.\n", "org.apache.commons.csv.CSVRecord.isComment()": "Unit test for [CSV-167] Comment line hides next record.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1721778 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.TestCSVParser(Reader,CSVStrategy)": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.CSVFormatBuilder(char)": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfig.equals(Object)": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.print(File,Charset)": "Sort methods.", "ch.netcetera.wake.core.format.csv.CSVParserTest.suite()": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormat.printAndEscape(CharSequence,int,int,Appendable)": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.writer.CSVConfigGuesser.CSVConfigGuesser()": "Start with CSVWriter.. (it's kind of working already..)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@373942 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testHeader()": "Rename methods that create a builder newBuilder().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409455 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilder.validate()": "Sort members, classes and methods (but not fields).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465763 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer1306667.CSVLexer1306667(CSVFormat,ExtendedBufferedReader)": "Another baseline\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1307043 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.parseResource(String,Charset,CSVFormat)": "- Remove trailing spaces.\n- Add missing final keywords.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1509069 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()": "CSV-252: Migration to JUnit Jupiter (#49)\n\n* CSV-252 Stop using junit.framework.TestCase\r\n\r\njunit.framework.TestCase is a class from JUnit 3, and while it is not\r\nofficially deprecated, it's discouraged to use it.\r\n\r\nThis patch removes the single use of\r\njunit.framework.TestCase#assertNull, and replaces it with the\r\nstandard, recommended, org.junit.Assert#assertNull.\r\n\r\n* CSV-252 Standardize org.junit.Assert imports\r\n\r\nCode in the project uses org.junit.Assert's methods in two ways:\r\n1. By statically importing them\r\n2. By importing the class and using its methods\r\n\r\nOption 1 seems to be the de-facto standard, with just a handful of\r\ncases using Option 2.\r\nThis patch standardizes these cases to also use static imports thus\r\nmaking the code look more uniform, and easier to maintain.\r\n\r\n* CSV-252 Upgrade Mockito to 3.1.0\r\n\r\nUpgrade the Mockito dependency to the latest available version, 3.1.0,\r\nin order to facilitate an upgrade to JUnit Jupiter.\r\n\r\n* CSV-252 JUnit Jupiter upgrade\r\n\r\nThis patch upgrades the project's testing framework from JUnit 4.12\r\nto the modern JUnit Jupiter 5.5.4.\r\n\r\nSince JUnit 5 Jupiter is not backwards compatible to JUnit 4.x (or\r\neven JUnit Vintage), this patch is a bit large, even though a lot of\r\nthe changes are merely cosmetic (such as changing the argument order,\r\nsee details below). In order to make the reviewer's task as easy as\r\npossible, this PR does not presume to use JUnit Jupiter's best\r\npractices and all its new functionality, but only to migrate the\r\nexisting tests with as little change as possible. Following patches\r\nmay want to improve the tests by using some of JUnit Jupiter's new\r\nfeatures.\r\n\r\nThis patch includes the following changes:\r\n\r\n1. Maven dependency changes:\r\n a. junit:junit was replaced with org.junit.jupiter:junit-jupiter.\r\n b. org.hamcrest:hamcrest was introduced as an explicit dependency,\r\n    since the project uses Hamcrest, and JUnit Jupiter does not\r\n    bundle Hamcrest, unlike JUnit 4.x.\r\n\r\n2. Annotations:\r\n a. org.junit.jupiter.api.Test was used as a drop in replacement for\r\n    org.juit.Test without arguments. See 3.ii. for handling of @Test\r\n    annotations with an \"expected\" argument.\r\n b. org.junit.jupiter.api.BeforeEach was used as an drop in\r\n    replacement for org.junit.Before.\r\n c. org.junit.jupiter.api.BeforeAll was used as an drop in\r\n    replacement for org.junit.BeforeClass.\r\n d. org.junit.jupiter.api.Disabled was used as a drop in replacement\r\n    for org.junit.Ignore.\r\n\r\n3. Assertions:\r\n a. org.junit.jupiter.api.Assertions' methods were used as drop in\r\n    replacements for org.junit.Assert's methods with the same name in\r\n    the simple case of an assertion without a message. In the case of\r\n    an assertion with a message, org.junit.jupiter.api.Assertions'\r\n    methods were used, but the argument order was changed - Assert's\r\n    methods take the message as the first argument, while Assertions'\r\n    methods take the message as the last argument.\r\n b. org.junit.jupiter.api.Assertions#assertThrows was used to assert\r\n    that a specific exception was throws instead of an org.junit.Test\r\n    annotation with an expected argument. This technique has a couple\r\n    of side bonuses. First, it makes the tests slightly stricter, as\r\n    now they can assert the exception was thrown from a specific line\r\n    and prevent false positives where the test's \"set-up\" code\r\n    accidentally threw that exception. Second, it clarifies that some\r\n    of the test code is unreachable (as a previous line already\r\n    throws an exception), and can safely be removed in order to clean\r\n    up the test. The throws clauses of these methods were cleaned up\r\n    from exceptions that can no longer be thrown in order to avoid\r\n    compilation warnings.\r\n c. org.hamcrest.MatcherAssert#assertThat was used as a drop in\r\n    replacement for org.junit.Assert#assertThat.\r\n\r\n4. Specific Changes:\r\n a. CSVFileParserTest was rewritten with JUnit Jupiter's\r\n    org.junit.jupiter.api.ParameterizedTest. Unlike JUnit 4's\r\n    org.junit.runners.Parameterized, it cannot be used to inject\r\n    arguments to a test's construct, and so the test can't be\r\n    stateful. Instead, it was rewritten so every test receives the\r\n    file as a parameter, and opens a reader on it itself. As a side\r\n    bonus, this design makes it easier to close the reader and avoid\r\n    leaving open file descriptors like the original test did.\r\n", "org.apache.commons.csv.CSVParser.CSVParser(InputStream)": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinter.printAndEscape(CharSequence,int,int)": "Changed CSVPrinter to print to any Appendable and optimized the internals to avoid string copies\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297309 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVBenchmark.parseGenJavaCSV(Blackhole)": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1695167 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVPrinterTest.testCRComment()": "Improve record and printer Coverage (#66)\n\n* Improve CSVRecord and CSVPrinter coverage\r\n\r\n* remove useless test code and test throws\r\n\r\n* add space", "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Character,Character,boolean,boolean,String,String)": "Add quote policy to format. (Considering renaming \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me. )\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398008 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.encapsulatedTokenLexer(Token)": "Rename encapsulator to quote char.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398187 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.ExtendedBufferedReaderTest.suite()": "Removing unnecessary suite() methods, object attributes and constructors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631847 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.ExtendedBufferedReader.readUntil(char)": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVStrategy.withEncapsulator(char)": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()": "Remove unnecessary array creation for varargs.\n", "org.apache.commons.csv.CSVParser.Headers(Map,List)": "[CSV-239] Add CSVRecord.getHeaderNames and allow duplicate headers (#41)\n\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* getHeaderNames returns all headers in column order including repeats which are allowed as per RFC 4180\r\n* add CSVFormat.withAllowDuplicateHeaderNames()\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* only wrap headerNames with unmodifiableList if non-empty\r\n* fix and enhance CSVRecord.toMap javadoc\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix exception messages\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix whitespace\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* simplify if statement\r\n\r\n* [CSV-239] Cannot get headers in column order from CSVRecord.\r\n* fix indentation\r\n* add javadoc to Headers class\r\n* rename method to createHeaders\r\n* use String.format to build error message\r\n* initialize header names List with appropriate size\r\n", "org.apache.commons.csv.CSVRecordTest.validateMap(Map,boolean)": "[CSV-105] Add Map conversion API to CSVRecord.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1559905 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.nextToken()": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.TokenMatchersTest.testMatches()": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1463207 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.bugs.JiraCsv167Test.parse()": "Use try-with-resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1748094 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CharBuffer.CharBuffer()": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Gl\u00fcck\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430324 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParser.getHeaderMapRaw()": "Move resources to component specific folder.\n", "org.apache.commons.csv.CSVPrinter.printComment(String)": "Sort methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1560382 13f79535-47bb-0310-9956-ffa450edef68\n", "ch.netcetera.wake.core.format.csv.CSVParser.CSVParser(Reader,char)": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVFormatBuilderTest.testNewFormatCRThrowsException()": "Sort members in AB order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458639 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexer.isEndOfLine(int)": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVParserTest.testSetExcelStrategy()": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n", "org.apache.commons.csv.CSVLexerTest.assertTokenEquals(Token,String,Token)": "Update to JUnit 4.10 from 3.8.1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300977 13f79535-47bb-0310-9956-ffa450edef68\n"}